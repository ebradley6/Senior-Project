// DE1_SoC_QSYS_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module DE1_SoC_QSYS_mm_interconnect_1 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_50_clk_clk,                                                      //                                                    clk_50_clk.clk
		input  wire        pll_sys_outclk0_clk,                                                 //                                               pll_sys_outclk0.clk
		input  wire        pll_sys_outclk2_clk,                                                 //                                               pll_sys_outclk2.clk
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,                             //                             cpu_reset_n_reset_bridge_in_reset.reset
		input  wire        fifo_0_reset_in_reset_bridge_in_reset_reset,                         //                         fifo_0_reset_in_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,                         //                         jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        ledr_reset_reset_bridge_in_reset_reset,                              //                              ledr_reset_reset_bridge_in_reset.reset
		input  wire [25:0] cpu_data_master_address,                                             //                                               cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                         //                                                              .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                          //                                                              .byteenable
		input  wire        cpu_data_master_read,                                                //                                                              .read
		output wire [31:0] cpu_data_master_readdata,                                            //                                                              .readdata
		output wire        cpu_data_master_readdatavalid,                                       //                                                              .readdatavalid
		input  wire        cpu_data_master_write,                                               //                                                              .write
		input  wire [31:0] cpu_data_master_writedata,                                           //                                                              .writedata
		input  wire        cpu_data_master_debugaccess,                                         //                                                              .debugaccess
		input  wire [19:0] cpu_instruction_master_address,                                      //                                        cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                                  //                                                              .waitrequest
		input  wire        cpu_instruction_master_read,                                         //                                                              .read
		output wire [31:0] cpu_instruction_master_readdata,                                     //                                                              .readdata
		output wire        cpu_instruction_master_readdatavalid,                                //                                                              .readdatavalid
		output wire [3:0]  alt_vip_cti_0_control_address,                                       //                                         alt_vip_cti_0_control.address
		output wire        alt_vip_cti_0_control_write,                                         //                                                              .write
		output wire        alt_vip_cti_0_control_read,                                          //                                                              .read
		input  wire [15:0] alt_vip_cti_0_control_readdata,                                      //                                                              .readdata
		output wire [15:0] alt_vip_cti_0_control_writedata,                                     //                                                              .writedata
		output wire [5:0]  alt_vip_mix_0_control_address,                                       //                                         alt_vip_mix_0_control.address
		output wire        alt_vip_mix_0_control_write,                                         //                                                              .write
		input  wire [15:0] alt_vip_mix_0_control_readdata,                                      //                                                              .readdata
		output wire [15:0] alt_vip_mix_0_control_writedata,                                     //                                                              .writedata
		output wire        alt_vip_mix_0_control_chipselect,                                    //                                                              .chipselect
		output wire [4:0]  alt_vip_vfr_0_avalon_slave_address,                                  //                                    alt_vip_vfr_0_avalon_slave.address
		output wire        alt_vip_vfr_0_avalon_slave_write,                                    //                                                              .write
		output wire        alt_vip_vfr_0_avalon_slave_read,                                     //                                                              .read
		input  wire [31:0] alt_vip_vfr_0_avalon_slave_readdata,                                 //                                                              .readdata
		output wire [31:0] alt_vip_vfr_0_avalon_slave_writedata,                                //                                                              .writedata
		output wire [8:0]  clock_crossing_io_slow_s0_address,                                   //                                     clock_crossing_io_slow_s0.address
		output wire        clock_crossing_io_slow_s0_write,                                     //                                                              .write
		output wire        clock_crossing_io_slow_s0_read,                                      //                                                              .read
		input  wire [31:0] clock_crossing_io_slow_s0_readdata,                                  //                                                              .readdata
		output wire [31:0] clock_crossing_io_slow_s0_writedata,                                 //                                                              .writedata
		output wire [0:0]  clock_crossing_io_slow_s0_burstcount,                                //                                                              .burstcount
		output wire [3:0]  clock_crossing_io_slow_s0_byteenable,                                //                                                              .byteenable
		input  wire        clock_crossing_io_slow_s0_readdatavalid,                             //                                                              .readdatavalid
		input  wire        clock_crossing_io_slow_s0_waitrequest,                               //                                                              .waitrequest
		output wire        clock_crossing_io_slow_s0_debugaccess,                               //                                                              .debugaccess
		output wire [8:0]  cpu_jtag_debug_module_address,                                       //                                         cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                                         //                                                              .write
		output wire        cpu_jtag_debug_module_read,                                          //                                                              .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                                      //                                                              .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,                                     //                                                              .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,                                    //                                                              .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,                                   //                                                              .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,                                   //                                                              .debugaccess
		output wire [0:0]  fifo_0_in_address,                                                   //                                                     fifo_0_in.address
		output wire        fifo_0_in_write,                                                     //                                                              .write
		output wire [31:0] fifo_0_in_writedata,                                                 //                                                              .writedata
		input  wire        fifo_0_in_waitrequest,                                               //                                                              .waitrequest
		output wire [2:0]  fifo_0_in_csr_address,                                               //                                                 fifo_0_in_csr.address
		output wire        fifo_0_in_csr_write,                                                 //                                                              .write
		output wire        fifo_0_in_csr_read,                                                  //                                                              .read
		input  wire [31:0] fifo_0_in_csr_readdata,                                              //                                                              .readdata
		output wire [31:0] fifo_0_in_csr_writedata,                                             //                                                              .writedata
		output wire [1:0]  i2c_data_0_s1_address,                                               //                                                 i2c_data_0_s1.address
		output wire        i2c_data_0_s1_write,                                                 //                                                              .write
		input  wire [31:0] i2c_data_0_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] i2c_data_0_s1_writedata,                                             //                                                              .writedata
		output wire        i2c_data_0_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]  i2c_end_flag_0_s1_address,                                           //                                             i2c_end_flag_0_s1.address
		input  wire [31:0] i2c_end_flag_0_s1_readdata,                                          //                                                              .readdata
		output wire [1:0]  i2c_start_flag_0_s1_address,                                         //                                           i2c_start_flag_0_s1.address
		output wire        i2c_start_flag_0_s1_write,                                           //                                                              .write
		input  wire [31:0] i2c_start_flag_0_s1_readdata,                                        //                                                              .readdata
		output wire [31:0] i2c_start_flag_0_s1_writedata,                                       //                                                              .writedata
		output wire        i2c_start_flag_0_s1_chipselect,                                      //                                                              .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                                 //                                   jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                   //                                                              .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                    //                                                              .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                                //                                                              .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                               //                                                              .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                             //                                                              .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                              //                                                              .chipselect
		output wire [1:0]  key_s1_address,                                                      //                                                        key_s1.address
		output wire        key_s1_write,                                                        //                                                              .write
		input  wire [31:0] key_s1_readdata,                                                     //                                                              .readdata
		output wire [31:0] key_s1_writedata,                                                    //                                                              .writedata
		output wire        key_s1_chipselect,                                                   //                                                              .chipselect
		output wire [1:0]  ledr_s1_address,                                                     //                                                       ledr_s1.address
		output wire        ledr_s1_write,                                                       //                                                              .write
		input  wire [31:0] ledr_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] ledr_s1_writedata,                                                   //                                                              .writedata
		output wire        ledr_s1_chipselect,                                                  //                                                              .chipselect
		output wire [8:0]  mm_clock_crossing_bridge_1_s0_address,                               //                                 mm_clock_crossing_bridge_1_s0.address
		output wire        mm_clock_crossing_bridge_1_s0_write,                                 //                                                              .write
		output wire        mm_clock_crossing_bridge_1_s0_read,                                  //                                                              .read
		input  wire [31:0] mm_clock_crossing_bridge_1_s0_readdata,                              //                                                              .readdata
		output wire [31:0] mm_clock_crossing_bridge_1_s0_writedata,                             //                                                              .writedata
		output wire [0:0]  mm_clock_crossing_bridge_1_s0_burstcount,                            //                                                              .burstcount
		output wire [3:0]  mm_clock_crossing_bridge_1_s0_byteenable,                            //                                                              .byteenable
		input  wire        mm_clock_crossing_bridge_1_s0_readdatavalid,                         //                                                              .readdatavalid
		input  wire        mm_clock_crossing_bridge_1_s0_waitrequest,                           //                                                              .waitrequest
		output wire        mm_clock_crossing_bridge_1_s0_debugaccess,                           //                                                              .debugaccess
		output wire [15:0] onchip_memory2_s1_address,                                           //                                             onchip_memory2_s1.address
		output wire        onchip_memory2_s1_write,                                             //                                                              .write
		input  wire [31:0] onchip_memory2_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] onchip_memory2_s1_writedata,                                         //                                                              .writedata
		output wire [3:0]  onchip_memory2_s1_byteenable,                                        //                                                              .byteenable
		output wire        onchip_memory2_s1_chipselect,                                        //                                                              .chipselect
		output wire        onchip_memory2_s1_clken,                                             //                                                              .clken
		output wire [1:0]  play_out_0_s1_address,                                               //                                                 play_out_0_s1.address
		output wire        play_out_0_s1_write,                                                 //                                                              .write
		input  wire [31:0] play_out_0_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] play_out_0_s1_writedata,                                             //                                                              .writedata
		output wire        play_out_0_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]  sw_s1_address,                                                       //                                                         sw_s1.address
		output wire        sw_s1_write,                                                         //                                                              .write
		input  wire [31:0] sw_s1_readdata,                                                      //                                                              .readdata
		output wire [31:0] sw_s1_writedata,                                                     //                                                              .writedata
		output wire        sw_s1_chipselect,                                                    //                                                              .chipselect
		output wire [2:0]  timer_0_s1_address,                                                  //                                                    timer_0_s1.address
		output wire        timer_0_s1_write,                                                    //                                                              .write
		input  wire [15:0] timer_0_s1_readdata,                                                 //                                                              .readdata
		output wire [15:0] timer_0_s1_writedata,                                                //                                                              .writedata
		output wire        timer_0_s1_chipselect,                                               //                                                              .chipselect
		output wire [2:0]  timer_stamp_s1_address,                                              //                                                timer_stamp_s1.address
		output wire        timer_stamp_s1_write,                                                //                                                              .write
		input  wire [15:0] timer_stamp_s1_readdata,                                             //                                                              .readdata
		output wire [15:0] timer_stamp_s1_writedata,                                            //                                                              .writedata
		output wire        timer_stamp_s1_chipselect,                                           //                                                              .chipselect
		output wire [2:0]  uart_s1_address,                                                     //                                                       uart_s1.address
		output wire        uart_s1_write,                                                       //                                                              .write
		output wire        uart_s1_read,                                                        //                                                              .read
		input  wire [15:0] uart_s1_readdata,                                                    //                                                              .readdata
		output wire [15:0] uart_s1_writedata,                                                   //                                                              .writedata
		output wire        uart_s1_begintransfer,                                               //                                                              .begintransfer
		output wire        uart_s1_chipselect                                                   //                                                              .chipselect
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [25:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [25:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [125:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [125:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] alt_vip_mix_0_control_agent_m0_readdata;                                   // alt_vip_mix_0_control_translator:uav_readdata -> alt_vip_mix_0_control_agent:m0_readdata
	wire          alt_vip_mix_0_control_agent_m0_waitrequest;                                // alt_vip_mix_0_control_translator:uav_waitrequest -> alt_vip_mix_0_control_agent:m0_waitrequest
	wire          alt_vip_mix_0_control_agent_m0_debugaccess;                                // alt_vip_mix_0_control_agent:m0_debugaccess -> alt_vip_mix_0_control_translator:uav_debugaccess
	wire   [25:0] alt_vip_mix_0_control_agent_m0_address;                                    // alt_vip_mix_0_control_agent:m0_address -> alt_vip_mix_0_control_translator:uav_address
	wire    [3:0] alt_vip_mix_0_control_agent_m0_byteenable;                                 // alt_vip_mix_0_control_agent:m0_byteenable -> alt_vip_mix_0_control_translator:uav_byteenable
	wire          alt_vip_mix_0_control_agent_m0_read;                                       // alt_vip_mix_0_control_agent:m0_read -> alt_vip_mix_0_control_translator:uav_read
	wire          alt_vip_mix_0_control_agent_m0_readdatavalid;                              // alt_vip_mix_0_control_translator:uav_readdatavalid -> alt_vip_mix_0_control_agent:m0_readdatavalid
	wire          alt_vip_mix_0_control_agent_m0_lock;                                       // alt_vip_mix_0_control_agent:m0_lock -> alt_vip_mix_0_control_translator:uav_lock
	wire   [31:0] alt_vip_mix_0_control_agent_m0_writedata;                                  // alt_vip_mix_0_control_agent:m0_writedata -> alt_vip_mix_0_control_translator:uav_writedata
	wire          alt_vip_mix_0_control_agent_m0_write;                                      // alt_vip_mix_0_control_agent:m0_write -> alt_vip_mix_0_control_translator:uav_write
	wire    [2:0] alt_vip_mix_0_control_agent_m0_burstcount;                                 // alt_vip_mix_0_control_agent:m0_burstcount -> alt_vip_mix_0_control_translator:uav_burstcount
	wire          alt_vip_mix_0_control_agent_rf_source_valid;                               // alt_vip_mix_0_control_agent:rf_source_valid -> alt_vip_mix_0_control_agent_rsp_fifo:in_valid
	wire  [125:0] alt_vip_mix_0_control_agent_rf_source_data;                                // alt_vip_mix_0_control_agent:rf_source_data -> alt_vip_mix_0_control_agent_rsp_fifo:in_data
	wire          alt_vip_mix_0_control_agent_rf_source_ready;                               // alt_vip_mix_0_control_agent_rsp_fifo:in_ready -> alt_vip_mix_0_control_agent:rf_source_ready
	wire          alt_vip_mix_0_control_agent_rf_source_startofpacket;                       // alt_vip_mix_0_control_agent:rf_source_startofpacket -> alt_vip_mix_0_control_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_mix_0_control_agent_rf_source_endofpacket;                         // alt_vip_mix_0_control_agent:rf_source_endofpacket -> alt_vip_mix_0_control_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_mix_0_control_agent_rsp_fifo_out_valid;                            // alt_vip_mix_0_control_agent_rsp_fifo:out_valid -> alt_vip_mix_0_control_agent:rf_sink_valid
	wire  [125:0] alt_vip_mix_0_control_agent_rsp_fifo_out_data;                             // alt_vip_mix_0_control_agent_rsp_fifo:out_data -> alt_vip_mix_0_control_agent:rf_sink_data
	wire          alt_vip_mix_0_control_agent_rsp_fifo_out_ready;                            // alt_vip_mix_0_control_agent:rf_sink_ready -> alt_vip_mix_0_control_agent_rsp_fifo:out_ready
	wire          alt_vip_mix_0_control_agent_rsp_fifo_out_startofpacket;                    // alt_vip_mix_0_control_agent_rsp_fifo:out_startofpacket -> alt_vip_mix_0_control_agent:rf_sink_startofpacket
	wire          alt_vip_mix_0_control_agent_rsp_fifo_out_endofpacket;                      // alt_vip_mix_0_control_agent_rsp_fifo:out_endofpacket -> alt_vip_mix_0_control_agent:rf_sink_endofpacket
	wire          alt_vip_mix_0_control_agent_rdata_fifo_src_valid;                          // alt_vip_mix_0_control_agent:rdata_fifo_src_valid -> alt_vip_mix_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_mix_0_control_agent_rdata_fifo_src_data;                           // alt_vip_mix_0_control_agent:rdata_fifo_src_data -> alt_vip_mix_0_control_agent_rdata_fifo:in_data
	wire          alt_vip_mix_0_control_agent_rdata_fifo_src_ready;                          // alt_vip_mix_0_control_agent_rdata_fifo:in_ready -> alt_vip_mix_0_control_agent:rdata_fifo_src_ready
	wire   [31:0] alt_vip_cti_0_control_agent_m0_readdata;                                   // alt_vip_cti_0_control_translator:uav_readdata -> alt_vip_cti_0_control_agent:m0_readdata
	wire          alt_vip_cti_0_control_agent_m0_waitrequest;                                // alt_vip_cti_0_control_translator:uav_waitrequest -> alt_vip_cti_0_control_agent:m0_waitrequest
	wire          alt_vip_cti_0_control_agent_m0_debugaccess;                                // alt_vip_cti_0_control_agent:m0_debugaccess -> alt_vip_cti_0_control_translator:uav_debugaccess
	wire   [25:0] alt_vip_cti_0_control_agent_m0_address;                                    // alt_vip_cti_0_control_agent:m0_address -> alt_vip_cti_0_control_translator:uav_address
	wire    [3:0] alt_vip_cti_0_control_agent_m0_byteenable;                                 // alt_vip_cti_0_control_agent:m0_byteenable -> alt_vip_cti_0_control_translator:uav_byteenable
	wire          alt_vip_cti_0_control_agent_m0_read;                                       // alt_vip_cti_0_control_agent:m0_read -> alt_vip_cti_0_control_translator:uav_read
	wire          alt_vip_cti_0_control_agent_m0_readdatavalid;                              // alt_vip_cti_0_control_translator:uav_readdatavalid -> alt_vip_cti_0_control_agent:m0_readdatavalid
	wire          alt_vip_cti_0_control_agent_m0_lock;                                       // alt_vip_cti_0_control_agent:m0_lock -> alt_vip_cti_0_control_translator:uav_lock
	wire   [31:0] alt_vip_cti_0_control_agent_m0_writedata;                                  // alt_vip_cti_0_control_agent:m0_writedata -> alt_vip_cti_0_control_translator:uav_writedata
	wire          alt_vip_cti_0_control_agent_m0_write;                                      // alt_vip_cti_0_control_agent:m0_write -> alt_vip_cti_0_control_translator:uav_write
	wire    [2:0] alt_vip_cti_0_control_agent_m0_burstcount;                                 // alt_vip_cti_0_control_agent:m0_burstcount -> alt_vip_cti_0_control_translator:uav_burstcount
	wire          alt_vip_cti_0_control_agent_rf_source_valid;                               // alt_vip_cti_0_control_agent:rf_source_valid -> alt_vip_cti_0_control_agent_rsp_fifo:in_valid
	wire  [125:0] alt_vip_cti_0_control_agent_rf_source_data;                                // alt_vip_cti_0_control_agent:rf_source_data -> alt_vip_cti_0_control_agent_rsp_fifo:in_data
	wire          alt_vip_cti_0_control_agent_rf_source_ready;                               // alt_vip_cti_0_control_agent_rsp_fifo:in_ready -> alt_vip_cti_0_control_agent:rf_source_ready
	wire          alt_vip_cti_0_control_agent_rf_source_startofpacket;                       // alt_vip_cti_0_control_agent:rf_source_startofpacket -> alt_vip_cti_0_control_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_cti_0_control_agent_rf_source_endofpacket;                         // alt_vip_cti_0_control_agent:rf_source_endofpacket -> alt_vip_cti_0_control_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_cti_0_control_agent_rsp_fifo_out_valid;                            // alt_vip_cti_0_control_agent_rsp_fifo:out_valid -> alt_vip_cti_0_control_agent:rf_sink_valid
	wire  [125:0] alt_vip_cti_0_control_agent_rsp_fifo_out_data;                             // alt_vip_cti_0_control_agent_rsp_fifo:out_data -> alt_vip_cti_0_control_agent:rf_sink_data
	wire          alt_vip_cti_0_control_agent_rsp_fifo_out_ready;                            // alt_vip_cti_0_control_agent:rf_sink_ready -> alt_vip_cti_0_control_agent_rsp_fifo:out_ready
	wire          alt_vip_cti_0_control_agent_rsp_fifo_out_startofpacket;                    // alt_vip_cti_0_control_agent_rsp_fifo:out_startofpacket -> alt_vip_cti_0_control_agent:rf_sink_startofpacket
	wire          alt_vip_cti_0_control_agent_rsp_fifo_out_endofpacket;                      // alt_vip_cti_0_control_agent_rsp_fifo:out_endofpacket -> alt_vip_cti_0_control_agent:rf_sink_endofpacket
	wire          alt_vip_cti_0_control_agent_rdata_fifo_src_valid;                          // alt_vip_cti_0_control_agent:rdata_fifo_src_valid -> alt_vip_cti_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_cti_0_control_agent_rdata_fifo_src_data;                           // alt_vip_cti_0_control_agent:rdata_fifo_src_data -> alt_vip_cti_0_control_agent_rdata_fifo:in_data
	wire          alt_vip_cti_0_control_agent_rdata_fifo_src_ready;                          // alt_vip_cti_0_control_agent_rdata_fifo:in_ready -> alt_vip_cti_0_control_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire          cpu_jtag_debug_module_agent_m0_waitrequest;                                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire          cpu_jtag_debug_module_agent_m0_debugaccess;                                // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [25:0] cpu_jtag_debug_module_agent_m0_address;                                    // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire    [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_agent_m0_read;                                       // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire          cpu_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_lock;                                       // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire   [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire          cpu_jtag_debug_module_agent_m0_write;                                      // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire    [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire          cpu_jtag_debug_module_agent_rf_source_valid;                               // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [125:0] cpu_jtag_debug_module_agent_rf_source_data;                                // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rf_source_ready;                               // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire          cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire  [125:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_agent_rdata_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_jtag_debug_module_agent_rdata_fifo:in_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire   [31:0] clock_crossing_io_slow_s0_agent_m0_readdata;                               // clock_crossing_io_slow_s0_translator:uav_readdata -> clock_crossing_io_slow_s0_agent:m0_readdata
	wire          clock_crossing_io_slow_s0_agent_m0_waitrequest;                            // clock_crossing_io_slow_s0_translator:uav_waitrequest -> clock_crossing_io_slow_s0_agent:m0_waitrequest
	wire          clock_crossing_io_slow_s0_agent_m0_debugaccess;                            // clock_crossing_io_slow_s0_agent:m0_debugaccess -> clock_crossing_io_slow_s0_translator:uav_debugaccess
	wire   [25:0] clock_crossing_io_slow_s0_agent_m0_address;                                // clock_crossing_io_slow_s0_agent:m0_address -> clock_crossing_io_slow_s0_translator:uav_address
	wire    [3:0] clock_crossing_io_slow_s0_agent_m0_byteenable;                             // clock_crossing_io_slow_s0_agent:m0_byteenable -> clock_crossing_io_slow_s0_translator:uav_byteenable
	wire          clock_crossing_io_slow_s0_agent_m0_read;                                   // clock_crossing_io_slow_s0_agent:m0_read -> clock_crossing_io_slow_s0_translator:uav_read
	wire          clock_crossing_io_slow_s0_agent_m0_readdatavalid;                          // clock_crossing_io_slow_s0_translator:uav_readdatavalid -> clock_crossing_io_slow_s0_agent:m0_readdatavalid
	wire          clock_crossing_io_slow_s0_agent_m0_lock;                                   // clock_crossing_io_slow_s0_agent:m0_lock -> clock_crossing_io_slow_s0_translator:uav_lock
	wire   [31:0] clock_crossing_io_slow_s0_agent_m0_writedata;                              // clock_crossing_io_slow_s0_agent:m0_writedata -> clock_crossing_io_slow_s0_translator:uav_writedata
	wire          clock_crossing_io_slow_s0_agent_m0_write;                                  // clock_crossing_io_slow_s0_agent:m0_write -> clock_crossing_io_slow_s0_translator:uav_write
	wire    [2:0] clock_crossing_io_slow_s0_agent_m0_burstcount;                             // clock_crossing_io_slow_s0_agent:m0_burstcount -> clock_crossing_io_slow_s0_translator:uav_burstcount
	wire          clock_crossing_io_slow_s0_agent_rf_source_valid;                           // clock_crossing_io_slow_s0_agent:rf_source_valid -> clock_crossing_io_slow_s0_agent_rsp_fifo:in_valid
	wire  [125:0] clock_crossing_io_slow_s0_agent_rf_source_data;                            // clock_crossing_io_slow_s0_agent:rf_source_data -> clock_crossing_io_slow_s0_agent_rsp_fifo:in_data
	wire          clock_crossing_io_slow_s0_agent_rf_source_ready;                           // clock_crossing_io_slow_s0_agent_rsp_fifo:in_ready -> clock_crossing_io_slow_s0_agent:rf_source_ready
	wire          clock_crossing_io_slow_s0_agent_rf_source_startofpacket;                   // clock_crossing_io_slow_s0_agent:rf_source_startofpacket -> clock_crossing_io_slow_s0_agent_rsp_fifo:in_startofpacket
	wire          clock_crossing_io_slow_s0_agent_rf_source_endofpacket;                     // clock_crossing_io_slow_s0_agent:rf_source_endofpacket -> clock_crossing_io_slow_s0_agent_rsp_fifo:in_endofpacket
	wire          clock_crossing_io_slow_s0_agent_rsp_fifo_out_valid;                        // clock_crossing_io_slow_s0_agent_rsp_fifo:out_valid -> clock_crossing_io_slow_s0_agent:rf_sink_valid
	wire  [125:0] clock_crossing_io_slow_s0_agent_rsp_fifo_out_data;                         // clock_crossing_io_slow_s0_agent_rsp_fifo:out_data -> clock_crossing_io_slow_s0_agent:rf_sink_data
	wire          clock_crossing_io_slow_s0_agent_rsp_fifo_out_ready;                        // clock_crossing_io_slow_s0_agent:rf_sink_ready -> clock_crossing_io_slow_s0_agent_rsp_fifo:out_ready
	wire          clock_crossing_io_slow_s0_agent_rsp_fifo_out_startofpacket;                // clock_crossing_io_slow_s0_agent_rsp_fifo:out_startofpacket -> clock_crossing_io_slow_s0_agent:rf_sink_startofpacket
	wire          clock_crossing_io_slow_s0_agent_rsp_fifo_out_endofpacket;                  // clock_crossing_io_slow_s0_agent_rsp_fifo:out_endofpacket -> clock_crossing_io_slow_s0_agent:rf_sink_endofpacket
	wire          clock_crossing_io_slow_s0_agent_rdata_fifo_src_valid;                      // clock_crossing_io_slow_s0_agent:rdata_fifo_src_valid -> clock_crossing_io_slow_s0_agent_rdata_fifo:in_valid
	wire   [33:0] clock_crossing_io_slow_s0_agent_rdata_fifo_src_data;                       // clock_crossing_io_slow_s0_agent:rdata_fifo_src_data -> clock_crossing_io_slow_s0_agent_rdata_fifo:in_data
	wire          clock_crossing_io_slow_s0_agent_rdata_fifo_src_ready;                      // clock_crossing_io_slow_s0_agent_rdata_fifo:in_ready -> clock_crossing_io_slow_s0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_clock_crossing_bridge_1_s0_agent_m0_readdata;                           // mm_clock_crossing_bridge_1_s0_translator:uav_readdata -> mm_clock_crossing_bridge_1_s0_agent:m0_readdata
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest;                        // mm_clock_crossing_bridge_1_s0_translator:uav_waitrequest -> mm_clock_crossing_bridge_1_s0_agent:m0_waitrequest
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess;                        // mm_clock_crossing_bridge_1_s0_agent:m0_debugaccess -> mm_clock_crossing_bridge_1_s0_translator:uav_debugaccess
	wire   [25:0] mm_clock_crossing_bridge_1_s0_agent_m0_address;                            // mm_clock_crossing_bridge_1_s0_agent:m0_address -> mm_clock_crossing_bridge_1_s0_translator:uav_address
	wire    [3:0] mm_clock_crossing_bridge_1_s0_agent_m0_byteenable;                         // mm_clock_crossing_bridge_1_s0_agent:m0_byteenable -> mm_clock_crossing_bridge_1_s0_translator:uav_byteenable
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_read;                               // mm_clock_crossing_bridge_1_s0_agent:m0_read -> mm_clock_crossing_bridge_1_s0_translator:uav_read
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid;                      // mm_clock_crossing_bridge_1_s0_translator:uav_readdatavalid -> mm_clock_crossing_bridge_1_s0_agent:m0_readdatavalid
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_lock;                               // mm_clock_crossing_bridge_1_s0_agent:m0_lock -> mm_clock_crossing_bridge_1_s0_translator:uav_lock
	wire   [31:0] mm_clock_crossing_bridge_1_s0_agent_m0_writedata;                          // mm_clock_crossing_bridge_1_s0_agent:m0_writedata -> mm_clock_crossing_bridge_1_s0_translator:uav_writedata
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_write;                              // mm_clock_crossing_bridge_1_s0_agent:m0_write -> mm_clock_crossing_bridge_1_s0_translator:uav_write
	wire    [2:0] mm_clock_crossing_bridge_1_s0_agent_m0_burstcount;                         // mm_clock_crossing_bridge_1_s0_agent:m0_burstcount -> mm_clock_crossing_bridge_1_s0_translator:uav_burstcount
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_valid;                       // mm_clock_crossing_bridge_1_s0_agent:rf_source_valid -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_valid
	wire  [125:0] mm_clock_crossing_bridge_1_s0_agent_rf_source_data;                        // mm_clock_crossing_bridge_1_s0_agent:rf_source_data -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_ready;                       // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_ready -> mm_clock_crossing_bridge_1_s0_agent:rf_source_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket;               // mm_clock_crossing_bridge_1_s0_agent:rf_source_startofpacket -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket;                 // mm_clock_crossing_bridge_1_s0_agent:rf_source_endofpacket -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid;                    // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_valid -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_valid
	wire  [125:0] mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data;                     // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_data -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready;                    // mm_clock_crossing_bridge_1_s0_agent:rf_sink_ready -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket;            // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_startofpacket -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket;              // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_endofpacket -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_endofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid;                  // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_valid -> mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:in_valid
	wire   [33:0] mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data;                   // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_data -> mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:in_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready;                  // mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:in_ready -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_ready
	wire   [31:0] onchip_memory2_s1_agent_m0_readdata;                                       // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_agent:m0_readdata
	wire          onchip_memory2_s1_agent_m0_waitrequest;                                    // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_agent:m0_waitrequest
	wire          onchip_memory2_s1_agent_m0_debugaccess;                                    // onchip_memory2_s1_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire   [25:0] onchip_memory2_s1_agent_m0_address;                                        // onchip_memory2_s1_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire    [3:0] onchip_memory2_s1_agent_m0_byteenable;                                     // onchip_memory2_s1_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_agent_m0_read;                                           // onchip_memory2_s1_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire          onchip_memory2_s1_agent_m0_readdatavalid;                                  // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_agent:m0_readdatavalid
	wire          onchip_memory2_s1_agent_m0_lock;                                           // onchip_memory2_s1_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_s1_agent_m0_writedata;                                      // onchip_memory2_s1_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire          onchip_memory2_s1_agent_m0_write;                                          // onchip_memory2_s1_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire    [2:0] onchip_memory2_s1_agent_m0_burstcount;                                     // onchip_memory2_s1_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire          onchip_memory2_s1_agent_rf_source_valid;                                   // onchip_memory2_s1_agent:rf_source_valid -> onchip_memory2_s1_agent_rsp_fifo:in_valid
	wire  [125:0] onchip_memory2_s1_agent_rf_source_data;                                    // onchip_memory2_s1_agent:rf_source_data -> onchip_memory2_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_agent_rf_source_ready;                                   // onchip_memory2_s1_agent_rsp_fifo:in_ready -> onchip_memory2_s1_agent:rf_source_ready
	wire          onchip_memory2_s1_agent_rf_source_startofpacket;                           // onchip_memory2_s1_agent:rf_source_startofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_s1_agent_rf_source_endofpacket;                             // onchip_memory2_s1_agent:rf_source_endofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_valid;                                // onchip_memory2_s1_agent_rsp_fifo:out_valid -> onchip_memory2_s1_agent:rf_sink_valid
	wire  [125:0] onchip_memory2_s1_agent_rsp_fifo_out_data;                                 // onchip_memory2_s1_agent_rsp_fifo:out_data -> onchip_memory2_s1_agent:rf_sink_data
	wire          onchip_memory2_s1_agent_rsp_fifo_out_ready;                                // onchip_memory2_s1_agent:rf_sink_ready -> onchip_memory2_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_agent_rsp_fifo_out_startofpacket;                        // onchip_memory2_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_endofpacket;                          // onchip_memory2_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_s1_agent_rdata_fifo_src_valid;                              // onchip_memory2_s1_agent:rdata_fifo_src_valid -> onchip_memory2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory2_s1_agent_rdata_fifo_src_data;                               // onchip_memory2_s1_agent:rdata_fifo_src_data -> onchip_memory2_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_s1_agent_rdata_fifo_src_ready;                              // onchip_memory2_s1_agent_rdata_fifo:in_ready -> onchip_memory2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] uart_s1_agent_m0_readdata;                                                 // uart_s1_translator:uav_readdata -> uart_s1_agent:m0_readdata
	wire          uart_s1_agent_m0_waitrequest;                                              // uart_s1_translator:uav_waitrequest -> uart_s1_agent:m0_waitrequest
	wire          uart_s1_agent_m0_debugaccess;                                              // uart_s1_agent:m0_debugaccess -> uart_s1_translator:uav_debugaccess
	wire   [25:0] uart_s1_agent_m0_address;                                                  // uart_s1_agent:m0_address -> uart_s1_translator:uav_address
	wire    [3:0] uart_s1_agent_m0_byteenable;                                               // uart_s1_agent:m0_byteenable -> uart_s1_translator:uav_byteenable
	wire          uart_s1_agent_m0_read;                                                     // uart_s1_agent:m0_read -> uart_s1_translator:uav_read
	wire          uart_s1_agent_m0_readdatavalid;                                            // uart_s1_translator:uav_readdatavalid -> uart_s1_agent:m0_readdatavalid
	wire          uart_s1_agent_m0_lock;                                                     // uart_s1_agent:m0_lock -> uart_s1_translator:uav_lock
	wire   [31:0] uart_s1_agent_m0_writedata;                                                // uart_s1_agent:m0_writedata -> uart_s1_translator:uav_writedata
	wire          uart_s1_agent_m0_write;                                                    // uart_s1_agent:m0_write -> uart_s1_translator:uav_write
	wire    [2:0] uart_s1_agent_m0_burstcount;                                               // uart_s1_agent:m0_burstcount -> uart_s1_translator:uav_burstcount
	wire          uart_s1_agent_rf_source_valid;                                             // uart_s1_agent:rf_source_valid -> uart_s1_agent_rsp_fifo:in_valid
	wire  [125:0] uart_s1_agent_rf_source_data;                                              // uart_s1_agent:rf_source_data -> uart_s1_agent_rsp_fifo:in_data
	wire          uart_s1_agent_rf_source_ready;                                             // uart_s1_agent_rsp_fifo:in_ready -> uart_s1_agent:rf_source_ready
	wire          uart_s1_agent_rf_source_startofpacket;                                     // uart_s1_agent:rf_source_startofpacket -> uart_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_s1_agent_rf_source_endofpacket;                                       // uart_s1_agent:rf_source_endofpacket -> uart_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_s1_agent_rsp_fifo_out_valid;                                          // uart_s1_agent_rsp_fifo:out_valid -> uart_s1_agent:rf_sink_valid
	wire  [125:0] uart_s1_agent_rsp_fifo_out_data;                                           // uart_s1_agent_rsp_fifo:out_data -> uart_s1_agent:rf_sink_data
	wire          uart_s1_agent_rsp_fifo_out_ready;                                          // uart_s1_agent:rf_sink_ready -> uart_s1_agent_rsp_fifo:out_ready
	wire          uart_s1_agent_rsp_fifo_out_startofpacket;                                  // uart_s1_agent_rsp_fifo:out_startofpacket -> uart_s1_agent:rf_sink_startofpacket
	wire          uart_s1_agent_rsp_fifo_out_endofpacket;                                    // uart_s1_agent_rsp_fifo:out_endofpacket -> uart_s1_agent:rf_sink_endofpacket
	wire          uart_s1_agent_rdata_fifo_src_valid;                                        // uart_s1_agent:rdata_fifo_src_valid -> uart_s1_agent_rdata_fifo:in_valid
	wire   [33:0] uart_s1_agent_rdata_fifo_src_data;                                         // uart_s1_agent:rdata_fifo_src_data -> uart_s1_agent_rdata_fifo:in_data
	wire          uart_s1_agent_rdata_fifo_src_ready;                                        // uart_s1_agent_rdata_fifo:in_ready -> uart_s1_agent:rdata_fifo_src_ready
	wire   [31:0] timer_stamp_s1_agent_m0_readdata;                                          // timer_stamp_s1_translator:uav_readdata -> timer_stamp_s1_agent:m0_readdata
	wire          timer_stamp_s1_agent_m0_waitrequest;                                       // timer_stamp_s1_translator:uav_waitrequest -> timer_stamp_s1_agent:m0_waitrequest
	wire          timer_stamp_s1_agent_m0_debugaccess;                                       // timer_stamp_s1_agent:m0_debugaccess -> timer_stamp_s1_translator:uav_debugaccess
	wire   [25:0] timer_stamp_s1_agent_m0_address;                                           // timer_stamp_s1_agent:m0_address -> timer_stamp_s1_translator:uav_address
	wire    [3:0] timer_stamp_s1_agent_m0_byteenable;                                        // timer_stamp_s1_agent:m0_byteenable -> timer_stamp_s1_translator:uav_byteenable
	wire          timer_stamp_s1_agent_m0_read;                                              // timer_stamp_s1_agent:m0_read -> timer_stamp_s1_translator:uav_read
	wire          timer_stamp_s1_agent_m0_readdatavalid;                                     // timer_stamp_s1_translator:uav_readdatavalid -> timer_stamp_s1_agent:m0_readdatavalid
	wire          timer_stamp_s1_agent_m0_lock;                                              // timer_stamp_s1_agent:m0_lock -> timer_stamp_s1_translator:uav_lock
	wire   [31:0] timer_stamp_s1_agent_m0_writedata;                                         // timer_stamp_s1_agent:m0_writedata -> timer_stamp_s1_translator:uav_writedata
	wire          timer_stamp_s1_agent_m0_write;                                             // timer_stamp_s1_agent:m0_write -> timer_stamp_s1_translator:uav_write
	wire    [2:0] timer_stamp_s1_agent_m0_burstcount;                                        // timer_stamp_s1_agent:m0_burstcount -> timer_stamp_s1_translator:uav_burstcount
	wire          timer_stamp_s1_agent_rf_source_valid;                                      // timer_stamp_s1_agent:rf_source_valid -> timer_stamp_s1_agent_rsp_fifo:in_valid
	wire  [125:0] timer_stamp_s1_agent_rf_source_data;                                       // timer_stamp_s1_agent:rf_source_data -> timer_stamp_s1_agent_rsp_fifo:in_data
	wire          timer_stamp_s1_agent_rf_source_ready;                                      // timer_stamp_s1_agent_rsp_fifo:in_ready -> timer_stamp_s1_agent:rf_source_ready
	wire          timer_stamp_s1_agent_rf_source_startofpacket;                              // timer_stamp_s1_agent:rf_source_startofpacket -> timer_stamp_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_stamp_s1_agent_rf_source_endofpacket;                                // timer_stamp_s1_agent:rf_source_endofpacket -> timer_stamp_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_stamp_s1_agent_rsp_fifo_out_valid;                                   // timer_stamp_s1_agent_rsp_fifo:out_valid -> timer_stamp_s1_agent:rf_sink_valid
	wire  [125:0] timer_stamp_s1_agent_rsp_fifo_out_data;                                    // timer_stamp_s1_agent_rsp_fifo:out_data -> timer_stamp_s1_agent:rf_sink_data
	wire          timer_stamp_s1_agent_rsp_fifo_out_ready;                                   // timer_stamp_s1_agent:rf_sink_ready -> timer_stamp_s1_agent_rsp_fifo:out_ready
	wire          timer_stamp_s1_agent_rsp_fifo_out_startofpacket;                           // timer_stamp_s1_agent_rsp_fifo:out_startofpacket -> timer_stamp_s1_agent:rf_sink_startofpacket
	wire          timer_stamp_s1_agent_rsp_fifo_out_endofpacket;                             // timer_stamp_s1_agent_rsp_fifo:out_endofpacket -> timer_stamp_s1_agent:rf_sink_endofpacket
	wire          timer_stamp_s1_agent_rdata_fifo_src_valid;                                 // timer_stamp_s1_agent:rdata_fifo_src_valid -> timer_stamp_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_stamp_s1_agent_rdata_fifo_src_data;                                  // timer_stamp_s1_agent:rdata_fifo_src_data -> timer_stamp_s1_agent_rdata_fifo:in_data
	wire          timer_stamp_s1_agent_rdata_fifo_src_ready;                                 // timer_stamp_s1_agent_rdata_fifo:in_ready -> timer_stamp_s1_agent:rdata_fifo_src_ready
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_readdata;                              // alt_vip_vfr_0_avalon_slave_translator:uav_readdata -> alt_vip_vfr_0_avalon_slave_agent:m0_readdata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest;                           // alt_vip_vfr_0_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_0_avalon_slave_agent:m0_waitrequest
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess;                           // alt_vip_vfr_0_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_0_avalon_slave_translator:uav_debugaccess
	wire   [25:0] alt_vip_vfr_0_avalon_slave_agent_m0_address;                               // alt_vip_vfr_0_avalon_slave_agent:m0_address -> alt_vip_vfr_0_avalon_slave_translator:uav_address
	wire    [3:0] alt_vip_vfr_0_avalon_slave_agent_m0_byteenable;                            // alt_vip_vfr_0_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_0_avalon_slave_translator:uav_byteenable
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_read;                                  // alt_vip_vfr_0_avalon_slave_agent:m0_read -> alt_vip_vfr_0_avalon_slave_translator:uav_read
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid;                         // alt_vip_vfr_0_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_0_avalon_slave_agent:m0_readdatavalid
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_lock;                                  // alt_vip_vfr_0_avalon_slave_agent:m0_lock -> alt_vip_vfr_0_avalon_slave_translator:uav_lock
	wire   [31:0] alt_vip_vfr_0_avalon_slave_agent_m0_writedata;                             // alt_vip_vfr_0_avalon_slave_agent:m0_writedata -> alt_vip_vfr_0_avalon_slave_translator:uav_writedata
	wire          alt_vip_vfr_0_avalon_slave_agent_m0_write;                                 // alt_vip_vfr_0_avalon_slave_agent:m0_write -> alt_vip_vfr_0_avalon_slave_translator:uav_write
	wire    [2:0] alt_vip_vfr_0_avalon_slave_agent_m0_burstcount;                            // alt_vip_vfr_0_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_0_avalon_slave_translator:uav_burstcount
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_valid;                          // alt_vip_vfr_0_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [125:0] alt_vip_vfr_0_avalon_slave_agent_rf_source_data;                           // alt_vip_vfr_0_avalon_slave_agent:rf_source_data -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_ready;                          // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rf_source_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket;                  // alt_vip_vfr_0_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket;                    // alt_vip_vfr_0_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid;                       // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_valid
	wire  [125:0] alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data;                        // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready;                       // alt_vip_vfr_0_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket;               // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                 // alt_vip_vfr_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:rf_sink_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid;                     // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_valid -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data;                      // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_data -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready;                     // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_0_in_agent_m0_readdata;                                               // fifo_0_in_translator:uav_readdata -> fifo_0_in_agent:m0_readdata
	wire          fifo_0_in_agent_m0_waitrequest;                                            // fifo_0_in_translator:uav_waitrequest -> fifo_0_in_agent:m0_waitrequest
	wire          fifo_0_in_agent_m0_debugaccess;                                            // fifo_0_in_agent:m0_debugaccess -> fifo_0_in_translator:uav_debugaccess
	wire   [25:0] fifo_0_in_agent_m0_address;                                                // fifo_0_in_agent:m0_address -> fifo_0_in_translator:uav_address
	wire    [3:0] fifo_0_in_agent_m0_byteenable;                                             // fifo_0_in_agent:m0_byteenable -> fifo_0_in_translator:uav_byteenable
	wire          fifo_0_in_agent_m0_read;                                                   // fifo_0_in_agent:m0_read -> fifo_0_in_translator:uav_read
	wire          fifo_0_in_agent_m0_readdatavalid;                                          // fifo_0_in_translator:uav_readdatavalid -> fifo_0_in_agent:m0_readdatavalid
	wire          fifo_0_in_agent_m0_lock;                                                   // fifo_0_in_agent:m0_lock -> fifo_0_in_translator:uav_lock
	wire   [31:0] fifo_0_in_agent_m0_writedata;                                              // fifo_0_in_agent:m0_writedata -> fifo_0_in_translator:uav_writedata
	wire          fifo_0_in_agent_m0_write;                                                  // fifo_0_in_agent:m0_write -> fifo_0_in_translator:uav_write
	wire    [2:0] fifo_0_in_agent_m0_burstcount;                                             // fifo_0_in_agent:m0_burstcount -> fifo_0_in_translator:uav_burstcount
	wire          fifo_0_in_agent_rf_source_valid;                                           // fifo_0_in_agent:rf_source_valid -> fifo_0_in_agent_rsp_fifo:in_valid
	wire  [125:0] fifo_0_in_agent_rf_source_data;                                            // fifo_0_in_agent:rf_source_data -> fifo_0_in_agent_rsp_fifo:in_data
	wire          fifo_0_in_agent_rf_source_ready;                                           // fifo_0_in_agent_rsp_fifo:in_ready -> fifo_0_in_agent:rf_source_ready
	wire          fifo_0_in_agent_rf_source_startofpacket;                                   // fifo_0_in_agent:rf_source_startofpacket -> fifo_0_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_0_in_agent_rf_source_endofpacket;                                     // fifo_0_in_agent:rf_source_endofpacket -> fifo_0_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_0_in_agent_rsp_fifo_out_valid;                                        // fifo_0_in_agent_rsp_fifo:out_valid -> fifo_0_in_agent:rf_sink_valid
	wire  [125:0] fifo_0_in_agent_rsp_fifo_out_data;                                         // fifo_0_in_agent_rsp_fifo:out_data -> fifo_0_in_agent:rf_sink_data
	wire          fifo_0_in_agent_rsp_fifo_out_ready;                                        // fifo_0_in_agent:rf_sink_ready -> fifo_0_in_agent_rsp_fifo:out_ready
	wire          fifo_0_in_agent_rsp_fifo_out_startofpacket;                                // fifo_0_in_agent_rsp_fifo:out_startofpacket -> fifo_0_in_agent:rf_sink_startofpacket
	wire          fifo_0_in_agent_rsp_fifo_out_endofpacket;                                  // fifo_0_in_agent_rsp_fifo:out_endofpacket -> fifo_0_in_agent:rf_sink_endofpacket
	wire          fifo_0_in_agent_rdata_fifo_src_valid;                                      // fifo_0_in_agent:rdata_fifo_src_valid -> fifo_0_in_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_0_in_agent_rdata_fifo_src_data;                                       // fifo_0_in_agent:rdata_fifo_src_data -> fifo_0_in_agent_rdata_fifo:in_data
	wire          fifo_0_in_agent_rdata_fifo_src_ready;                                      // fifo_0_in_agent_rdata_fifo:in_ready -> fifo_0_in_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_0_in_csr_agent_m0_readdata;                                           // fifo_0_in_csr_translator:uav_readdata -> fifo_0_in_csr_agent:m0_readdata
	wire          fifo_0_in_csr_agent_m0_waitrequest;                                        // fifo_0_in_csr_translator:uav_waitrequest -> fifo_0_in_csr_agent:m0_waitrequest
	wire          fifo_0_in_csr_agent_m0_debugaccess;                                        // fifo_0_in_csr_agent:m0_debugaccess -> fifo_0_in_csr_translator:uav_debugaccess
	wire   [25:0] fifo_0_in_csr_agent_m0_address;                                            // fifo_0_in_csr_agent:m0_address -> fifo_0_in_csr_translator:uav_address
	wire    [3:0] fifo_0_in_csr_agent_m0_byteenable;                                         // fifo_0_in_csr_agent:m0_byteenable -> fifo_0_in_csr_translator:uav_byteenable
	wire          fifo_0_in_csr_agent_m0_read;                                               // fifo_0_in_csr_agent:m0_read -> fifo_0_in_csr_translator:uav_read
	wire          fifo_0_in_csr_agent_m0_readdatavalid;                                      // fifo_0_in_csr_translator:uav_readdatavalid -> fifo_0_in_csr_agent:m0_readdatavalid
	wire          fifo_0_in_csr_agent_m0_lock;                                               // fifo_0_in_csr_agent:m0_lock -> fifo_0_in_csr_translator:uav_lock
	wire   [31:0] fifo_0_in_csr_agent_m0_writedata;                                          // fifo_0_in_csr_agent:m0_writedata -> fifo_0_in_csr_translator:uav_writedata
	wire          fifo_0_in_csr_agent_m0_write;                                              // fifo_0_in_csr_agent:m0_write -> fifo_0_in_csr_translator:uav_write
	wire    [2:0] fifo_0_in_csr_agent_m0_burstcount;                                         // fifo_0_in_csr_agent:m0_burstcount -> fifo_0_in_csr_translator:uav_burstcount
	wire          fifo_0_in_csr_agent_rf_source_valid;                                       // fifo_0_in_csr_agent:rf_source_valid -> fifo_0_in_csr_agent_rsp_fifo:in_valid
	wire  [125:0] fifo_0_in_csr_agent_rf_source_data;                                        // fifo_0_in_csr_agent:rf_source_data -> fifo_0_in_csr_agent_rsp_fifo:in_data
	wire          fifo_0_in_csr_agent_rf_source_ready;                                       // fifo_0_in_csr_agent_rsp_fifo:in_ready -> fifo_0_in_csr_agent:rf_source_ready
	wire          fifo_0_in_csr_agent_rf_source_startofpacket;                               // fifo_0_in_csr_agent:rf_source_startofpacket -> fifo_0_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_0_in_csr_agent_rf_source_endofpacket;                                 // fifo_0_in_csr_agent:rf_source_endofpacket -> fifo_0_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_0_in_csr_agent_rsp_fifo_out_valid;                                    // fifo_0_in_csr_agent_rsp_fifo:out_valid -> fifo_0_in_csr_agent:rf_sink_valid
	wire  [125:0] fifo_0_in_csr_agent_rsp_fifo_out_data;                                     // fifo_0_in_csr_agent_rsp_fifo:out_data -> fifo_0_in_csr_agent:rf_sink_data
	wire          fifo_0_in_csr_agent_rsp_fifo_out_ready;                                    // fifo_0_in_csr_agent:rf_sink_ready -> fifo_0_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_0_in_csr_agent_rsp_fifo_out_startofpacket;                            // fifo_0_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_0_in_csr_agent:rf_sink_startofpacket
	wire          fifo_0_in_csr_agent_rsp_fifo_out_endofpacket;                              // fifo_0_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_0_in_csr_agent:rf_sink_endofpacket
	wire          fifo_0_in_csr_agent_rdata_fifo_src_valid;                                  // fifo_0_in_csr_agent:rdata_fifo_src_valid -> fifo_0_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_0_in_csr_agent_rdata_fifo_src_data;                                   // fifo_0_in_csr_agent:rdata_fifo_src_data -> fifo_0_in_csr_agent_rdata_fifo:in_data
	wire          fifo_0_in_csr_agent_rdata_fifo_src_ready;                                  // fifo_0_in_csr_agent_rdata_fifo:in_ready -> fifo_0_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] ledr_s1_agent_m0_readdata;                                                 // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire          ledr_s1_agent_m0_waitrequest;                                              // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire          ledr_s1_agent_m0_debugaccess;                                              // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [25:0] ledr_s1_agent_m0_address;                                                  // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire    [3:0] ledr_s1_agent_m0_byteenable;                                               // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire          ledr_s1_agent_m0_read;                                                     // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire          ledr_s1_agent_m0_readdatavalid;                                            // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire          ledr_s1_agent_m0_lock;                                                     // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire   [31:0] ledr_s1_agent_m0_writedata;                                                // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire          ledr_s1_agent_m0_write;                                                    // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire    [2:0] ledr_s1_agent_m0_burstcount;                                               // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire          ledr_s1_agent_rf_source_valid;                                             // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [125:0] ledr_s1_agent_rf_source_data;                                              // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire          ledr_s1_agent_rf_source_ready;                                             // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire          ledr_s1_agent_rf_source_startofpacket;                                     // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire          ledr_s1_agent_rf_source_endofpacket;                                       // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire          ledr_s1_agent_rsp_fifo_out_valid;                                          // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [125:0] ledr_s1_agent_rsp_fifo_out_data;                                           // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire          ledr_s1_agent_rsp_fifo_out_ready;                                          // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire          ledr_s1_agent_rsp_fifo_out_startofpacket;                                  // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire          ledr_s1_agent_rsp_fifo_out_endofpacket;                                    // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire          ledr_s1_agent_rdata_fifo_src_valid;                                        // ledr_s1_agent:rdata_fifo_src_valid -> ledr_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_src_data;                                         // ledr_s1_agent:rdata_fifo_src_data -> ledr_s1_agent_rdata_fifo:in_data
	wire          ledr_s1_agent_rdata_fifo_src_ready;                                        // ledr_s1_agent_rdata_fifo:in_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire   [31:0] key_s1_agent_m0_readdata;                                                  // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                               // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                               // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [25:0] key_s1_agent_m0_address;                                                   // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                      // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                             // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                      // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                 // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                     // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                              // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [125:0] key_s1_agent_rf_source_data;                                               // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                              // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                      // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                        // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                           // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [125:0] key_s1_agent_rsp_fifo_out_data;                                            // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                           // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                   // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                     // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire          key_s1_agent_rdata_fifo_src_valid;                                         // key_s1_agent:rdata_fifo_src_valid -> key_s1_agent_rdata_fifo:in_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                          // key_s1_agent:rdata_fifo_src_data -> key_s1_agent_rdata_fifo:in_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                         // key_s1_agent_rdata_fifo:in_ready -> key_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sw_s1_agent_m0_readdata;                                                   // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                                // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                                // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [25:0] sw_s1_agent_m0_address;                                                    // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                                 // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                       // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                              // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                       // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                                  // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                      // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                                 // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                               // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [125:0] sw_s1_agent_rf_source_data;                                                // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                               // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                       // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                         // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                            // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [125:0] sw_s1_agent_rsp_fifo_out_data;                                             // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                            // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                                    // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                      // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          sw_s1_agent_rdata_fifo_src_valid;                                          // sw_s1_agent:rdata_fifo_src_valid -> sw_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                           // sw_s1_agent:rdata_fifo_src_data -> sw_s1_agent_rdata_fifo:in_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                          // sw_s1_agent_rdata_fifo:in_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                              // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                           // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                           // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [25:0] timer_0_s1_agent_m0_address;                                               // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                            // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                  // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                         // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                  // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                             // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                 // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                            // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                          // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] timer_0_s1_agent_rf_source_data;                                           // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                          // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                  // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                    // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                       // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [125:0] timer_0_s1_agent_rsp_fifo_out_data;                                        // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                       // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                               // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                 // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                     // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                      // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                     // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_data_0_s1_agent_m0_readdata;                                           // i2c_data_0_s1_translator:uav_readdata -> i2c_data_0_s1_agent:m0_readdata
	wire          i2c_data_0_s1_agent_m0_waitrequest;                                        // i2c_data_0_s1_translator:uav_waitrequest -> i2c_data_0_s1_agent:m0_waitrequest
	wire          i2c_data_0_s1_agent_m0_debugaccess;                                        // i2c_data_0_s1_agent:m0_debugaccess -> i2c_data_0_s1_translator:uav_debugaccess
	wire   [25:0] i2c_data_0_s1_agent_m0_address;                                            // i2c_data_0_s1_agent:m0_address -> i2c_data_0_s1_translator:uav_address
	wire    [3:0] i2c_data_0_s1_agent_m0_byteenable;                                         // i2c_data_0_s1_agent:m0_byteenable -> i2c_data_0_s1_translator:uav_byteenable
	wire          i2c_data_0_s1_agent_m0_read;                                               // i2c_data_0_s1_agent:m0_read -> i2c_data_0_s1_translator:uav_read
	wire          i2c_data_0_s1_agent_m0_readdatavalid;                                      // i2c_data_0_s1_translator:uav_readdatavalid -> i2c_data_0_s1_agent:m0_readdatavalid
	wire          i2c_data_0_s1_agent_m0_lock;                                               // i2c_data_0_s1_agent:m0_lock -> i2c_data_0_s1_translator:uav_lock
	wire   [31:0] i2c_data_0_s1_agent_m0_writedata;                                          // i2c_data_0_s1_agent:m0_writedata -> i2c_data_0_s1_translator:uav_writedata
	wire          i2c_data_0_s1_agent_m0_write;                                              // i2c_data_0_s1_agent:m0_write -> i2c_data_0_s1_translator:uav_write
	wire    [2:0] i2c_data_0_s1_agent_m0_burstcount;                                         // i2c_data_0_s1_agent:m0_burstcount -> i2c_data_0_s1_translator:uav_burstcount
	wire          i2c_data_0_s1_agent_rf_source_valid;                                       // i2c_data_0_s1_agent:rf_source_valid -> i2c_data_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] i2c_data_0_s1_agent_rf_source_data;                                        // i2c_data_0_s1_agent:rf_source_data -> i2c_data_0_s1_agent_rsp_fifo:in_data
	wire          i2c_data_0_s1_agent_rf_source_ready;                                       // i2c_data_0_s1_agent_rsp_fifo:in_ready -> i2c_data_0_s1_agent:rf_source_ready
	wire          i2c_data_0_s1_agent_rf_source_startofpacket;                               // i2c_data_0_s1_agent:rf_source_startofpacket -> i2c_data_0_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_data_0_s1_agent_rf_source_endofpacket;                                 // i2c_data_0_s1_agent:rf_source_endofpacket -> i2c_data_0_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_data_0_s1_agent_rsp_fifo_out_valid;                                    // i2c_data_0_s1_agent_rsp_fifo:out_valid -> i2c_data_0_s1_agent:rf_sink_valid
	wire  [125:0] i2c_data_0_s1_agent_rsp_fifo_out_data;                                     // i2c_data_0_s1_agent_rsp_fifo:out_data -> i2c_data_0_s1_agent:rf_sink_data
	wire          i2c_data_0_s1_agent_rsp_fifo_out_ready;                                    // i2c_data_0_s1_agent:rf_sink_ready -> i2c_data_0_s1_agent_rsp_fifo:out_ready
	wire          i2c_data_0_s1_agent_rsp_fifo_out_startofpacket;                            // i2c_data_0_s1_agent_rsp_fifo:out_startofpacket -> i2c_data_0_s1_agent:rf_sink_startofpacket
	wire          i2c_data_0_s1_agent_rsp_fifo_out_endofpacket;                              // i2c_data_0_s1_agent_rsp_fifo:out_endofpacket -> i2c_data_0_s1_agent:rf_sink_endofpacket
	wire          i2c_data_0_s1_agent_rdata_fifo_src_valid;                                  // i2c_data_0_s1_agent:rdata_fifo_src_valid -> i2c_data_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_data_0_s1_agent_rdata_fifo_src_data;                                   // i2c_data_0_s1_agent:rdata_fifo_src_data -> i2c_data_0_s1_agent_rdata_fifo:in_data
	wire          i2c_data_0_s1_agent_rdata_fifo_src_ready;                                  // i2c_data_0_s1_agent_rdata_fifo:in_ready -> i2c_data_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_end_flag_0_s1_agent_m0_readdata;                                       // i2c_end_flag_0_s1_translator:uav_readdata -> i2c_end_flag_0_s1_agent:m0_readdata
	wire          i2c_end_flag_0_s1_agent_m0_waitrequest;                                    // i2c_end_flag_0_s1_translator:uav_waitrequest -> i2c_end_flag_0_s1_agent:m0_waitrequest
	wire          i2c_end_flag_0_s1_agent_m0_debugaccess;                                    // i2c_end_flag_0_s1_agent:m0_debugaccess -> i2c_end_flag_0_s1_translator:uav_debugaccess
	wire   [25:0] i2c_end_flag_0_s1_agent_m0_address;                                        // i2c_end_flag_0_s1_agent:m0_address -> i2c_end_flag_0_s1_translator:uav_address
	wire    [3:0] i2c_end_flag_0_s1_agent_m0_byteenable;                                     // i2c_end_flag_0_s1_agent:m0_byteenable -> i2c_end_flag_0_s1_translator:uav_byteenable
	wire          i2c_end_flag_0_s1_agent_m0_read;                                           // i2c_end_flag_0_s1_agent:m0_read -> i2c_end_flag_0_s1_translator:uav_read
	wire          i2c_end_flag_0_s1_agent_m0_readdatavalid;                                  // i2c_end_flag_0_s1_translator:uav_readdatavalid -> i2c_end_flag_0_s1_agent:m0_readdatavalid
	wire          i2c_end_flag_0_s1_agent_m0_lock;                                           // i2c_end_flag_0_s1_agent:m0_lock -> i2c_end_flag_0_s1_translator:uav_lock
	wire   [31:0] i2c_end_flag_0_s1_agent_m0_writedata;                                      // i2c_end_flag_0_s1_agent:m0_writedata -> i2c_end_flag_0_s1_translator:uav_writedata
	wire          i2c_end_flag_0_s1_agent_m0_write;                                          // i2c_end_flag_0_s1_agent:m0_write -> i2c_end_flag_0_s1_translator:uav_write
	wire    [2:0] i2c_end_flag_0_s1_agent_m0_burstcount;                                     // i2c_end_flag_0_s1_agent:m0_burstcount -> i2c_end_flag_0_s1_translator:uav_burstcount
	wire          i2c_end_flag_0_s1_agent_rf_source_valid;                                   // i2c_end_flag_0_s1_agent:rf_source_valid -> i2c_end_flag_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] i2c_end_flag_0_s1_agent_rf_source_data;                                    // i2c_end_flag_0_s1_agent:rf_source_data -> i2c_end_flag_0_s1_agent_rsp_fifo:in_data
	wire          i2c_end_flag_0_s1_agent_rf_source_ready;                                   // i2c_end_flag_0_s1_agent_rsp_fifo:in_ready -> i2c_end_flag_0_s1_agent:rf_source_ready
	wire          i2c_end_flag_0_s1_agent_rf_source_startofpacket;                           // i2c_end_flag_0_s1_agent:rf_source_startofpacket -> i2c_end_flag_0_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_end_flag_0_s1_agent_rf_source_endofpacket;                             // i2c_end_flag_0_s1_agent:rf_source_endofpacket -> i2c_end_flag_0_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_end_flag_0_s1_agent_rsp_fifo_out_valid;                                // i2c_end_flag_0_s1_agent_rsp_fifo:out_valid -> i2c_end_flag_0_s1_agent:rf_sink_valid
	wire  [125:0] i2c_end_flag_0_s1_agent_rsp_fifo_out_data;                                 // i2c_end_flag_0_s1_agent_rsp_fifo:out_data -> i2c_end_flag_0_s1_agent:rf_sink_data
	wire          i2c_end_flag_0_s1_agent_rsp_fifo_out_ready;                                // i2c_end_flag_0_s1_agent:rf_sink_ready -> i2c_end_flag_0_s1_agent_rsp_fifo:out_ready
	wire          i2c_end_flag_0_s1_agent_rsp_fifo_out_startofpacket;                        // i2c_end_flag_0_s1_agent_rsp_fifo:out_startofpacket -> i2c_end_flag_0_s1_agent:rf_sink_startofpacket
	wire          i2c_end_flag_0_s1_agent_rsp_fifo_out_endofpacket;                          // i2c_end_flag_0_s1_agent_rsp_fifo:out_endofpacket -> i2c_end_flag_0_s1_agent:rf_sink_endofpacket
	wire          i2c_end_flag_0_s1_agent_rdata_fifo_src_valid;                              // i2c_end_flag_0_s1_agent:rdata_fifo_src_valid -> i2c_end_flag_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_end_flag_0_s1_agent_rdata_fifo_src_data;                               // i2c_end_flag_0_s1_agent:rdata_fifo_src_data -> i2c_end_flag_0_s1_agent_rdata_fifo:in_data
	wire          i2c_end_flag_0_s1_agent_rdata_fifo_src_ready;                              // i2c_end_flag_0_s1_agent_rdata_fifo:in_ready -> i2c_end_flag_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_start_flag_0_s1_agent_m0_readdata;                                     // i2c_start_flag_0_s1_translator:uav_readdata -> i2c_start_flag_0_s1_agent:m0_readdata
	wire          i2c_start_flag_0_s1_agent_m0_waitrequest;                                  // i2c_start_flag_0_s1_translator:uav_waitrequest -> i2c_start_flag_0_s1_agent:m0_waitrequest
	wire          i2c_start_flag_0_s1_agent_m0_debugaccess;                                  // i2c_start_flag_0_s1_agent:m0_debugaccess -> i2c_start_flag_0_s1_translator:uav_debugaccess
	wire   [25:0] i2c_start_flag_0_s1_agent_m0_address;                                      // i2c_start_flag_0_s1_agent:m0_address -> i2c_start_flag_0_s1_translator:uav_address
	wire    [3:0] i2c_start_flag_0_s1_agent_m0_byteenable;                                   // i2c_start_flag_0_s1_agent:m0_byteenable -> i2c_start_flag_0_s1_translator:uav_byteenable
	wire          i2c_start_flag_0_s1_agent_m0_read;                                         // i2c_start_flag_0_s1_agent:m0_read -> i2c_start_flag_0_s1_translator:uav_read
	wire          i2c_start_flag_0_s1_agent_m0_readdatavalid;                                // i2c_start_flag_0_s1_translator:uav_readdatavalid -> i2c_start_flag_0_s1_agent:m0_readdatavalid
	wire          i2c_start_flag_0_s1_agent_m0_lock;                                         // i2c_start_flag_0_s1_agent:m0_lock -> i2c_start_flag_0_s1_translator:uav_lock
	wire   [31:0] i2c_start_flag_0_s1_agent_m0_writedata;                                    // i2c_start_flag_0_s1_agent:m0_writedata -> i2c_start_flag_0_s1_translator:uav_writedata
	wire          i2c_start_flag_0_s1_agent_m0_write;                                        // i2c_start_flag_0_s1_agent:m0_write -> i2c_start_flag_0_s1_translator:uav_write
	wire    [2:0] i2c_start_flag_0_s1_agent_m0_burstcount;                                   // i2c_start_flag_0_s1_agent:m0_burstcount -> i2c_start_flag_0_s1_translator:uav_burstcount
	wire          i2c_start_flag_0_s1_agent_rf_source_valid;                                 // i2c_start_flag_0_s1_agent:rf_source_valid -> i2c_start_flag_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] i2c_start_flag_0_s1_agent_rf_source_data;                                  // i2c_start_flag_0_s1_agent:rf_source_data -> i2c_start_flag_0_s1_agent_rsp_fifo:in_data
	wire          i2c_start_flag_0_s1_agent_rf_source_ready;                                 // i2c_start_flag_0_s1_agent_rsp_fifo:in_ready -> i2c_start_flag_0_s1_agent:rf_source_ready
	wire          i2c_start_flag_0_s1_agent_rf_source_startofpacket;                         // i2c_start_flag_0_s1_agent:rf_source_startofpacket -> i2c_start_flag_0_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_start_flag_0_s1_agent_rf_source_endofpacket;                           // i2c_start_flag_0_s1_agent:rf_source_endofpacket -> i2c_start_flag_0_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_start_flag_0_s1_agent_rsp_fifo_out_valid;                              // i2c_start_flag_0_s1_agent_rsp_fifo:out_valid -> i2c_start_flag_0_s1_agent:rf_sink_valid
	wire  [125:0] i2c_start_flag_0_s1_agent_rsp_fifo_out_data;                               // i2c_start_flag_0_s1_agent_rsp_fifo:out_data -> i2c_start_flag_0_s1_agent:rf_sink_data
	wire          i2c_start_flag_0_s1_agent_rsp_fifo_out_ready;                              // i2c_start_flag_0_s1_agent:rf_sink_ready -> i2c_start_flag_0_s1_agent_rsp_fifo:out_ready
	wire          i2c_start_flag_0_s1_agent_rsp_fifo_out_startofpacket;                      // i2c_start_flag_0_s1_agent_rsp_fifo:out_startofpacket -> i2c_start_flag_0_s1_agent:rf_sink_startofpacket
	wire          i2c_start_flag_0_s1_agent_rsp_fifo_out_endofpacket;                        // i2c_start_flag_0_s1_agent_rsp_fifo:out_endofpacket -> i2c_start_flag_0_s1_agent:rf_sink_endofpacket
	wire          i2c_start_flag_0_s1_agent_rdata_fifo_src_valid;                            // i2c_start_flag_0_s1_agent:rdata_fifo_src_valid -> i2c_start_flag_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_start_flag_0_s1_agent_rdata_fifo_src_data;                             // i2c_start_flag_0_s1_agent:rdata_fifo_src_data -> i2c_start_flag_0_s1_agent_rdata_fifo:in_data
	wire          i2c_start_flag_0_s1_agent_rdata_fifo_src_ready;                            // i2c_start_flag_0_s1_agent_rdata_fifo:in_ready -> i2c_start_flag_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] play_out_0_s1_agent_m0_readdata;                                           // play_out_0_s1_translator:uav_readdata -> play_out_0_s1_agent:m0_readdata
	wire          play_out_0_s1_agent_m0_waitrequest;                                        // play_out_0_s1_translator:uav_waitrequest -> play_out_0_s1_agent:m0_waitrequest
	wire          play_out_0_s1_agent_m0_debugaccess;                                        // play_out_0_s1_agent:m0_debugaccess -> play_out_0_s1_translator:uav_debugaccess
	wire   [25:0] play_out_0_s1_agent_m0_address;                                            // play_out_0_s1_agent:m0_address -> play_out_0_s1_translator:uav_address
	wire    [3:0] play_out_0_s1_agent_m0_byteenable;                                         // play_out_0_s1_agent:m0_byteenable -> play_out_0_s1_translator:uav_byteenable
	wire          play_out_0_s1_agent_m0_read;                                               // play_out_0_s1_agent:m0_read -> play_out_0_s1_translator:uav_read
	wire          play_out_0_s1_agent_m0_readdatavalid;                                      // play_out_0_s1_translator:uav_readdatavalid -> play_out_0_s1_agent:m0_readdatavalid
	wire          play_out_0_s1_agent_m0_lock;                                               // play_out_0_s1_agent:m0_lock -> play_out_0_s1_translator:uav_lock
	wire   [31:0] play_out_0_s1_agent_m0_writedata;                                          // play_out_0_s1_agent:m0_writedata -> play_out_0_s1_translator:uav_writedata
	wire          play_out_0_s1_agent_m0_write;                                              // play_out_0_s1_agent:m0_write -> play_out_0_s1_translator:uav_write
	wire    [2:0] play_out_0_s1_agent_m0_burstcount;                                         // play_out_0_s1_agent:m0_burstcount -> play_out_0_s1_translator:uav_burstcount
	wire          play_out_0_s1_agent_rf_source_valid;                                       // play_out_0_s1_agent:rf_source_valid -> play_out_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] play_out_0_s1_agent_rf_source_data;                                        // play_out_0_s1_agent:rf_source_data -> play_out_0_s1_agent_rsp_fifo:in_data
	wire          play_out_0_s1_agent_rf_source_ready;                                       // play_out_0_s1_agent_rsp_fifo:in_ready -> play_out_0_s1_agent:rf_source_ready
	wire          play_out_0_s1_agent_rf_source_startofpacket;                               // play_out_0_s1_agent:rf_source_startofpacket -> play_out_0_s1_agent_rsp_fifo:in_startofpacket
	wire          play_out_0_s1_agent_rf_source_endofpacket;                                 // play_out_0_s1_agent:rf_source_endofpacket -> play_out_0_s1_agent_rsp_fifo:in_endofpacket
	wire          play_out_0_s1_agent_rsp_fifo_out_valid;                                    // play_out_0_s1_agent_rsp_fifo:out_valid -> play_out_0_s1_agent:rf_sink_valid
	wire  [125:0] play_out_0_s1_agent_rsp_fifo_out_data;                                     // play_out_0_s1_agent_rsp_fifo:out_data -> play_out_0_s1_agent:rf_sink_data
	wire          play_out_0_s1_agent_rsp_fifo_out_ready;                                    // play_out_0_s1_agent:rf_sink_ready -> play_out_0_s1_agent_rsp_fifo:out_ready
	wire          play_out_0_s1_agent_rsp_fifo_out_startofpacket;                            // play_out_0_s1_agent_rsp_fifo:out_startofpacket -> play_out_0_s1_agent:rf_sink_startofpacket
	wire          play_out_0_s1_agent_rsp_fifo_out_endofpacket;                              // play_out_0_s1_agent_rsp_fifo:out_endofpacket -> play_out_0_s1_agent:rf_sink_endofpacket
	wire          play_out_0_s1_agent_rdata_fifo_src_valid;                                  // play_out_0_s1_agent:rdata_fifo_src_valid -> play_out_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] play_out_0_s1_agent_rdata_fifo_src_data;                                   // play_out_0_s1_agent:rdata_fifo_src_data -> play_out_0_s1_agent_rdata_fifo:in_data
	wire          play_out_0_s1_agent_rdata_fifo_src_ready;                                  // play_out_0_s1_agent_rdata_fifo:in_ready -> play_out_0_s1_agent:rdata_fifo_src_ready
	wire          cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [124:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [124:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                              // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_002:sink_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                               // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_002:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                              // router_002:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                      // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                        // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                               // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_003:sink_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                               // router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                       // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                         // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux:sink_valid
	wire  [124:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                      // rsp_demux:sink_ready -> router_004:src_ready
	wire   [19:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [124:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                      // rsp_demux_001:sink_ready -> router_005:src_ready
	wire   [19:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [124:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                      // rsp_demux_002:sink_ready -> router_006:src_ready
	wire   [19:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [124:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                      // rsp_demux_003:sink_ready -> router_007:src_ready
	wire   [19:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [124:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                      // rsp_demux_004:sink_ready -> router_008:src_ready
	wire   [19:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [124:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                      // rsp_demux_005:sink_ready -> router_009:src_ready
	wire   [19:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [124:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                      // rsp_demux_006:sink_ready -> router_010:src_ready
	wire   [19:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [124:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                      // rsp_demux_007:sink_ready -> router_011:src_ready
	wire   [19:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_008:sink_valid
	wire  [124:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_008:sink_data
	wire          router_012_src_ready;                                                      // rsp_demux_008:sink_ready -> router_012:src_ready
	wire   [19:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_008:sink_channel
	wire          router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_009:sink_valid
	wire  [124:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_009:sink_data
	wire          router_013_src_ready;                                                      // rsp_demux_009:sink_ready -> router_013:src_ready
	wire   [19:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_009:sink_channel
	wire          router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_010:sink_valid
	wire  [124:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_010:sink_data
	wire          router_014_src_ready;                                                      // rsp_demux_010:sink_ready -> router_014:src_ready
	wire   [19:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_010:sink_channel
	wire          router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_011:sink_valid
	wire  [124:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_011:sink_data
	wire          router_015_src_ready;                                                      // rsp_demux_011:sink_ready -> router_015:src_ready
	wire   [19:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_011:sink_channel
	wire          router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_012:sink_valid
	wire  [124:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_012:sink_data
	wire          router_016_src_ready;                                                      // rsp_demux_012:sink_ready -> router_016:src_ready
	wire   [19:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_012:sink_channel
	wire          router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_013:sink_valid
	wire  [124:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_013:sink_data
	wire          router_017_src_ready;                                                      // rsp_demux_013:sink_ready -> router_017:src_ready
	wire   [19:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_013:sink_channel
	wire          router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_014:sink_valid
	wire  [124:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_014:sink_data
	wire          router_018_src_ready;                                                      // rsp_demux_014:sink_ready -> router_018:src_ready
	wire   [19:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_014:sink_channel
	wire          router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_015:sink_valid
	wire  [124:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_015:sink_data
	wire          router_019_src_ready;                                                      // rsp_demux_015:sink_ready -> router_019:src_ready
	wire   [19:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_015:sink_channel
	wire          router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_016:sink_valid
	wire  [124:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_016:sink_data
	wire          router_020_src_ready;                                                      // rsp_demux_016:sink_ready -> router_020:src_ready
	wire   [19:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_016:sink_channel
	wire          router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_021_src_valid;                                                      // router_021:src_valid -> rsp_demux_017:sink_valid
	wire  [124:0] router_021_src_data;                                                       // router_021:src_data -> rsp_demux_017:sink_data
	wire          router_021_src_ready;                                                      // rsp_demux_017:sink_ready -> router_021:src_ready
	wire   [19:0] router_021_src_channel;                                                    // router_021:src_channel -> rsp_demux_017:sink_channel
	wire          router_021_src_startofpacket;                                              // router_021:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_021_src_endofpacket;                                                // router_021:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_022_src_valid;                                                      // router_022:src_valid -> rsp_demux_018:sink_valid
	wire  [124:0] router_022_src_data;                                                       // router_022:src_data -> rsp_demux_018:sink_data
	wire          router_022_src_ready;                                                      // rsp_demux_018:sink_ready -> router_022:src_ready
	wire   [19:0] router_022_src_channel;                                                    // router_022:src_channel -> rsp_demux_018:sink_channel
	wire          router_022_src_startofpacket;                                              // router_022:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_022_src_endofpacket;                                                // router_022:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_023_src_valid;                                                      // router_023:src_valid -> rsp_demux_019:sink_valid
	wire  [124:0] router_023_src_data;                                                       // router_023:src_data -> rsp_demux_019:sink_data
	wire          router_023_src_ready;                                                      // rsp_demux_019:sink_ready -> router_023:src_ready
	wire   [19:0] router_023_src_channel;                                                    // router_023:src_channel -> rsp_demux_019:sink_channel
	wire          router_023_src_startofpacket;                                              // router_023:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_023_src_endofpacket;                                                // router_023:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [124:0] router_src_data;                                                           // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                          // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [19:0] router_src_channel;                                                        // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                     // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [124:0] cpu_data_master_limiter_rsp_src_data;                                      // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                     // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire   [19:0] cpu_data_master_limiter_rsp_src_channel;                                   // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                             // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                               // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [124:0] router_001_src_data;                                                       // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                      // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [19:0] router_001_src_channel;                                                    // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                              // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [124:0] cpu_instruction_master_limiter_rsp_src_data;                               // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                              // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [19:0] cpu_instruction_master_limiter_rsp_src_channel;                            // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [124:0] router_002_src_data;                                                       // router_002:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [19:0] router_002_src_channel;                                                    // router_002:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                          // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [124:0] router_003_src_data;                                                       // router_003:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [19:0] router_003_src_channel;                                                    // router_003:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                          // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> alt_vip_mix_0_control_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> alt_vip_mix_0_control_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                     // alt_vip_mix_0_control_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [19:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> alt_vip_mix_0_control_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> alt_vip_mix_0_control_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> alt_vip_mix_0_control_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> alt_vip_cti_0_control_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> alt_vip_cti_0_control_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                     // alt_vip_cti_0_control_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [19:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> alt_vip_cti_0_control_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> alt_vip_cti_0_control_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> alt_vip_cti_0_control_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                     // alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [19:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> alt_vip_vfr_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> fifo_0_in_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> fifo_0_in_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                     // fifo_0_in_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [19:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> fifo_0_in_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> fifo_0_in_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> fifo_0_in_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> fifo_0_in_csr_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> fifo_0_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                     // fifo_0_in_csr_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [19:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> fifo_0_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> fifo_0_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> fifo_0_in_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> ledr_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> ledr_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                     // ledr_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [19:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> ledr_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> ledr_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> ledr_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> key_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> key_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                     // key_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [19:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> key_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> key_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> key_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> sw_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> sw_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                     // sw_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [19:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> sw_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> sw_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> sw_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> timer_0_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> timer_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                     // timer_0_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [19:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> timer_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> timer_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> timer_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> i2c_data_0_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> i2c_data_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                     // i2c_data_0_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [19:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> i2c_data_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> i2c_data_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> i2c_data_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> i2c_end_flag_0_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> i2c_end_flag_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                     // i2c_end_flag_0_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [19:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> i2c_end_flag_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> i2c_end_flag_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> i2c_end_flag_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> i2c_start_flag_0_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> i2c_start_flag_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                     // i2c_start_flag_0_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [19:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> i2c_start_flag_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> i2c_start_flag_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> i2c_start_flag_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                                     // cmd_mux_019:src_valid -> play_out_0_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_019_src_data;                                                      // cmd_mux_019:src_data -> play_out_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                     // play_out_0_s1_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [19:0] cmd_mux_019_src_channel;                                                   // cmd_mux_019:src_channel -> play_out_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                             // cmd_mux_019:src_startofpacket -> play_out_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                               // cmd_mux_019:src_endofpacket -> play_out_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [124:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [19:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [19:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [19:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [124:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [19:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [124:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [19:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [124:0] cmd_demux_src5_data;                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [19:0] cmd_demux_src5_channel;                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [124:0] cmd_demux_src6_data;                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [19:0] cmd_demux_src6_channel;                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [124:0] cmd_demux_src7_data;                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [19:0] cmd_demux_src7_channel;                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [124:0] cmd_demux_src8_data;                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [19:0] cmd_demux_src8_channel;                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [124:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [19:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_006:sink1_valid
	wire  [124:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src1_ready;                                                  // cmd_mux_006:sink1_ready -> cmd_demux_001:src1_ready
	wire   [19:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src3_valid;                                                  // cmd_demux_002:src3_valid -> cmd_mux_010:sink0_valid
	wire  [124:0] cmd_demux_002_src3_data;                                                   // cmd_demux_002:src3_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_002_src3_ready;                                                  // cmd_mux_010:sink0_ready -> cmd_demux_002:src3_ready
	wire   [19:0] cmd_demux_002_src3_channel;                                                // cmd_demux_002:src3_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                          // cmd_demux_002:src3_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                            // cmd_demux_002:src3_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                  // cmd_demux_002:src4_valid -> cmd_mux_011:sink0_valid
	wire  [124:0] cmd_demux_002_src4_data;                                                   // cmd_demux_002:src4_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src4_ready;                                                  // cmd_mux_011:sink0_ready -> cmd_demux_002:src4_ready
	wire   [19:0] cmd_demux_002_src4_channel;                                                // cmd_demux_002:src4_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                          // cmd_demux_002:src4_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                            // cmd_demux_002:src4_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                  // cmd_demux_002:src8_valid -> cmd_mux_015:sink0_valid
	wire  [124:0] cmd_demux_002_src8_data;                                                   // cmd_demux_002:src8_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_002_src8_ready;                                                  // cmd_mux_015:sink0_ready -> cmd_demux_002:src8_ready
	wire   [19:0] cmd_demux_002_src8_channel;                                                // cmd_demux_002:src8_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_002_src8_startofpacket;                                          // cmd_demux_002:src8_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                            // cmd_demux_002:src8_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src9_valid;                                                  // cmd_demux_002:src9_valid -> cmd_mux_016:sink0_valid
	wire  [124:0] cmd_demux_002_src9_data;                                                   // cmd_demux_002:src9_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_002_src9_ready;                                                  // cmd_mux_016:sink0_ready -> cmd_demux_002:src9_ready
	wire   [19:0] cmd_demux_002_src9_channel;                                                // cmd_demux_002:src9_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                          // cmd_demux_002:src9_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                            // cmd_demux_002:src9_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_002_src10_valid;                                                 // cmd_demux_002:src10_valid -> cmd_mux_017:sink0_valid
	wire  [124:0] cmd_demux_002_src10_data;                                                  // cmd_demux_002:src10_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_002_src10_ready;                                                 // cmd_mux_017:sink0_ready -> cmd_demux_002:src10_ready
	wire   [19:0] cmd_demux_002_src10_channel;                                               // cmd_demux_002:src10_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_002_src10_startofpacket;                                         // cmd_demux_002:src10_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                           // cmd_demux_002:src10_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_002_src11_valid;                                                 // cmd_demux_002:src11_valid -> cmd_mux_018:sink0_valid
	wire  [124:0] cmd_demux_002_src11_data;                                                  // cmd_demux_002:src11_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_002_src11_ready;                                                 // cmd_mux_018:sink0_ready -> cmd_demux_002:src11_ready
	wire   [19:0] cmd_demux_002_src11_channel;                                               // cmd_demux_002:src11_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_002_src11_startofpacket;                                         // cmd_demux_002:src11_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                           // cmd_demux_002:src11_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_002_src12_valid;                                                 // cmd_demux_002:src12_valid -> cmd_mux_019:sink0_valid
	wire  [124:0] cmd_demux_002_src12_data;                                                  // cmd_demux_002:src12_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_002_src12_ready;                                                 // cmd_mux_019:sink0_ready -> cmd_demux_002:src12_ready
	wire   [19:0] cmd_demux_002_src12_channel;                                               // cmd_demux_002:src12_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_002_src12_startofpacket;                                         // cmd_demux_002:src12_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                           // cmd_demux_002:src12_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_003_src3_valid;                                                  // cmd_demux_003:src3_valid -> cmd_mux_010:sink1_valid
	wire  [124:0] cmd_demux_003_src3_data;                                                   // cmd_demux_003:src3_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_003_src3_ready;                                                  // cmd_mux_010:sink1_ready -> cmd_demux_003:src3_ready
	wire   [19:0] cmd_demux_003_src3_channel;                                                // cmd_demux_003:src3_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                          // cmd_demux_003:src3_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                            // cmd_demux_003:src3_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                  // cmd_demux_003:src4_valid -> cmd_mux_011:sink1_valid
	wire  [124:0] cmd_demux_003_src4_data;                                                   // cmd_demux_003:src4_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_003_src4_ready;                                                  // cmd_mux_011:sink1_ready -> cmd_demux_003:src4_ready
	wire   [19:0] cmd_demux_003_src4_channel;                                                // cmd_demux_003:src4_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                          // cmd_demux_003:src4_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                            // cmd_demux_003:src4_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_003_src8_valid;                                                  // cmd_demux_003:src8_valid -> cmd_mux_015:sink1_valid
	wire  [124:0] cmd_demux_003_src8_data;                                                   // cmd_demux_003:src8_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_003_src8_ready;                                                  // cmd_mux_015:sink1_ready -> cmd_demux_003:src8_ready
	wire   [19:0] cmd_demux_003_src8_channel;                                                // cmd_demux_003:src8_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_003_src8_startofpacket;                                          // cmd_demux_003:src8_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                            // cmd_demux_003:src8_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_003_src9_valid;                                                  // cmd_demux_003:src9_valid -> cmd_mux_016:sink1_valid
	wire  [124:0] cmd_demux_003_src9_data;                                                   // cmd_demux_003:src9_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_003_src9_ready;                                                  // cmd_mux_016:sink1_ready -> cmd_demux_003:src9_ready
	wire   [19:0] cmd_demux_003_src9_channel;                                                // cmd_demux_003:src9_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_003_src9_startofpacket;                                          // cmd_demux_003:src9_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                            // cmd_demux_003:src9_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_003_src10_valid;                                                 // cmd_demux_003:src10_valid -> cmd_mux_017:sink1_valid
	wire  [124:0] cmd_demux_003_src10_data;                                                  // cmd_demux_003:src10_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_003_src10_ready;                                                 // cmd_mux_017:sink1_ready -> cmd_demux_003:src10_ready
	wire   [19:0] cmd_demux_003_src10_channel;                                               // cmd_demux_003:src10_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_003_src10_startofpacket;                                         // cmd_demux_003:src10_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                           // cmd_demux_003:src10_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_003_src11_valid;                                                 // cmd_demux_003:src11_valid -> cmd_mux_018:sink1_valid
	wire  [124:0] cmd_demux_003_src11_data;                                                  // cmd_demux_003:src11_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_003_src11_ready;                                                 // cmd_mux_018:sink1_ready -> cmd_demux_003:src11_ready
	wire   [19:0] cmd_demux_003_src11_channel;                                               // cmd_demux_003:src11_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_003_src11_startofpacket;                                         // cmd_demux_003:src11_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                           // cmd_demux_003:src11_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_003_src12_valid;                                                 // cmd_demux_003:src12_valid -> cmd_mux_019:sink1_valid
	wire  [124:0] cmd_demux_003_src12_data;                                                  // cmd_demux_003:src12_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_003_src12_ready;                                                 // cmd_mux_019:sink1_ready -> cmd_demux_003:src12_ready
	wire   [19:0] cmd_demux_003_src12_channel;                                               // cmd_demux_003:src12_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_003_src12_startofpacket;                                         // cmd_demux_003:src12_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                           // cmd_demux_003:src12_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [124:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [19:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [124:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [19:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [124:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [19:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [124:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [19:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                  // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] rsp_demux_003_src1_data;                                                   // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                  // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [19:0] rsp_demux_003_src1_channel;                                                // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                          // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                            // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [124:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [19:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [124:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [19:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [124:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [19:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                  // rsp_demux_006:src1_valid -> rsp_mux_001:sink1_valid
	wire  [124:0] rsp_demux_006_src1_data;                                                   // rsp_demux_006:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_006_src1_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_006:src1_ready
	wire   [19:0] rsp_demux_006_src1_channel;                                                // rsp_demux_006:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_006_src1_startofpacket;                                          // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                            // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [124:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [19:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [124:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [19:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> rsp_mux_002:sink3_valid
	wire  [124:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_010_src0_ready;                                                  // rsp_mux_002:sink3_ready -> rsp_demux_010:src0_ready
	wire   [19:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_010_src1_valid;                                                  // rsp_demux_010:src1_valid -> rsp_mux_003:sink3_valid
	wire  [124:0] rsp_demux_010_src1_data;                                                   // rsp_demux_010:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_010_src1_ready;                                                  // rsp_mux_003:sink3_ready -> rsp_demux_010:src1_ready
	wire   [19:0] rsp_demux_010_src1_channel;                                                // rsp_demux_010:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_010_src1_startofpacket;                                          // rsp_demux_010:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                            // rsp_demux_010:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> rsp_mux_002:sink4_valid
	wire  [124:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_011_src0_ready;                                                  // rsp_mux_002:sink4_ready -> rsp_demux_011:src0_ready
	wire   [19:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_011_src1_valid;                                                  // rsp_demux_011:src1_valid -> rsp_mux_003:sink4_valid
	wire  [124:0] rsp_demux_011_src1_data;                                                   // rsp_demux_011:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_011_src1_ready;                                                  // rsp_mux_003:sink4_ready -> rsp_demux_011:src1_ready
	wire   [19:0] rsp_demux_011_src1_channel;                                                // rsp_demux_011:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_011_src1_startofpacket;                                          // rsp_demux_011:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                            // rsp_demux_011:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> rsp_mux_002:sink8_valid
	wire  [124:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_015_src0_ready;                                                  // rsp_mux_002:sink8_ready -> rsp_demux_015:src0_ready
	wire   [19:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_015_src1_valid;                                                  // rsp_demux_015:src1_valid -> rsp_mux_003:sink8_valid
	wire  [124:0] rsp_demux_015_src1_data;                                                   // rsp_demux_015:src1_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_015_src1_ready;                                                  // rsp_mux_003:sink8_ready -> rsp_demux_015:src1_ready
	wire   [19:0] rsp_demux_015_src1_channel;                                                // rsp_demux_015:src1_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_015_src1_startofpacket;                                          // rsp_demux_015:src1_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                            // rsp_demux_015:src1_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> rsp_mux_002:sink9_valid
	wire  [124:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_016_src0_ready;                                                  // rsp_mux_002:sink9_ready -> rsp_demux_016:src0_ready
	wire   [19:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_016_src1_valid;                                                  // rsp_demux_016:src1_valid -> rsp_mux_003:sink9_valid
	wire  [124:0] rsp_demux_016_src1_data;                                                   // rsp_demux_016:src1_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_016_src1_ready;                                                  // rsp_mux_003:sink9_ready -> rsp_demux_016:src1_ready
	wire   [19:0] rsp_demux_016_src1_channel;                                                // rsp_demux_016:src1_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_016_src1_startofpacket;                                          // rsp_demux_016:src1_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                            // rsp_demux_016:src1_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> rsp_mux_002:sink10_valid
	wire  [124:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_017_src0_ready;                                                  // rsp_mux_002:sink10_ready -> rsp_demux_017:src0_ready
	wire   [19:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_017_src1_valid;                                                  // rsp_demux_017:src1_valid -> rsp_mux_003:sink10_valid
	wire  [124:0] rsp_demux_017_src1_data;                                                   // rsp_demux_017:src1_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_017_src1_ready;                                                  // rsp_mux_003:sink10_ready -> rsp_demux_017:src1_ready
	wire   [19:0] rsp_demux_017_src1_channel;                                                // rsp_demux_017:src1_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_017_src1_startofpacket;                                          // rsp_demux_017:src1_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                            // rsp_demux_017:src1_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> rsp_mux_002:sink11_valid
	wire  [124:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_018_src0_ready;                                                  // rsp_mux_002:sink11_ready -> rsp_demux_018:src0_ready
	wire   [19:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_018_src1_valid;                                                  // rsp_demux_018:src1_valid -> rsp_mux_003:sink11_valid
	wire  [124:0] rsp_demux_018_src1_data;                                                   // rsp_demux_018:src1_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_018_src1_ready;                                                  // rsp_mux_003:sink11_ready -> rsp_demux_018:src1_ready
	wire   [19:0] rsp_demux_018_src1_channel;                                                // rsp_demux_018:src1_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_018_src1_startofpacket;                                          // rsp_demux_018:src1_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                            // rsp_demux_018:src1_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_019_src0_valid;                                                  // rsp_demux_019:src0_valid -> rsp_mux_002:sink12_valid
	wire  [124:0] rsp_demux_019_src0_data;                                                   // rsp_demux_019:src0_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_019_src0_ready;                                                  // rsp_mux_002:sink12_ready -> rsp_demux_019:src0_ready
	wire   [19:0] rsp_demux_019_src0_channel;                                                // rsp_demux_019:src0_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_019_src0_startofpacket;                                          // rsp_demux_019:src0_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                            // rsp_demux_019:src0_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_019_src1_valid;                                                  // rsp_demux_019:src1_valid -> rsp_mux_003:sink12_valid
	wire  [124:0] rsp_demux_019_src1_data;                                                   // rsp_demux_019:src1_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_019_src1_ready;                                                  // rsp_mux_003:sink12_ready -> rsp_demux_019:src1_ready
	wire   [19:0] rsp_demux_019_src1_channel;                                                // rsp_demux_019:src1_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_019_src1_startofpacket;                                          // rsp_demux_019:src1_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                            // rsp_demux_019:src1_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> crosser:in_valid
	wire  [124:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> crosser:in_data
	wire          cmd_demux_002_src0_ready;                                                  // crosser:in_ready -> cmd_demux_002:src0_ready
	wire   [19:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> crosser:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                         // crosser:out_valid -> cmd_mux_001:sink1_valid
	wire  [124:0] crosser_out_data;                                                          // crosser:out_data -> cmd_mux_001:sink1_data
	wire          crosser_out_ready;                                                         // cmd_mux_001:sink1_ready -> crosser:out_ready
	wire   [19:0] crosser_out_channel;                                                       // crosser:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_out_startofpacket;                                                 // crosser:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_out_endofpacket;                                                   // crosser:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                  // cmd_demux_002:src1_valid -> crosser_001:in_valid
	wire  [124:0] cmd_demux_002_src1_data;                                                   // cmd_demux_002:src1_data -> crosser_001:in_data
	wire          cmd_demux_002_src1_ready;                                                  // crosser_001:in_ready -> cmd_demux_002:src1_ready
	wire   [19:0] cmd_demux_002_src1_channel;                                                // cmd_demux_002:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                          // cmd_demux_002:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                            // cmd_demux_002:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                     // crosser_001:out_valid -> cmd_mux_002:sink1_valid
	wire  [124:0] crosser_001_out_data;                                                      // crosser_001:out_data -> cmd_mux_002:sink1_data
	wire          crosser_001_out_ready;                                                     // cmd_mux_002:sink1_ready -> crosser_001:out_ready
	wire   [19:0] crosser_001_out_channel;                                                   // crosser_001:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_001_out_startofpacket;                                             // crosser_001:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                               // crosser_001:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src2_valid;                                                  // cmd_demux_002:src2_valid -> crosser_002:in_valid
	wire  [124:0] cmd_demux_002_src2_data;                                                   // cmd_demux_002:src2_data -> crosser_002:in_data
	wire          cmd_demux_002_src2_ready;                                                  // crosser_002:in_ready -> cmd_demux_002:src2_ready
	wire   [19:0] cmd_demux_002_src2_channel;                                                // cmd_demux_002:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                          // cmd_demux_002:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                            // cmd_demux_002:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                     // crosser_002:out_valid -> cmd_mux_009:sink0_valid
	wire  [124:0] crosser_002_out_data;                                                      // crosser_002:out_data -> cmd_mux_009:sink0_data
	wire          crosser_002_out_ready;                                                     // cmd_mux_009:sink0_ready -> crosser_002:out_ready
	wire   [19:0] crosser_002_out_channel;                                                   // crosser_002:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_002_out_startofpacket;                                             // crosser_002:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                               // crosser_002:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                  // cmd_demux_002:src5_valid -> crosser_003:in_valid
	wire  [124:0] cmd_demux_002_src5_data;                                                   // cmd_demux_002:src5_data -> crosser_003:in_data
	wire          cmd_demux_002_src5_ready;                                                  // crosser_003:in_ready -> cmd_demux_002:src5_ready
	wire   [19:0] cmd_demux_002_src5_channel;                                                // cmd_demux_002:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_002_src5_startofpacket;                                          // cmd_demux_002:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                            // cmd_demux_002:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                     // crosser_003:out_valid -> cmd_mux_012:sink0_valid
	wire  [124:0] crosser_003_out_data;                                                      // crosser_003:out_data -> cmd_mux_012:sink0_data
	wire          crosser_003_out_ready;                                                     // cmd_mux_012:sink0_ready -> crosser_003:out_ready
	wire   [19:0] crosser_003_out_channel;                                                   // crosser_003:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_003_out_startofpacket;                                             // crosser_003:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                               // crosser_003:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                  // cmd_demux_002:src6_valid -> crosser_004:in_valid
	wire  [124:0] cmd_demux_002_src6_data;                                                   // cmd_demux_002:src6_data -> crosser_004:in_data
	wire          cmd_demux_002_src6_ready;                                                  // crosser_004:in_ready -> cmd_demux_002:src6_ready
	wire   [19:0] cmd_demux_002_src6_channel;                                                // cmd_demux_002:src6_channel -> crosser_004:in_channel
	wire          cmd_demux_002_src6_startofpacket;                                          // cmd_demux_002:src6_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                            // cmd_demux_002:src6_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                     // crosser_004:out_valid -> cmd_mux_013:sink0_valid
	wire  [124:0] crosser_004_out_data;                                                      // crosser_004:out_data -> cmd_mux_013:sink0_data
	wire          crosser_004_out_ready;                                                     // cmd_mux_013:sink0_ready -> crosser_004:out_ready
	wire   [19:0] crosser_004_out_channel;                                                   // crosser_004:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_004_out_startofpacket;                                             // crosser_004:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                               // crosser_004:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                  // cmd_demux_002:src7_valid -> crosser_005:in_valid
	wire  [124:0] cmd_demux_002_src7_data;                                                   // cmd_demux_002:src7_data -> crosser_005:in_data
	wire          cmd_demux_002_src7_ready;                                                  // crosser_005:in_ready -> cmd_demux_002:src7_ready
	wire   [19:0] cmd_demux_002_src7_channel;                                                // cmd_demux_002:src7_channel -> crosser_005:in_channel
	wire          cmd_demux_002_src7_startofpacket;                                          // cmd_demux_002:src7_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                            // cmd_demux_002:src7_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                     // crosser_005:out_valid -> cmd_mux_014:sink0_valid
	wire  [124:0] crosser_005_out_data;                                                      // crosser_005:out_data -> cmd_mux_014:sink0_data
	wire          crosser_005_out_ready;                                                     // cmd_mux_014:sink0_ready -> crosser_005:out_ready
	wire   [19:0] crosser_005_out_channel;                                                   // crosser_005:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_005_out_startofpacket;                                             // crosser_005:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                               // crosser_005:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                  // cmd_demux_003:src0_valid -> crosser_006:in_valid
	wire  [124:0] cmd_demux_003_src0_data;                                                   // cmd_demux_003:src0_data -> crosser_006:in_data
	wire          cmd_demux_003_src0_ready;                                                  // crosser_006:in_ready -> cmd_demux_003:src0_ready
	wire   [19:0] cmd_demux_003_src0_channel;                                                // cmd_demux_003:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                          // cmd_demux_003:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                            // cmd_demux_003:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                     // crosser_006:out_valid -> cmd_mux_001:sink2_valid
	wire  [124:0] crosser_006_out_data;                                                      // crosser_006:out_data -> cmd_mux_001:sink2_data
	wire          crosser_006_out_ready;                                                     // cmd_mux_001:sink2_ready -> crosser_006:out_ready
	wire   [19:0] crosser_006_out_channel;                                                   // crosser_006:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_006_out_startofpacket;                                             // crosser_006:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          crosser_006_out_endofpacket;                                               // crosser_006:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_003_src1_valid;                                                  // cmd_demux_003:src1_valid -> crosser_007:in_valid
	wire  [124:0] cmd_demux_003_src1_data;                                                   // cmd_demux_003:src1_data -> crosser_007:in_data
	wire          cmd_demux_003_src1_ready;                                                  // crosser_007:in_ready -> cmd_demux_003:src1_ready
	wire   [19:0] cmd_demux_003_src1_channel;                                                // cmd_demux_003:src1_channel -> crosser_007:in_channel
	wire          cmd_demux_003_src1_startofpacket;                                          // cmd_demux_003:src1_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                            // cmd_demux_003:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                     // crosser_007:out_valid -> cmd_mux_002:sink2_valid
	wire  [124:0] crosser_007_out_data;                                                      // crosser_007:out_data -> cmd_mux_002:sink2_data
	wire          crosser_007_out_ready;                                                     // cmd_mux_002:sink2_ready -> crosser_007:out_ready
	wire   [19:0] crosser_007_out_channel;                                                   // crosser_007:out_channel -> cmd_mux_002:sink2_channel
	wire          crosser_007_out_startofpacket;                                             // crosser_007:out_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          crosser_007_out_endofpacket;                                               // crosser_007:out_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_003_src2_valid;                                                  // cmd_demux_003:src2_valid -> crosser_008:in_valid
	wire  [124:0] cmd_demux_003_src2_data;                                                   // cmd_demux_003:src2_data -> crosser_008:in_data
	wire          cmd_demux_003_src2_ready;                                                  // crosser_008:in_ready -> cmd_demux_003:src2_ready
	wire   [19:0] cmd_demux_003_src2_channel;                                                // cmd_demux_003:src2_channel -> crosser_008:in_channel
	wire          cmd_demux_003_src2_startofpacket;                                          // cmd_demux_003:src2_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                            // cmd_demux_003:src2_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                     // crosser_008:out_valid -> cmd_mux_009:sink1_valid
	wire  [124:0] crosser_008_out_data;                                                      // crosser_008:out_data -> cmd_mux_009:sink1_data
	wire          crosser_008_out_ready;                                                     // cmd_mux_009:sink1_ready -> crosser_008:out_ready
	wire   [19:0] crosser_008_out_channel;                                                   // crosser_008:out_channel -> cmd_mux_009:sink1_channel
	wire          crosser_008_out_startofpacket;                                             // crosser_008:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                               // crosser_008:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                  // cmd_demux_003:src5_valid -> crosser_009:in_valid
	wire  [124:0] cmd_demux_003_src5_data;                                                   // cmd_demux_003:src5_data -> crosser_009:in_data
	wire          cmd_demux_003_src5_ready;                                                  // crosser_009:in_ready -> cmd_demux_003:src5_ready
	wire   [19:0] cmd_demux_003_src5_channel;                                                // cmd_demux_003:src5_channel -> crosser_009:in_channel
	wire          cmd_demux_003_src5_startofpacket;                                          // cmd_demux_003:src5_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                            // cmd_demux_003:src5_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                     // crosser_009:out_valid -> cmd_mux_012:sink1_valid
	wire  [124:0] crosser_009_out_data;                                                      // crosser_009:out_data -> cmd_mux_012:sink1_data
	wire          crosser_009_out_ready;                                                     // cmd_mux_012:sink1_ready -> crosser_009:out_ready
	wire   [19:0] crosser_009_out_channel;                                                   // crosser_009:out_channel -> cmd_mux_012:sink1_channel
	wire          crosser_009_out_startofpacket;                                             // crosser_009:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                               // crosser_009:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_003_src6_valid;                                                  // cmd_demux_003:src6_valid -> crosser_010:in_valid
	wire  [124:0] cmd_demux_003_src6_data;                                                   // cmd_demux_003:src6_data -> crosser_010:in_data
	wire          cmd_demux_003_src6_ready;                                                  // crosser_010:in_ready -> cmd_demux_003:src6_ready
	wire   [19:0] cmd_demux_003_src6_channel;                                                // cmd_demux_003:src6_channel -> crosser_010:in_channel
	wire          cmd_demux_003_src6_startofpacket;                                          // cmd_demux_003:src6_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                            // cmd_demux_003:src6_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                     // crosser_010:out_valid -> cmd_mux_013:sink1_valid
	wire  [124:0] crosser_010_out_data;                                                      // crosser_010:out_data -> cmd_mux_013:sink1_data
	wire          crosser_010_out_ready;                                                     // cmd_mux_013:sink1_ready -> crosser_010:out_ready
	wire   [19:0] crosser_010_out_channel;                                                   // crosser_010:out_channel -> cmd_mux_013:sink1_channel
	wire          crosser_010_out_startofpacket;                                             // crosser_010:out_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          crosser_010_out_endofpacket;                                               // crosser_010:out_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_003_src7_valid;                                                  // cmd_demux_003:src7_valid -> crosser_011:in_valid
	wire  [124:0] cmd_demux_003_src7_data;                                                   // cmd_demux_003:src7_data -> crosser_011:in_data
	wire          cmd_demux_003_src7_ready;                                                  // crosser_011:in_ready -> cmd_demux_003:src7_ready
	wire   [19:0] cmd_demux_003_src7_channel;                                                // cmd_demux_003:src7_channel -> crosser_011:in_channel
	wire          cmd_demux_003_src7_startofpacket;                                          // cmd_demux_003:src7_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                            // cmd_demux_003:src7_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                     // crosser_011:out_valid -> cmd_mux_014:sink1_valid
	wire  [124:0] crosser_011_out_data;                                                      // crosser_011:out_data -> cmd_mux_014:sink1_data
	wire          crosser_011_out_ready;                                                     // cmd_mux_014:sink1_ready -> crosser_011:out_ready
	wire   [19:0] crosser_011_out_channel;                                                   // crosser_011:out_channel -> cmd_mux_014:sink1_channel
	wire          crosser_011_out_startofpacket;                                             // crosser_011:out_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                               // crosser_011:out_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> crosser_012:in_valid
	wire  [124:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> crosser_012:in_data
	wire          rsp_demux_001_src1_ready;                                                  // crosser_012:in_ready -> rsp_demux_001:src1_ready
	wire   [19:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> crosser_012:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                     // crosser_012:out_valid -> rsp_mux_002:sink0_valid
	wire  [124:0] crosser_012_out_data;                                                      // crosser_012:out_data -> rsp_mux_002:sink0_data
	wire          crosser_012_out_ready;                                                     // rsp_mux_002:sink0_ready -> crosser_012:out_ready
	wire   [19:0] crosser_012_out_channel;                                                   // crosser_012:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_012_out_startofpacket;                                             // crosser_012:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                               // crosser_012:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                  // rsp_demux_001:src2_valid -> crosser_013:in_valid
	wire  [124:0] rsp_demux_001_src2_data;                                                   // rsp_demux_001:src2_data -> crosser_013:in_data
	wire          rsp_demux_001_src2_ready;                                                  // crosser_013:in_ready -> rsp_demux_001:src2_ready
	wire   [19:0] rsp_demux_001_src2_channel;                                                // rsp_demux_001:src2_channel -> crosser_013:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                          // rsp_demux_001:src2_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                            // rsp_demux_001:src2_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                     // crosser_013:out_valid -> rsp_mux_003:sink0_valid
	wire  [124:0] crosser_013_out_data;                                                      // crosser_013:out_data -> rsp_mux_003:sink0_data
	wire          crosser_013_out_ready;                                                     // rsp_mux_003:sink0_ready -> crosser_013:out_ready
	wire   [19:0] crosser_013_out_channel;                                                   // crosser_013:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_013_out_startofpacket;                                             // crosser_013:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                               // crosser_013:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src1_valid;                                                  // rsp_demux_002:src1_valid -> crosser_014:in_valid
	wire  [124:0] rsp_demux_002_src1_data;                                                   // rsp_demux_002:src1_data -> crosser_014:in_data
	wire          rsp_demux_002_src1_ready;                                                  // crosser_014:in_ready -> rsp_demux_002:src1_ready
	wire   [19:0] rsp_demux_002_src1_channel;                                                // rsp_demux_002:src1_channel -> crosser_014:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                          // rsp_demux_002:src1_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                            // rsp_demux_002:src1_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                     // crosser_014:out_valid -> rsp_mux_002:sink1_valid
	wire  [124:0] crosser_014_out_data;                                                      // crosser_014:out_data -> rsp_mux_002:sink1_data
	wire          crosser_014_out_ready;                                                     // rsp_mux_002:sink1_ready -> crosser_014:out_ready
	wire   [19:0] crosser_014_out_channel;                                                   // crosser_014:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_014_out_startofpacket;                                             // crosser_014:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_014_out_endofpacket;                                               // crosser_014:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src2_valid;                                                  // rsp_demux_002:src2_valid -> crosser_015:in_valid
	wire  [124:0] rsp_demux_002_src2_data;                                                   // rsp_demux_002:src2_data -> crosser_015:in_data
	wire          rsp_demux_002_src2_ready;                                                  // crosser_015:in_ready -> rsp_demux_002:src2_ready
	wire   [19:0] rsp_demux_002_src2_channel;                                                // rsp_demux_002:src2_channel -> crosser_015:in_channel
	wire          rsp_demux_002_src2_startofpacket;                                          // rsp_demux_002:src2_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                            // rsp_demux_002:src2_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                     // crosser_015:out_valid -> rsp_mux_003:sink1_valid
	wire  [124:0] crosser_015_out_data;                                                      // crosser_015:out_data -> rsp_mux_003:sink1_data
	wire          crosser_015_out_ready;                                                     // rsp_mux_003:sink1_ready -> crosser_015:out_ready
	wire   [19:0] crosser_015_out_channel;                                                   // crosser_015:out_channel -> rsp_mux_003:sink1_channel
	wire          crosser_015_out_startofpacket;                                             // crosser_015:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          crosser_015_out_endofpacket;                                               // crosser_015:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> crosser_016:in_valid
	wire  [124:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> crosser_016:in_data
	wire          rsp_demux_009_src0_ready;                                                  // crosser_016:in_ready -> rsp_demux_009:src0_ready
	wire   [19:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                     // crosser_016:out_valid -> rsp_mux_002:sink2_valid
	wire  [124:0] crosser_016_out_data;                                                      // crosser_016:out_data -> rsp_mux_002:sink2_data
	wire          crosser_016_out_ready;                                                     // rsp_mux_002:sink2_ready -> crosser_016:out_ready
	wire   [19:0] crosser_016_out_channel;                                                   // crosser_016:out_channel -> rsp_mux_002:sink2_channel
	wire          crosser_016_out_startofpacket;                                             // crosser_016:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          crosser_016_out_endofpacket;                                               // crosser_016:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_009_src1_valid;                                                  // rsp_demux_009:src1_valid -> crosser_017:in_valid
	wire  [124:0] rsp_demux_009_src1_data;                                                   // rsp_demux_009:src1_data -> crosser_017:in_data
	wire          rsp_demux_009_src1_ready;                                                  // crosser_017:in_ready -> rsp_demux_009:src1_ready
	wire   [19:0] rsp_demux_009_src1_channel;                                                // rsp_demux_009:src1_channel -> crosser_017:in_channel
	wire          rsp_demux_009_src1_startofpacket;                                          // rsp_demux_009:src1_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                            // rsp_demux_009:src1_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                     // crosser_017:out_valid -> rsp_mux_003:sink2_valid
	wire  [124:0] crosser_017_out_data;                                                      // crosser_017:out_data -> rsp_mux_003:sink2_data
	wire          crosser_017_out_ready;                                                     // rsp_mux_003:sink2_ready -> crosser_017:out_ready
	wire   [19:0] crosser_017_out_channel;                                                   // crosser_017:out_channel -> rsp_mux_003:sink2_channel
	wire          crosser_017_out_startofpacket;                                             // crosser_017:out_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          crosser_017_out_endofpacket;                                               // crosser_017:out_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> crosser_018:in_valid
	wire  [124:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> crosser_018:in_data
	wire          rsp_demux_012_src0_ready;                                                  // crosser_018:in_ready -> rsp_demux_012:src0_ready
	wire   [19:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                     // crosser_018:out_valid -> rsp_mux_002:sink5_valid
	wire  [124:0] crosser_018_out_data;                                                      // crosser_018:out_data -> rsp_mux_002:sink5_data
	wire          crosser_018_out_ready;                                                     // rsp_mux_002:sink5_ready -> crosser_018:out_ready
	wire   [19:0] crosser_018_out_channel;                                                   // crosser_018:out_channel -> rsp_mux_002:sink5_channel
	wire          crosser_018_out_startofpacket;                                             // crosser_018:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          crosser_018_out_endofpacket;                                               // crosser_018:out_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_012_src1_valid;                                                  // rsp_demux_012:src1_valid -> crosser_019:in_valid
	wire  [124:0] rsp_demux_012_src1_data;                                                   // rsp_demux_012:src1_data -> crosser_019:in_data
	wire          rsp_demux_012_src1_ready;                                                  // crosser_019:in_ready -> rsp_demux_012:src1_ready
	wire   [19:0] rsp_demux_012_src1_channel;                                                // rsp_demux_012:src1_channel -> crosser_019:in_channel
	wire          rsp_demux_012_src1_startofpacket;                                          // rsp_demux_012:src1_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                            // rsp_demux_012:src1_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                     // crosser_019:out_valid -> rsp_mux_003:sink5_valid
	wire  [124:0] crosser_019_out_data;                                                      // crosser_019:out_data -> rsp_mux_003:sink5_data
	wire          crosser_019_out_ready;                                                     // rsp_mux_003:sink5_ready -> crosser_019:out_ready
	wire   [19:0] crosser_019_out_channel;                                                   // crosser_019:out_channel -> rsp_mux_003:sink5_channel
	wire          crosser_019_out_startofpacket;                                             // crosser_019:out_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          crosser_019_out_endofpacket;                                               // crosser_019:out_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> crosser_020:in_valid
	wire  [124:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> crosser_020:in_data
	wire          rsp_demux_013_src0_ready;                                                  // crosser_020:in_ready -> rsp_demux_013:src0_ready
	wire   [19:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> crosser_020:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                     // crosser_020:out_valid -> rsp_mux_002:sink6_valid
	wire  [124:0] crosser_020_out_data;                                                      // crosser_020:out_data -> rsp_mux_002:sink6_data
	wire          crosser_020_out_ready;                                                     // rsp_mux_002:sink6_ready -> crosser_020:out_ready
	wire   [19:0] crosser_020_out_channel;                                                   // crosser_020:out_channel -> rsp_mux_002:sink6_channel
	wire          crosser_020_out_startofpacket;                                             // crosser_020:out_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          crosser_020_out_endofpacket;                                               // crosser_020:out_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_013_src1_valid;                                                  // rsp_demux_013:src1_valid -> crosser_021:in_valid
	wire  [124:0] rsp_demux_013_src1_data;                                                   // rsp_demux_013:src1_data -> crosser_021:in_data
	wire          rsp_demux_013_src1_ready;                                                  // crosser_021:in_ready -> rsp_demux_013:src1_ready
	wire   [19:0] rsp_demux_013_src1_channel;                                                // rsp_demux_013:src1_channel -> crosser_021:in_channel
	wire          rsp_demux_013_src1_startofpacket;                                          // rsp_demux_013:src1_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                            // rsp_demux_013:src1_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                     // crosser_021:out_valid -> rsp_mux_003:sink6_valid
	wire  [124:0] crosser_021_out_data;                                                      // crosser_021:out_data -> rsp_mux_003:sink6_data
	wire          crosser_021_out_ready;                                                     // rsp_mux_003:sink6_ready -> crosser_021:out_ready
	wire   [19:0] crosser_021_out_channel;                                                   // crosser_021:out_channel -> rsp_mux_003:sink6_channel
	wire          crosser_021_out_startofpacket;                                             // crosser_021:out_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          crosser_021_out_endofpacket;                                               // crosser_021:out_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> crosser_022:in_valid
	wire  [124:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> crosser_022:in_data
	wire          rsp_demux_014_src0_ready;                                                  // crosser_022:in_ready -> rsp_demux_014:src0_ready
	wire   [19:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> crosser_022:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                     // crosser_022:out_valid -> rsp_mux_002:sink7_valid
	wire  [124:0] crosser_022_out_data;                                                      // crosser_022:out_data -> rsp_mux_002:sink7_data
	wire          crosser_022_out_ready;                                                     // rsp_mux_002:sink7_ready -> crosser_022:out_ready
	wire   [19:0] crosser_022_out_channel;                                                   // crosser_022:out_channel -> rsp_mux_002:sink7_channel
	wire          crosser_022_out_startofpacket;                                             // crosser_022:out_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          crosser_022_out_endofpacket;                                               // crosser_022:out_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_014_src1_valid;                                                  // rsp_demux_014:src1_valid -> crosser_023:in_valid
	wire  [124:0] rsp_demux_014_src1_data;                                                   // rsp_demux_014:src1_data -> crosser_023:in_data
	wire          rsp_demux_014_src1_ready;                                                  // crosser_023:in_ready -> rsp_demux_014:src1_ready
	wire   [19:0] rsp_demux_014_src1_channel;                                                // rsp_demux_014:src1_channel -> crosser_023:in_channel
	wire          rsp_demux_014_src1_startofpacket;                                          // rsp_demux_014:src1_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                            // rsp_demux_014:src1_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                     // crosser_023:out_valid -> rsp_mux_003:sink7_valid
	wire  [124:0] crosser_023_out_data;                                                      // crosser_023:out_data -> rsp_mux_003:sink7_data
	wire          crosser_023_out_ready;                                                     // rsp_mux_003:sink7_ready -> crosser_023:out_ready
	wire   [19:0] crosser_023_out_channel;                                                   // crosser_023:out_channel -> rsp_mux_003:sink7_channel
	wire          crosser_023_out_startofpacket;                                             // crosser_023:out_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          crosser_023_out_endofpacket;                                               // crosser_023:out_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire    [0:0] cpu_data_master_limiter_cmd_src_valid;                                     // cpu_data_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [124:0] cpu_data_master_limiter_cmd_src_data;                                      // cpu_data_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                     // limiter_pipeline:in_ready -> cpu_data_master_limiter:cmd_src_ready
	wire   [19:0] cpu_data_master_limiter_cmd_src_channel;                                   // cpu_data_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                             // cpu_data_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                               // cpu_data_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                            // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [124:0] limiter_pipeline_source0_data;                                             // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                            // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [19:0] limiter_pipeline_source0_channel;                                          // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                    // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                      // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [124:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                         // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [19:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                        // limiter_pipeline_001:out_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [124:0] limiter_pipeline_001_source0_data;                                         // limiter_pipeline_001:out_data -> cpu_data_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                        // cpu_data_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [19:0] limiter_pipeline_001_source0_channel;                                      // limiter_pipeline_001:out_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                // limiter_pipeline_001:out_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                  // limiter_pipeline_001:out_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_instruction_master_limiter_cmd_src_valid;                              // cpu_instruction_master_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [124:0] cpu_instruction_master_limiter_cmd_src_data;                               // cpu_instruction_master_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                              // limiter_pipeline_002:in_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [19:0] cpu_instruction_master_limiter_cmd_src_channel;                            // cpu_instruction_master_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                        // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [124:0] limiter_pipeline_002_source0_data;                                         // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                        // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire   [19:0] limiter_pipeline_002_source0_channel;                                      // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                  // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [124:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                     // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire   [19:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                        // limiter_pipeline_003:out_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [124:0] limiter_pipeline_003_source0_data;                                         // limiter_pipeline_003:out_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                        // cpu_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire   [19:0] limiter_pipeline_003_source0_channel;                                      // limiter_pipeline_003:out_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                // limiter_pipeline_003:out_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                  // limiter_pipeline_003:out_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire    [0:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_valid;                          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline_004:in_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline_004:in_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                          // limiter_pipeline_004:in_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline_004:in_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline_004:in_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline_004:in_endofpacket
	wire          limiter_pipeline_004_source0_valid;                                        // limiter_pipeline_004:out_valid -> cmd_demux_002:sink_valid
	wire  [124:0] limiter_pipeline_004_source0_data;                                         // limiter_pipeline_004:out_data -> cmd_demux_002:sink_data
	wire          limiter_pipeline_004_source0_ready;                                        // cmd_demux_002:sink_ready -> limiter_pipeline_004:out_ready
	wire   [19:0] limiter_pipeline_004_source0_channel;                                      // limiter_pipeline_004:out_channel -> cmd_demux_002:sink_channel
	wire          limiter_pipeline_004_source0_startofpacket;                                // limiter_pipeline_004:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          limiter_pipeline_004_source0_endofpacket;                                  // limiter_pipeline_004:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> limiter_pipeline_005:in_valid
	wire  [124:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> limiter_pipeline_005:in_data
	wire          rsp_mux_002_src_ready;                                                     // limiter_pipeline_005:in_ready -> rsp_mux_002:src_ready
	wire   [19:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> limiter_pipeline_005:in_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> limiter_pipeline_005:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> limiter_pipeline_005:in_endofpacket
	wire          limiter_pipeline_005_source0_valid;                                        // limiter_pipeline_005:out_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [124:0] limiter_pipeline_005_source0_data;                                         // limiter_pipeline_005:out_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_005_source0_ready;                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_005:out_ready
	wire   [19:0] limiter_pipeline_005_source0_channel;                                      // limiter_pipeline_005:out_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_005_source0_startofpacket;                                // limiter_pipeline_005:out_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_005_source0_endofpacket;                                  // limiter_pipeline_005:out_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_valid;                          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_006:in_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_006:in_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                          // limiter_pipeline_006:in_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_006:in_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_006:in_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_006:in_endofpacket
	wire          limiter_pipeline_006_source0_valid;                                        // limiter_pipeline_006:out_valid -> cmd_demux_003:sink_valid
	wire  [124:0] limiter_pipeline_006_source0_data;                                         // limiter_pipeline_006:out_data -> cmd_demux_003:sink_data
	wire          limiter_pipeline_006_source0_ready;                                        // cmd_demux_003:sink_ready -> limiter_pipeline_006:out_ready
	wire   [19:0] limiter_pipeline_006_source0_channel;                                      // limiter_pipeline_006:out_channel -> cmd_demux_003:sink_channel
	wire          limiter_pipeline_006_source0_startofpacket;                                // limiter_pipeline_006:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          limiter_pipeline_006_source0_endofpacket;                                  // limiter_pipeline_006:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                     // rsp_mux_003:src_valid -> limiter_pipeline_007:in_valid
	wire  [124:0] rsp_mux_003_src_data;                                                      // rsp_mux_003:src_data -> limiter_pipeline_007:in_data
	wire          rsp_mux_003_src_ready;                                                     // limiter_pipeline_007:in_ready -> rsp_mux_003:src_ready
	wire   [19:0] rsp_mux_003_src_channel;                                                   // rsp_mux_003:src_channel -> limiter_pipeline_007:in_channel
	wire          rsp_mux_003_src_startofpacket;                                             // rsp_mux_003:src_startofpacket -> limiter_pipeline_007:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                               // rsp_mux_003:src_endofpacket -> limiter_pipeline_007:in_endofpacket
	wire          limiter_pipeline_007_source0_valid;                                        // limiter_pipeline_007:out_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [124:0] limiter_pipeline_007_source0_data;                                         // limiter_pipeline_007:out_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_007_source0_ready;                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_007:out_ready
	wire   [19:0] limiter_pipeline_007_source0_channel;                                      // limiter_pipeline_007:out_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_007_source0_startofpacket;                                // limiter_pipeline_007:out_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_007_source0_endofpacket;                                  // limiter_pipeline_007:out_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [124:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                         // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire   [19:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                              // agent_pipeline:out_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [124:0] agent_pipeline_source0_data;                                               // agent_pipeline:out_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                              // jtag_uart_avalon_jtag_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire   [19:0] agent_pipeline_source0_channel;                                            // agent_pipeline:out_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                      // agent_pipeline:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                        // agent_pipeline:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [124:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                // agent_pipeline_001:in_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                          // agent_pipeline_001:out_valid -> router_004:sink_valid
	wire  [124:0] agent_pipeline_001_source0_data;                                           // agent_pipeline_001:out_data -> router_004:sink_data
	wire          agent_pipeline_001_source0_ready;                                          // router_004:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                  // agent_pipeline_001:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                    // agent_pipeline_001:out_endofpacket -> router_004:sink_endofpacket
	wire          alt_vip_mix_0_control_burst_adapter_source0_valid;                         // alt_vip_mix_0_control_burst_adapter:source0_valid -> agent_pipeline_002:in_valid
	wire  [124:0] alt_vip_mix_0_control_burst_adapter_source0_data;                          // alt_vip_mix_0_control_burst_adapter:source0_data -> agent_pipeline_002:in_data
	wire          alt_vip_mix_0_control_burst_adapter_source0_ready;                         // agent_pipeline_002:in_ready -> alt_vip_mix_0_control_burst_adapter:source0_ready
	wire   [19:0] alt_vip_mix_0_control_burst_adapter_source0_channel;                       // alt_vip_mix_0_control_burst_adapter:source0_channel -> agent_pipeline_002:in_channel
	wire          alt_vip_mix_0_control_burst_adapter_source0_startofpacket;                 // alt_vip_mix_0_control_burst_adapter:source0_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          alt_vip_mix_0_control_burst_adapter_source0_endofpacket;                   // alt_vip_mix_0_control_burst_adapter:source0_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                          // agent_pipeline_002:out_valid -> alt_vip_mix_0_control_agent:cp_valid
	wire  [124:0] agent_pipeline_002_source0_data;                                           // agent_pipeline_002:out_data -> alt_vip_mix_0_control_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                          // alt_vip_mix_0_control_agent:cp_ready -> agent_pipeline_002:out_ready
	wire   [19:0] agent_pipeline_002_source0_channel;                                        // agent_pipeline_002:out_channel -> alt_vip_mix_0_control_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                  // agent_pipeline_002:out_startofpacket -> alt_vip_mix_0_control_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                    // agent_pipeline_002:out_endofpacket -> alt_vip_mix_0_control_agent:cp_endofpacket
	wire          alt_vip_mix_0_control_agent_rp_valid;                                      // alt_vip_mix_0_control_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [124:0] alt_vip_mix_0_control_agent_rp_data;                                       // alt_vip_mix_0_control_agent:rp_data -> agent_pipeline_003:in_data
	wire          alt_vip_mix_0_control_agent_rp_ready;                                      // agent_pipeline_003:in_ready -> alt_vip_mix_0_control_agent:rp_ready
	wire          alt_vip_mix_0_control_agent_rp_startofpacket;                              // alt_vip_mix_0_control_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          alt_vip_mix_0_control_agent_rp_endofpacket;                                // alt_vip_mix_0_control_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                          // agent_pipeline_003:out_valid -> router_005:sink_valid
	wire  [124:0] agent_pipeline_003_source0_data;                                           // agent_pipeline_003:out_data -> router_005:sink_data
	wire          agent_pipeline_003_source0_ready;                                          // router_005:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                  // agent_pipeline_003:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                    // agent_pipeline_003:out_endofpacket -> router_005:sink_endofpacket
	wire          alt_vip_cti_0_control_burst_adapter_source0_valid;                         // alt_vip_cti_0_control_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [124:0] alt_vip_cti_0_control_burst_adapter_source0_data;                          // alt_vip_cti_0_control_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          alt_vip_cti_0_control_burst_adapter_source0_ready;                         // agent_pipeline_004:in_ready -> alt_vip_cti_0_control_burst_adapter:source0_ready
	wire   [19:0] alt_vip_cti_0_control_burst_adapter_source0_channel;                       // alt_vip_cti_0_control_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          alt_vip_cti_0_control_burst_adapter_source0_startofpacket;                 // alt_vip_cti_0_control_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          alt_vip_cti_0_control_burst_adapter_source0_endofpacket;                   // alt_vip_cti_0_control_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                          // agent_pipeline_004:out_valid -> alt_vip_cti_0_control_agent:cp_valid
	wire  [124:0] agent_pipeline_004_source0_data;                                           // agent_pipeline_004:out_data -> alt_vip_cti_0_control_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                          // alt_vip_cti_0_control_agent:cp_ready -> agent_pipeline_004:out_ready
	wire   [19:0] agent_pipeline_004_source0_channel;                                        // agent_pipeline_004:out_channel -> alt_vip_cti_0_control_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                  // agent_pipeline_004:out_startofpacket -> alt_vip_cti_0_control_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                    // agent_pipeline_004:out_endofpacket -> alt_vip_cti_0_control_agent:cp_endofpacket
	wire          alt_vip_cti_0_control_agent_rp_valid;                                      // alt_vip_cti_0_control_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [124:0] alt_vip_cti_0_control_agent_rp_data;                                       // alt_vip_cti_0_control_agent:rp_data -> agent_pipeline_005:in_data
	wire          alt_vip_cti_0_control_agent_rp_ready;                                      // agent_pipeline_005:in_ready -> alt_vip_cti_0_control_agent:rp_ready
	wire          alt_vip_cti_0_control_agent_rp_startofpacket;                              // alt_vip_cti_0_control_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          alt_vip_cti_0_control_agent_rp_endofpacket;                                // alt_vip_cti_0_control_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                          // agent_pipeline_005:out_valid -> router_006:sink_valid
	wire  [124:0] agent_pipeline_005_source0_data;                                           // agent_pipeline_005:out_data -> router_006:sink_data
	wire          agent_pipeline_005_source0_ready;                                          // router_006:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                  // agent_pipeline_005:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                    // agent_pipeline_005:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire  [124:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                     // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire   [19:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                          // agent_pipeline_006:out_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire  [124:0] agent_pipeline_006_source0_data;                                           // agent_pipeline_006:out_data -> cpu_jtag_debug_module_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                          // cpu_jtag_debug_module_agent:cp_ready -> agent_pipeline_006:out_ready
	wire   [19:0] agent_pipeline_006_source0_channel;                                        // agent_pipeline_006:out_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                  // agent_pipeline_006:out_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                    // agent_pipeline_006:out_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire          cpu_jtag_debug_module_agent_rp_valid;                                      // cpu_jtag_debug_module_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [124:0] cpu_jtag_debug_module_agent_rp_data;                                       // cpu_jtag_debug_module_agent:rp_data -> agent_pipeline_007:in_data
	wire          cpu_jtag_debug_module_agent_rp_ready;                                      // agent_pipeline_007:in_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire          cpu_jtag_debug_module_agent_rp_startofpacket;                              // cpu_jtag_debug_module_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          cpu_jtag_debug_module_agent_rp_endofpacket;                                // cpu_jtag_debug_module_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                          // agent_pipeline_007:out_valid -> router_007:sink_valid
	wire  [124:0] agent_pipeline_007_source0_data;                                           // agent_pipeline_007:out_data -> router_007:sink_data
	wire          agent_pipeline_007_source0_ready;                                          // router_007:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                  // agent_pipeline_007:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                    // agent_pipeline_007:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> agent_pipeline_008:in_valid
	wire  [124:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> agent_pipeline_008:in_data
	wire          cmd_mux_004_src_ready;                                                     // agent_pipeline_008:in_ready -> cmd_mux_004:src_ready
	wire   [19:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> agent_pipeline_008:in_channel
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                          // agent_pipeline_008:out_valid -> clock_crossing_io_slow_s0_agent:cp_valid
	wire  [124:0] agent_pipeline_008_source0_data;                                           // agent_pipeline_008:out_data -> clock_crossing_io_slow_s0_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                          // clock_crossing_io_slow_s0_agent:cp_ready -> agent_pipeline_008:out_ready
	wire   [19:0] agent_pipeline_008_source0_channel;                                        // agent_pipeline_008:out_channel -> clock_crossing_io_slow_s0_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                  // agent_pipeline_008:out_startofpacket -> clock_crossing_io_slow_s0_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                    // agent_pipeline_008:out_endofpacket -> clock_crossing_io_slow_s0_agent:cp_endofpacket
	wire          clock_crossing_io_slow_s0_agent_rp_valid;                                  // clock_crossing_io_slow_s0_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [124:0] clock_crossing_io_slow_s0_agent_rp_data;                                   // clock_crossing_io_slow_s0_agent:rp_data -> agent_pipeline_009:in_data
	wire          clock_crossing_io_slow_s0_agent_rp_ready;                                  // agent_pipeline_009:in_ready -> clock_crossing_io_slow_s0_agent:rp_ready
	wire          clock_crossing_io_slow_s0_agent_rp_startofpacket;                          // clock_crossing_io_slow_s0_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          clock_crossing_io_slow_s0_agent_rp_endofpacket;                            // clock_crossing_io_slow_s0_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                          // agent_pipeline_009:out_valid -> router_008:sink_valid
	wire  [124:0] agent_pipeline_009_source0_data;                                           // agent_pipeline_009:out_data -> router_008:sink_data
	wire          agent_pipeline_009_source0_ready;                                          // router_008:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                  // agent_pipeline_009:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                    // agent_pipeline_009:out_endofpacket -> router_008:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire  [124:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                     // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire   [19:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                          // agent_pipeline_010:out_valid -> mm_clock_crossing_bridge_1_s0_agent:cp_valid
	wire  [124:0] agent_pipeline_010_source0_data;                                           // agent_pipeline_010:out_data -> mm_clock_crossing_bridge_1_s0_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                          // mm_clock_crossing_bridge_1_s0_agent:cp_ready -> agent_pipeline_010:out_ready
	wire   [19:0] agent_pipeline_010_source0_channel;                                        // agent_pipeline_010:out_channel -> mm_clock_crossing_bridge_1_s0_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                  // agent_pipeline_010:out_startofpacket -> mm_clock_crossing_bridge_1_s0_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                    // agent_pipeline_010:out_endofpacket -> mm_clock_crossing_bridge_1_s0_agent:cp_endofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_valid;                              // mm_clock_crossing_bridge_1_s0_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [124:0] mm_clock_crossing_bridge_1_s0_agent_rp_data;                               // mm_clock_crossing_bridge_1_s0_agent:rp_data -> agent_pipeline_011:in_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_ready;                              // agent_pipeline_011:in_ready -> mm_clock_crossing_bridge_1_s0_agent:rp_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket;                      // mm_clock_crossing_bridge_1_s0_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket;                        // mm_clock_crossing_bridge_1_s0_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                          // agent_pipeline_011:out_valid -> router_009:sink_valid
	wire  [124:0] agent_pipeline_011_source0_data;                                           // agent_pipeline_011:out_data -> router_009:sink_data
	wire          agent_pipeline_011_source0_ready;                                          // router_009:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                  // agent_pipeline_011:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                    // agent_pipeline_011:out_endofpacket -> router_009:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> agent_pipeline_012:in_valid
	wire  [124:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> agent_pipeline_012:in_data
	wire          cmd_mux_006_src_ready;                                                     // agent_pipeline_012:in_ready -> cmd_mux_006:src_ready
	wire   [19:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> agent_pipeline_012:in_channel
	wire          cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                          // agent_pipeline_012:out_valid -> onchip_memory2_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_012_source0_data;                                           // agent_pipeline_012:out_data -> onchip_memory2_s1_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                          // onchip_memory2_s1_agent:cp_ready -> agent_pipeline_012:out_ready
	wire   [19:0] agent_pipeline_012_source0_channel;                                        // agent_pipeline_012:out_channel -> onchip_memory2_s1_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                  // agent_pipeline_012:out_startofpacket -> onchip_memory2_s1_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                    // agent_pipeline_012:out_endofpacket -> onchip_memory2_s1_agent:cp_endofpacket
	wire          onchip_memory2_s1_agent_rp_valid;                                          // onchip_memory2_s1_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [124:0] onchip_memory2_s1_agent_rp_data;                                           // onchip_memory2_s1_agent:rp_data -> agent_pipeline_013:in_data
	wire          onchip_memory2_s1_agent_rp_ready;                                          // agent_pipeline_013:in_ready -> onchip_memory2_s1_agent:rp_ready
	wire          onchip_memory2_s1_agent_rp_startofpacket;                                  // onchip_memory2_s1_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          onchip_memory2_s1_agent_rp_endofpacket;                                    // onchip_memory2_s1_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                          // agent_pipeline_013:out_valid -> router_010:sink_valid
	wire  [124:0] agent_pipeline_013_source0_data;                                           // agent_pipeline_013:out_data -> router_010:sink_data
	wire          agent_pipeline_013_source0_ready;                                          // router_010:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                  // agent_pipeline_013:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                    // agent_pipeline_013:out_endofpacket -> router_010:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> agent_pipeline_014:in_valid
	wire  [124:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> agent_pipeline_014:in_data
	wire          cmd_mux_007_src_ready;                                                     // agent_pipeline_014:in_ready -> cmd_mux_007:src_ready
	wire   [19:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> agent_pipeline_014:in_channel
	wire          cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                          // agent_pipeline_014:out_valid -> uart_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_014_source0_data;                                           // agent_pipeline_014:out_data -> uart_s1_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                          // uart_s1_agent:cp_ready -> agent_pipeline_014:out_ready
	wire   [19:0] agent_pipeline_014_source0_channel;                                        // agent_pipeline_014:out_channel -> uart_s1_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                  // agent_pipeline_014:out_startofpacket -> uart_s1_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                    // agent_pipeline_014:out_endofpacket -> uart_s1_agent:cp_endofpacket
	wire          uart_s1_agent_rp_valid;                                                    // uart_s1_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [124:0] uart_s1_agent_rp_data;                                                     // uart_s1_agent:rp_data -> agent_pipeline_015:in_data
	wire          uart_s1_agent_rp_ready;                                                    // agent_pipeline_015:in_ready -> uart_s1_agent:rp_ready
	wire          uart_s1_agent_rp_startofpacket;                                            // uart_s1_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          uart_s1_agent_rp_endofpacket;                                              // uart_s1_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                          // agent_pipeline_015:out_valid -> router_011:sink_valid
	wire  [124:0] agent_pipeline_015_source0_data;                                           // agent_pipeline_015:out_data -> router_011:sink_data
	wire          agent_pipeline_015_source0_ready;                                          // router_011:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                  // agent_pipeline_015:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                    // agent_pipeline_015:out_endofpacket -> router_011:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> agent_pipeline_016:in_valid
	wire  [124:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> agent_pipeline_016:in_data
	wire          cmd_mux_008_src_ready;                                                     // agent_pipeline_016:in_ready -> cmd_mux_008:src_ready
	wire   [19:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> agent_pipeline_016:in_channel
	wire          cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                          // agent_pipeline_016:out_valid -> timer_stamp_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_016_source0_data;                                           // agent_pipeline_016:out_data -> timer_stamp_s1_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                                          // timer_stamp_s1_agent:cp_ready -> agent_pipeline_016:out_ready
	wire   [19:0] agent_pipeline_016_source0_channel;                                        // agent_pipeline_016:out_channel -> timer_stamp_s1_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                                  // agent_pipeline_016:out_startofpacket -> timer_stamp_s1_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                    // agent_pipeline_016:out_endofpacket -> timer_stamp_s1_agent:cp_endofpacket
	wire          timer_stamp_s1_agent_rp_valid;                                             // timer_stamp_s1_agent:rp_valid -> agent_pipeline_017:in_valid
	wire  [124:0] timer_stamp_s1_agent_rp_data;                                              // timer_stamp_s1_agent:rp_data -> agent_pipeline_017:in_data
	wire          timer_stamp_s1_agent_rp_ready;                                             // agent_pipeline_017:in_ready -> timer_stamp_s1_agent:rp_ready
	wire          timer_stamp_s1_agent_rp_startofpacket;                                     // timer_stamp_s1_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          timer_stamp_s1_agent_rp_endofpacket;                                       // timer_stamp_s1_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                          // agent_pipeline_017:out_valid -> router_012:sink_valid
	wire  [124:0] agent_pipeline_017_source0_data;                                           // agent_pipeline_017:out_data -> router_012:sink_data
	wire          agent_pipeline_017_source0_ready;                                          // router_012:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                                  // agent_pipeline_017:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                    // agent_pipeline_017:out_endofpacket -> router_012:sink_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid;                    // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_valid -> agent_pipeline_018:in_valid
	wire  [124:0] alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data;                     // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_data -> agent_pipeline_018:in_data
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready;                    // agent_pipeline_018:in_ready -> alt_vip_vfr_0_avalon_slave_burst_adapter:source0_ready
	wire   [19:0] alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel;                  // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_channel -> agent_pipeline_018:in_channel
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket;            // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket;              // alt_vip_vfr_0_avalon_slave_burst_adapter:source0_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                          // agent_pipeline_018:out_valid -> alt_vip_vfr_0_avalon_slave_agent:cp_valid
	wire  [124:0] agent_pipeline_018_source0_data;                                           // agent_pipeline_018:out_data -> alt_vip_vfr_0_avalon_slave_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                                          // alt_vip_vfr_0_avalon_slave_agent:cp_ready -> agent_pipeline_018:out_ready
	wire   [19:0] agent_pipeline_018_source0_channel;                                        // agent_pipeline_018:out_channel -> alt_vip_vfr_0_avalon_slave_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                                  // agent_pipeline_018:out_startofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                    // agent_pipeline_018:out_endofpacket -> alt_vip_vfr_0_avalon_slave_agent:cp_endofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_valid;                                 // alt_vip_vfr_0_avalon_slave_agent:rp_valid -> agent_pipeline_019:in_valid
	wire  [124:0] alt_vip_vfr_0_avalon_slave_agent_rp_data;                                  // alt_vip_vfr_0_avalon_slave_agent:rp_data -> agent_pipeline_019:in_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_ready;                                 // agent_pipeline_019:in_ready -> alt_vip_vfr_0_avalon_slave_agent:rp_ready
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket;                         // alt_vip_vfr_0_avalon_slave_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket;                           // alt_vip_vfr_0_avalon_slave_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                          // agent_pipeline_019:out_valid -> router_013:sink_valid
	wire  [124:0] agent_pipeline_019_source0_data;                                           // agent_pipeline_019:out_data -> router_013:sink_data
	wire          agent_pipeline_019_source0_ready;                                          // router_013:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                                  // agent_pipeline_019:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                    // agent_pipeline_019:out_endofpacket -> router_013:sink_endofpacket
	wire          fifo_0_in_burst_adapter_source0_valid;                                     // fifo_0_in_burst_adapter:source0_valid -> agent_pipeline_020:in_valid
	wire  [124:0] fifo_0_in_burst_adapter_source0_data;                                      // fifo_0_in_burst_adapter:source0_data -> agent_pipeline_020:in_data
	wire          fifo_0_in_burst_adapter_source0_ready;                                     // agent_pipeline_020:in_ready -> fifo_0_in_burst_adapter:source0_ready
	wire   [19:0] fifo_0_in_burst_adapter_source0_channel;                                   // fifo_0_in_burst_adapter:source0_channel -> agent_pipeline_020:in_channel
	wire          fifo_0_in_burst_adapter_source0_startofpacket;                             // fifo_0_in_burst_adapter:source0_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          fifo_0_in_burst_adapter_source0_endofpacket;                               // fifo_0_in_burst_adapter:source0_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                                          // agent_pipeline_020:out_valid -> fifo_0_in_agent:cp_valid
	wire  [124:0] agent_pipeline_020_source0_data;                                           // agent_pipeline_020:out_data -> fifo_0_in_agent:cp_data
	wire          agent_pipeline_020_source0_ready;                                          // fifo_0_in_agent:cp_ready -> agent_pipeline_020:out_ready
	wire   [19:0] agent_pipeline_020_source0_channel;                                        // agent_pipeline_020:out_channel -> fifo_0_in_agent:cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                                  // agent_pipeline_020:out_startofpacket -> fifo_0_in_agent:cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                                    // agent_pipeline_020:out_endofpacket -> fifo_0_in_agent:cp_endofpacket
	wire          fifo_0_in_agent_rp_valid;                                                  // fifo_0_in_agent:rp_valid -> agent_pipeline_021:in_valid
	wire  [124:0] fifo_0_in_agent_rp_data;                                                   // fifo_0_in_agent:rp_data -> agent_pipeline_021:in_data
	wire          fifo_0_in_agent_rp_ready;                                                  // agent_pipeline_021:in_ready -> fifo_0_in_agent:rp_ready
	wire          fifo_0_in_agent_rp_startofpacket;                                          // fifo_0_in_agent:rp_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          fifo_0_in_agent_rp_endofpacket;                                            // fifo_0_in_agent:rp_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                                          // agent_pipeline_021:out_valid -> router_014:sink_valid
	wire  [124:0] agent_pipeline_021_source0_data;                                           // agent_pipeline_021:out_data -> router_014:sink_data
	wire          agent_pipeline_021_source0_ready;                                          // router_014:sink_ready -> agent_pipeline_021:out_ready
	wire          agent_pipeline_021_source0_startofpacket;                                  // agent_pipeline_021:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                                    // agent_pipeline_021:out_endofpacket -> router_014:sink_endofpacket
	wire          fifo_0_in_csr_burst_adapter_source0_valid;                                 // fifo_0_in_csr_burst_adapter:source0_valid -> agent_pipeline_022:in_valid
	wire  [124:0] fifo_0_in_csr_burst_adapter_source0_data;                                  // fifo_0_in_csr_burst_adapter:source0_data -> agent_pipeline_022:in_data
	wire          fifo_0_in_csr_burst_adapter_source0_ready;                                 // agent_pipeline_022:in_ready -> fifo_0_in_csr_burst_adapter:source0_ready
	wire   [19:0] fifo_0_in_csr_burst_adapter_source0_channel;                               // fifo_0_in_csr_burst_adapter:source0_channel -> agent_pipeline_022:in_channel
	wire          fifo_0_in_csr_burst_adapter_source0_startofpacket;                         // fifo_0_in_csr_burst_adapter:source0_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          fifo_0_in_csr_burst_adapter_source0_endofpacket;                           // fifo_0_in_csr_burst_adapter:source0_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                                          // agent_pipeline_022:out_valid -> fifo_0_in_csr_agent:cp_valid
	wire  [124:0] agent_pipeline_022_source0_data;                                           // agent_pipeline_022:out_data -> fifo_0_in_csr_agent:cp_data
	wire          agent_pipeline_022_source0_ready;                                          // fifo_0_in_csr_agent:cp_ready -> agent_pipeline_022:out_ready
	wire   [19:0] agent_pipeline_022_source0_channel;                                        // agent_pipeline_022:out_channel -> fifo_0_in_csr_agent:cp_channel
	wire          agent_pipeline_022_source0_startofpacket;                                  // agent_pipeline_022:out_startofpacket -> fifo_0_in_csr_agent:cp_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                                    // agent_pipeline_022:out_endofpacket -> fifo_0_in_csr_agent:cp_endofpacket
	wire          fifo_0_in_csr_agent_rp_valid;                                              // fifo_0_in_csr_agent:rp_valid -> agent_pipeline_023:in_valid
	wire  [124:0] fifo_0_in_csr_agent_rp_data;                                               // fifo_0_in_csr_agent:rp_data -> agent_pipeline_023:in_data
	wire          fifo_0_in_csr_agent_rp_ready;                                              // agent_pipeline_023:in_ready -> fifo_0_in_csr_agent:rp_ready
	wire          fifo_0_in_csr_agent_rp_startofpacket;                                      // fifo_0_in_csr_agent:rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          fifo_0_in_csr_agent_rp_endofpacket;                                        // fifo_0_in_csr_agent:rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                                          // agent_pipeline_023:out_valid -> router_015:sink_valid
	wire  [124:0] agent_pipeline_023_source0_data;                                           // agent_pipeline_023:out_data -> router_015:sink_data
	wire          agent_pipeline_023_source0_ready;                                          // router_015:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                                  // agent_pipeline_023:out_startofpacket -> router_015:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                                    // agent_pipeline_023:out_endofpacket -> router_015:sink_endofpacket
	wire          ledr_s1_burst_adapter_source0_valid;                                       // ledr_s1_burst_adapter:source0_valid -> agent_pipeline_024:in_valid
	wire  [124:0] ledr_s1_burst_adapter_source0_data;                                        // ledr_s1_burst_adapter:source0_data -> agent_pipeline_024:in_data
	wire          ledr_s1_burst_adapter_source0_ready;                                       // agent_pipeline_024:in_ready -> ledr_s1_burst_adapter:source0_ready
	wire   [19:0] ledr_s1_burst_adapter_source0_channel;                                     // ledr_s1_burst_adapter:source0_channel -> agent_pipeline_024:in_channel
	wire          ledr_s1_burst_adapter_source0_startofpacket;                               // ledr_s1_burst_adapter:source0_startofpacket -> agent_pipeline_024:in_startofpacket
	wire          ledr_s1_burst_adapter_source0_endofpacket;                                 // ledr_s1_burst_adapter:source0_endofpacket -> agent_pipeline_024:in_endofpacket
	wire          agent_pipeline_024_source0_valid;                                          // agent_pipeline_024:out_valid -> ledr_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_024_source0_data;                                           // agent_pipeline_024:out_data -> ledr_s1_agent:cp_data
	wire          agent_pipeline_024_source0_ready;                                          // ledr_s1_agent:cp_ready -> agent_pipeline_024:out_ready
	wire   [19:0] agent_pipeline_024_source0_channel;                                        // agent_pipeline_024:out_channel -> ledr_s1_agent:cp_channel
	wire          agent_pipeline_024_source0_startofpacket;                                  // agent_pipeline_024:out_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire          agent_pipeline_024_source0_endofpacket;                                    // agent_pipeline_024:out_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire          ledr_s1_agent_rp_valid;                                                    // ledr_s1_agent:rp_valid -> agent_pipeline_025:in_valid
	wire  [124:0] ledr_s1_agent_rp_data;                                                     // ledr_s1_agent:rp_data -> agent_pipeline_025:in_data
	wire          ledr_s1_agent_rp_ready;                                                    // agent_pipeline_025:in_ready -> ledr_s1_agent:rp_ready
	wire          ledr_s1_agent_rp_startofpacket;                                            // ledr_s1_agent:rp_startofpacket -> agent_pipeline_025:in_startofpacket
	wire          ledr_s1_agent_rp_endofpacket;                                              // ledr_s1_agent:rp_endofpacket -> agent_pipeline_025:in_endofpacket
	wire          agent_pipeline_025_source0_valid;                                          // agent_pipeline_025:out_valid -> router_016:sink_valid
	wire  [124:0] agent_pipeline_025_source0_data;                                           // agent_pipeline_025:out_data -> router_016:sink_data
	wire          agent_pipeline_025_source0_ready;                                          // router_016:sink_ready -> agent_pipeline_025:out_ready
	wire          agent_pipeline_025_source0_startofpacket;                                  // agent_pipeline_025:out_startofpacket -> router_016:sink_startofpacket
	wire          agent_pipeline_025_source0_endofpacket;                                    // agent_pipeline_025:out_endofpacket -> router_016:sink_endofpacket
	wire          key_s1_burst_adapter_source0_valid;                                        // key_s1_burst_adapter:source0_valid -> agent_pipeline_026:in_valid
	wire  [124:0] key_s1_burst_adapter_source0_data;                                         // key_s1_burst_adapter:source0_data -> agent_pipeline_026:in_data
	wire          key_s1_burst_adapter_source0_ready;                                        // agent_pipeline_026:in_ready -> key_s1_burst_adapter:source0_ready
	wire   [19:0] key_s1_burst_adapter_source0_channel;                                      // key_s1_burst_adapter:source0_channel -> agent_pipeline_026:in_channel
	wire          key_s1_burst_adapter_source0_startofpacket;                                // key_s1_burst_adapter:source0_startofpacket -> agent_pipeline_026:in_startofpacket
	wire          key_s1_burst_adapter_source0_endofpacket;                                  // key_s1_burst_adapter:source0_endofpacket -> agent_pipeline_026:in_endofpacket
	wire          agent_pipeline_026_source0_valid;                                          // agent_pipeline_026:out_valid -> key_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_026_source0_data;                                           // agent_pipeline_026:out_data -> key_s1_agent:cp_data
	wire          agent_pipeline_026_source0_ready;                                          // key_s1_agent:cp_ready -> agent_pipeline_026:out_ready
	wire   [19:0] agent_pipeline_026_source0_channel;                                        // agent_pipeline_026:out_channel -> key_s1_agent:cp_channel
	wire          agent_pipeline_026_source0_startofpacket;                                  // agent_pipeline_026:out_startofpacket -> key_s1_agent:cp_startofpacket
	wire          agent_pipeline_026_source0_endofpacket;                                    // agent_pipeline_026:out_endofpacket -> key_s1_agent:cp_endofpacket
	wire          key_s1_agent_rp_valid;                                                     // key_s1_agent:rp_valid -> agent_pipeline_027:in_valid
	wire  [124:0] key_s1_agent_rp_data;                                                      // key_s1_agent:rp_data -> agent_pipeline_027:in_data
	wire          key_s1_agent_rp_ready;                                                     // agent_pipeline_027:in_ready -> key_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                             // key_s1_agent:rp_startofpacket -> agent_pipeline_027:in_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                               // key_s1_agent:rp_endofpacket -> agent_pipeline_027:in_endofpacket
	wire          agent_pipeline_027_source0_valid;                                          // agent_pipeline_027:out_valid -> router_017:sink_valid
	wire  [124:0] agent_pipeline_027_source0_data;                                           // agent_pipeline_027:out_data -> router_017:sink_data
	wire          agent_pipeline_027_source0_ready;                                          // router_017:sink_ready -> agent_pipeline_027:out_ready
	wire          agent_pipeline_027_source0_startofpacket;                                  // agent_pipeline_027:out_startofpacket -> router_017:sink_startofpacket
	wire          agent_pipeline_027_source0_endofpacket;                                    // agent_pipeline_027:out_endofpacket -> router_017:sink_endofpacket
	wire          sw_s1_burst_adapter_source0_valid;                                         // sw_s1_burst_adapter:source0_valid -> agent_pipeline_028:in_valid
	wire  [124:0] sw_s1_burst_adapter_source0_data;                                          // sw_s1_burst_adapter:source0_data -> agent_pipeline_028:in_data
	wire          sw_s1_burst_adapter_source0_ready;                                         // agent_pipeline_028:in_ready -> sw_s1_burst_adapter:source0_ready
	wire   [19:0] sw_s1_burst_adapter_source0_channel;                                       // sw_s1_burst_adapter:source0_channel -> agent_pipeline_028:in_channel
	wire          sw_s1_burst_adapter_source0_startofpacket;                                 // sw_s1_burst_adapter:source0_startofpacket -> agent_pipeline_028:in_startofpacket
	wire          sw_s1_burst_adapter_source0_endofpacket;                                   // sw_s1_burst_adapter:source0_endofpacket -> agent_pipeline_028:in_endofpacket
	wire          agent_pipeline_028_source0_valid;                                          // agent_pipeline_028:out_valid -> sw_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_028_source0_data;                                           // agent_pipeline_028:out_data -> sw_s1_agent:cp_data
	wire          agent_pipeline_028_source0_ready;                                          // sw_s1_agent:cp_ready -> agent_pipeline_028:out_ready
	wire   [19:0] agent_pipeline_028_source0_channel;                                        // agent_pipeline_028:out_channel -> sw_s1_agent:cp_channel
	wire          agent_pipeline_028_source0_startofpacket;                                  // agent_pipeline_028:out_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          agent_pipeline_028_source0_endofpacket;                                    // agent_pipeline_028:out_endofpacket -> sw_s1_agent:cp_endofpacket
	wire          sw_s1_agent_rp_valid;                                                      // sw_s1_agent:rp_valid -> agent_pipeline_029:in_valid
	wire  [124:0] sw_s1_agent_rp_data;                                                       // sw_s1_agent:rp_data -> agent_pipeline_029:in_data
	wire          sw_s1_agent_rp_ready;                                                      // agent_pipeline_029:in_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                              // sw_s1_agent:rp_startofpacket -> agent_pipeline_029:in_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                                // sw_s1_agent:rp_endofpacket -> agent_pipeline_029:in_endofpacket
	wire          agent_pipeline_029_source0_valid;                                          // agent_pipeline_029:out_valid -> router_018:sink_valid
	wire  [124:0] agent_pipeline_029_source0_data;                                           // agent_pipeline_029:out_data -> router_018:sink_data
	wire          agent_pipeline_029_source0_ready;                                          // router_018:sink_ready -> agent_pipeline_029:out_ready
	wire          agent_pipeline_029_source0_startofpacket;                                  // agent_pipeline_029:out_startofpacket -> router_018:sink_startofpacket
	wire          agent_pipeline_029_source0_endofpacket;                                    // agent_pipeline_029:out_endofpacket -> router_018:sink_endofpacket
	wire          timer_0_s1_burst_adapter_source0_valid;                                    // timer_0_s1_burst_adapter:source0_valid -> agent_pipeline_030:in_valid
	wire  [124:0] timer_0_s1_burst_adapter_source0_data;                                     // timer_0_s1_burst_adapter:source0_data -> agent_pipeline_030:in_data
	wire          timer_0_s1_burst_adapter_source0_ready;                                    // agent_pipeline_030:in_ready -> timer_0_s1_burst_adapter:source0_ready
	wire   [19:0] timer_0_s1_burst_adapter_source0_channel;                                  // timer_0_s1_burst_adapter:source0_channel -> agent_pipeline_030:in_channel
	wire          timer_0_s1_burst_adapter_source0_startofpacket;                            // timer_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_030:in_startofpacket
	wire          timer_0_s1_burst_adapter_source0_endofpacket;                              // timer_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_030:in_endofpacket
	wire          agent_pipeline_030_source0_valid;                                          // agent_pipeline_030:out_valid -> timer_0_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_030_source0_data;                                           // agent_pipeline_030:out_data -> timer_0_s1_agent:cp_data
	wire          agent_pipeline_030_source0_ready;                                          // timer_0_s1_agent:cp_ready -> agent_pipeline_030:out_ready
	wire   [19:0] agent_pipeline_030_source0_channel;                                        // agent_pipeline_030:out_channel -> timer_0_s1_agent:cp_channel
	wire          agent_pipeline_030_source0_startofpacket;                                  // agent_pipeline_030:out_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_030_source0_endofpacket;                                    // agent_pipeline_030:out_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                 // timer_0_s1_agent:rp_valid -> agent_pipeline_031:in_valid
	wire  [124:0] timer_0_s1_agent_rp_data;                                                  // timer_0_s1_agent:rp_data -> agent_pipeline_031:in_data
	wire          timer_0_s1_agent_rp_ready;                                                 // agent_pipeline_031:in_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                         // timer_0_s1_agent:rp_startofpacket -> agent_pipeline_031:in_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                           // timer_0_s1_agent:rp_endofpacket -> agent_pipeline_031:in_endofpacket
	wire          agent_pipeline_031_source0_valid;                                          // agent_pipeline_031:out_valid -> router_019:sink_valid
	wire  [124:0] agent_pipeline_031_source0_data;                                           // agent_pipeline_031:out_data -> router_019:sink_data
	wire          agent_pipeline_031_source0_ready;                                          // router_019:sink_ready -> agent_pipeline_031:out_ready
	wire          agent_pipeline_031_source0_startofpacket;                                  // agent_pipeline_031:out_startofpacket -> router_019:sink_startofpacket
	wire          agent_pipeline_031_source0_endofpacket;                                    // agent_pipeline_031:out_endofpacket -> router_019:sink_endofpacket
	wire          i2c_data_0_s1_burst_adapter_source0_valid;                                 // i2c_data_0_s1_burst_adapter:source0_valid -> agent_pipeline_032:in_valid
	wire  [124:0] i2c_data_0_s1_burst_adapter_source0_data;                                  // i2c_data_0_s1_burst_adapter:source0_data -> agent_pipeline_032:in_data
	wire          i2c_data_0_s1_burst_adapter_source0_ready;                                 // agent_pipeline_032:in_ready -> i2c_data_0_s1_burst_adapter:source0_ready
	wire   [19:0] i2c_data_0_s1_burst_adapter_source0_channel;                               // i2c_data_0_s1_burst_adapter:source0_channel -> agent_pipeline_032:in_channel
	wire          i2c_data_0_s1_burst_adapter_source0_startofpacket;                         // i2c_data_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_032:in_startofpacket
	wire          i2c_data_0_s1_burst_adapter_source0_endofpacket;                           // i2c_data_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_032:in_endofpacket
	wire          agent_pipeline_032_source0_valid;                                          // agent_pipeline_032:out_valid -> i2c_data_0_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_032_source0_data;                                           // agent_pipeline_032:out_data -> i2c_data_0_s1_agent:cp_data
	wire          agent_pipeline_032_source0_ready;                                          // i2c_data_0_s1_agent:cp_ready -> agent_pipeline_032:out_ready
	wire   [19:0] agent_pipeline_032_source0_channel;                                        // agent_pipeline_032:out_channel -> i2c_data_0_s1_agent:cp_channel
	wire          agent_pipeline_032_source0_startofpacket;                                  // agent_pipeline_032:out_startofpacket -> i2c_data_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_032_source0_endofpacket;                                    // agent_pipeline_032:out_endofpacket -> i2c_data_0_s1_agent:cp_endofpacket
	wire          i2c_data_0_s1_agent_rp_valid;                                              // i2c_data_0_s1_agent:rp_valid -> agent_pipeline_033:in_valid
	wire  [124:0] i2c_data_0_s1_agent_rp_data;                                               // i2c_data_0_s1_agent:rp_data -> agent_pipeline_033:in_data
	wire          i2c_data_0_s1_agent_rp_ready;                                              // agent_pipeline_033:in_ready -> i2c_data_0_s1_agent:rp_ready
	wire          i2c_data_0_s1_agent_rp_startofpacket;                                      // i2c_data_0_s1_agent:rp_startofpacket -> agent_pipeline_033:in_startofpacket
	wire          i2c_data_0_s1_agent_rp_endofpacket;                                        // i2c_data_0_s1_agent:rp_endofpacket -> agent_pipeline_033:in_endofpacket
	wire          agent_pipeline_033_source0_valid;                                          // agent_pipeline_033:out_valid -> router_020:sink_valid
	wire  [124:0] agent_pipeline_033_source0_data;                                           // agent_pipeline_033:out_data -> router_020:sink_data
	wire          agent_pipeline_033_source0_ready;                                          // router_020:sink_ready -> agent_pipeline_033:out_ready
	wire          agent_pipeline_033_source0_startofpacket;                                  // agent_pipeline_033:out_startofpacket -> router_020:sink_startofpacket
	wire          agent_pipeline_033_source0_endofpacket;                                    // agent_pipeline_033:out_endofpacket -> router_020:sink_endofpacket
	wire          i2c_end_flag_0_s1_burst_adapter_source0_valid;                             // i2c_end_flag_0_s1_burst_adapter:source0_valid -> agent_pipeline_034:in_valid
	wire  [124:0] i2c_end_flag_0_s1_burst_adapter_source0_data;                              // i2c_end_flag_0_s1_burst_adapter:source0_data -> agent_pipeline_034:in_data
	wire          i2c_end_flag_0_s1_burst_adapter_source0_ready;                             // agent_pipeline_034:in_ready -> i2c_end_flag_0_s1_burst_adapter:source0_ready
	wire   [19:0] i2c_end_flag_0_s1_burst_adapter_source0_channel;                           // i2c_end_flag_0_s1_burst_adapter:source0_channel -> agent_pipeline_034:in_channel
	wire          i2c_end_flag_0_s1_burst_adapter_source0_startofpacket;                     // i2c_end_flag_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_034:in_startofpacket
	wire          i2c_end_flag_0_s1_burst_adapter_source0_endofpacket;                       // i2c_end_flag_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_034:in_endofpacket
	wire          agent_pipeline_034_source0_valid;                                          // agent_pipeline_034:out_valid -> i2c_end_flag_0_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_034_source0_data;                                           // agent_pipeline_034:out_data -> i2c_end_flag_0_s1_agent:cp_data
	wire          agent_pipeline_034_source0_ready;                                          // i2c_end_flag_0_s1_agent:cp_ready -> agent_pipeline_034:out_ready
	wire   [19:0] agent_pipeline_034_source0_channel;                                        // agent_pipeline_034:out_channel -> i2c_end_flag_0_s1_agent:cp_channel
	wire          agent_pipeline_034_source0_startofpacket;                                  // agent_pipeline_034:out_startofpacket -> i2c_end_flag_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_034_source0_endofpacket;                                    // agent_pipeline_034:out_endofpacket -> i2c_end_flag_0_s1_agent:cp_endofpacket
	wire          i2c_end_flag_0_s1_agent_rp_valid;                                          // i2c_end_flag_0_s1_agent:rp_valid -> agent_pipeline_035:in_valid
	wire  [124:0] i2c_end_flag_0_s1_agent_rp_data;                                           // i2c_end_flag_0_s1_agent:rp_data -> agent_pipeline_035:in_data
	wire          i2c_end_flag_0_s1_agent_rp_ready;                                          // agent_pipeline_035:in_ready -> i2c_end_flag_0_s1_agent:rp_ready
	wire          i2c_end_flag_0_s1_agent_rp_startofpacket;                                  // i2c_end_flag_0_s1_agent:rp_startofpacket -> agent_pipeline_035:in_startofpacket
	wire          i2c_end_flag_0_s1_agent_rp_endofpacket;                                    // i2c_end_flag_0_s1_agent:rp_endofpacket -> agent_pipeline_035:in_endofpacket
	wire          agent_pipeline_035_source0_valid;                                          // agent_pipeline_035:out_valid -> router_021:sink_valid
	wire  [124:0] agent_pipeline_035_source0_data;                                           // agent_pipeline_035:out_data -> router_021:sink_data
	wire          agent_pipeline_035_source0_ready;                                          // router_021:sink_ready -> agent_pipeline_035:out_ready
	wire          agent_pipeline_035_source0_startofpacket;                                  // agent_pipeline_035:out_startofpacket -> router_021:sink_startofpacket
	wire          agent_pipeline_035_source0_endofpacket;                                    // agent_pipeline_035:out_endofpacket -> router_021:sink_endofpacket
	wire          i2c_start_flag_0_s1_burst_adapter_source0_valid;                           // i2c_start_flag_0_s1_burst_adapter:source0_valid -> agent_pipeline_036:in_valid
	wire  [124:0] i2c_start_flag_0_s1_burst_adapter_source0_data;                            // i2c_start_flag_0_s1_burst_adapter:source0_data -> agent_pipeline_036:in_data
	wire          i2c_start_flag_0_s1_burst_adapter_source0_ready;                           // agent_pipeline_036:in_ready -> i2c_start_flag_0_s1_burst_adapter:source0_ready
	wire   [19:0] i2c_start_flag_0_s1_burst_adapter_source0_channel;                         // i2c_start_flag_0_s1_burst_adapter:source0_channel -> agent_pipeline_036:in_channel
	wire          i2c_start_flag_0_s1_burst_adapter_source0_startofpacket;                   // i2c_start_flag_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_036:in_startofpacket
	wire          i2c_start_flag_0_s1_burst_adapter_source0_endofpacket;                     // i2c_start_flag_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_036:in_endofpacket
	wire          agent_pipeline_036_source0_valid;                                          // agent_pipeline_036:out_valid -> i2c_start_flag_0_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_036_source0_data;                                           // agent_pipeline_036:out_data -> i2c_start_flag_0_s1_agent:cp_data
	wire          agent_pipeline_036_source0_ready;                                          // i2c_start_flag_0_s1_agent:cp_ready -> agent_pipeline_036:out_ready
	wire   [19:0] agent_pipeline_036_source0_channel;                                        // agent_pipeline_036:out_channel -> i2c_start_flag_0_s1_agent:cp_channel
	wire          agent_pipeline_036_source0_startofpacket;                                  // agent_pipeline_036:out_startofpacket -> i2c_start_flag_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_036_source0_endofpacket;                                    // agent_pipeline_036:out_endofpacket -> i2c_start_flag_0_s1_agent:cp_endofpacket
	wire          i2c_start_flag_0_s1_agent_rp_valid;                                        // i2c_start_flag_0_s1_agent:rp_valid -> agent_pipeline_037:in_valid
	wire  [124:0] i2c_start_flag_0_s1_agent_rp_data;                                         // i2c_start_flag_0_s1_agent:rp_data -> agent_pipeline_037:in_data
	wire          i2c_start_flag_0_s1_agent_rp_ready;                                        // agent_pipeline_037:in_ready -> i2c_start_flag_0_s1_agent:rp_ready
	wire          i2c_start_flag_0_s1_agent_rp_startofpacket;                                // i2c_start_flag_0_s1_agent:rp_startofpacket -> agent_pipeline_037:in_startofpacket
	wire          i2c_start_flag_0_s1_agent_rp_endofpacket;                                  // i2c_start_flag_0_s1_agent:rp_endofpacket -> agent_pipeline_037:in_endofpacket
	wire          agent_pipeline_037_source0_valid;                                          // agent_pipeline_037:out_valid -> router_022:sink_valid
	wire  [124:0] agent_pipeline_037_source0_data;                                           // agent_pipeline_037:out_data -> router_022:sink_data
	wire          agent_pipeline_037_source0_ready;                                          // router_022:sink_ready -> agent_pipeline_037:out_ready
	wire          agent_pipeline_037_source0_startofpacket;                                  // agent_pipeline_037:out_startofpacket -> router_022:sink_startofpacket
	wire          agent_pipeline_037_source0_endofpacket;                                    // agent_pipeline_037:out_endofpacket -> router_022:sink_endofpacket
	wire          play_out_0_s1_burst_adapter_source0_valid;                                 // play_out_0_s1_burst_adapter:source0_valid -> agent_pipeline_038:in_valid
	wire  [124:0] play_out_0_s1_burst_adapter_source0_data;                                  // play_out_0_s1_burst_adapter:source0_data -> agent_pipeline_038:in_data
	wire          play_out_0_s1_burst_adapter_source0_ready;                                 // agent_pipeline_038:in_ready -> play_out_0_s1_burst_adapter:source0_ready
	wire   [19:0] play_out_0_s1_burst_adapter_source0_channel;                               // play_out_0_s1_burst_adapter:source0_channel -> agent_pipeline_038:in_channel
	wire          play_out_0_s1_burst_adapter_source0_startofpacket;                         // play_out_0_s1_burst_adapter:source0_startofpacket -> agent_pipeline_038:in_startofpacket
	wire          play_out_0_s1_burst_adapter_source0_endofpacket;                           // play_out_0_s1_burst_adapter:source0_endofpacket -> agent_pipeline_038:in_endofpacket
	wire          agent_pipeline_038_source0_valid;                                          // agent_pipeline_038:out_valid -> play_out_0_s1_agent:cp_valid
	wire  [124:0] agent_pipeline_038_source0_data;                                           // agent_pipeline_038:out_data -> play_out_0_s1_agent:cp_data
	wire          agent_pipeline_038_source0_ready;                                          // play_out_0_s1_agent:cp_ready -> agent_pipeline_038:out_ready
	wire   [19:0] agent_pipeline_038_source0_channel;                                        // agent_pipeline_038:out_channel -> play_out_0_s1_agent:cp_channel
	wire          agent_pipeline_038_source0_startofpacket;                                  // agent_pipeline_038:out_startofpacket -> play_out_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_038_source0_endofpacket;                                    // agent_pipeline_038:out_endofpacket -> play_out_0_s1_agent:cp_endofpacket
	wire          play_out_0_s1_agent_rp_valid;                                              // play_out_0_s1_agent:rp_valid -> agent_pipeline_039:in_valid
	wire  [124:0] play_out_0_s1_agent_rp_data;                                               // play_out_0_s1_agent:rp_data -> agent_pipeline_039:in_data
	wire          play_out_0_s1_agent_rp_ready;                                              // agent_pipeline_039:in_ready -> play_out_0_s1_agent:rp_ready
	wire          play_out_0_s1_agent_rp_startofpacket;                                      // play_out_0_s1_agent:rp_startofpacket -> agent_pipeline_039:in_startofpacket
	wire          play_out_0_s1_agent_rp_endofpacket;                                        // play_out_0_s1_agent:rp_endofpacket -> agent_pipeline_039:in_endofpacket
	wire          agent_pipeline_039_source0_valid;                                          // agent_pipeline_039:out_valid -> router_023:sink_valid
	wire  [124:0] agent_pipeline_039_source0_data;                                           // agent_pipeline_039:out_data -> router_023:sink_data
	wire          agent_pipeline_039_source0_ready;                                          // router_023:sink_ready -> agent_pipeline_039:out_ready
	wire          agent_pipeline_039_source0_startofpacket;                                  // agent_pipeline_039:out_startofpacket -> router_023:sink_startofpacket
	wire          agent_pipeline_039_source0_endofpacket;                                    // agent_pipeline_039:out_endofpacket -> router_023:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                    // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                     // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                             // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                              // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                             // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          alt_vip_mix_0_control_agent_rdata_fifo_out_valid;                          // alt_vip_mix_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] alt_vip_mix_0_control_agent_rdata_fifo_out_data;                           // alt_vip_mix_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          alt_vip_mix_0_control_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_001:in_0_ready -> alt_vip_mix_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                         // avalon_st_adapter_001:out_0_valid -> alt_vip_mix_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                          // avalon_st_adapter_001:out_0_data -> alt_vip_mix_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                         // alt_vip_mix_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                         // avalon_st_adapter_001:out_0_error -> alt_vip_mix_0_control_agent:rdata_fifo_sink_error
	wire          alt_vip_cti_0_control_agent_rdata_fifo_out_valid;                          // alt_vip_cti_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] alt_vip_cti_0_control_agent_rdata_fifo_out_data;                           // alt_vip_cti_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          alt_vip_cti_0_control_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_002:in_0_ready -> alt_vip_cti_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                         // avalon_st_adapter_002:out_0_valid -> alt_vip_cti_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                          // avalon_st_adapter_002:out_0_data -> alt_vip_cti_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                         // alt_vip_cti_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                         // avalon_st_adapter_002:out_0_error -> alt_vip_cti_0_control_agent:rdata_fifo_sink_error
	wire          cpu_jtag_debug_module_agent_rdata_fifo_out_valid;                          // cpu_jtag_debug_module_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_out_data;                           // cpu_jtag_debug_module_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_003:in_0_ready -> cpu_jtag_debug_module_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                         // avalon_st_adapter_003:out_0_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                          // avalon_st_adapter_003:out_0_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                         // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                         // avalon_st_adapter_003:out_0_error -> cpu_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          clock_crossing_io_slow_s0_agent_rdata_fifo_out_valid;                      // clock_crossing_io_slow_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] clock_crossing_io_slow_s0_agent_rdata_fifo_out_data;                       // clock_crossing_io_slow_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          clock_crossing_io_slow_s0_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_004:in_0_ready -> clock_crossing_io_slow_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                         // avalon_st_adapter_004:out_0_valid -> clock_crossing_io_slow_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                          // avalon_st_adapter_004:out_0_data -> clock_crossing_io_slow_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                         // clock_crossing_io_slow_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                         // avalon_st_adapter_004:out_0_error -> clock_crossing_io_slow_s0_agent:rdata_fifo_sink_error
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_valid;                  // mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_data;                   // mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_005:in_0_ready -> mm_clock_crossing_bridge_1_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                         // avalon_st_adapter_005:out_0_valid -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                          // avalon_st_adapter_005:out_0_data -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                         // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                         // avalon_st_adapter_005:out_0_error -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_error
	wire          onchip_memory2_s1_agent_rdata_fifo_out_valid;                              // onchip_memory2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] onchip_memory2_s1_agent_rdata_fifo_out_data;                               // onchip_memory2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          onchip_memory2_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_006:in_0_ready -> onchip_memory2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                         // avalon_st_adapter_006:out_0_valid -> onchip_memory2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                          // avalon_st_adapter_006:out_0_data -> onchip_memory2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                         // onchip_memory2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                         // avalon_st_adapter_006:out_0_error -> onchip_memory2_s1_agent:rdata_fifo_sink_error
	wire          uart_s1_agent_rdata_fifo_out_valid;                                        // uart_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] uart_s1_agent_rdata_fifo_out_data;                                         // uart_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          uart_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_007:in_0_ready -> uart_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                         // avalon_st_adapter_007:out_0_valid -> uart_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                          // avalon_st_adapter_007:out_0_data -> uart_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                         // uart_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                         // avalon_st_adapter_007:out_0_error -> uart_s1_agent:rdata_fifo_sink_error
	wire          timer_stamp_s1_agent_rdata_fifo_out_valid;                                 // timer_stamp_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] timer_stamp_s1_agent_rdata_fifo_out_data;                                  // timer_stamp_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          timer_stamp_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_008:in_0_ready -> timer_stamp_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                         // avalon_st_adapter_008:out_0_valid -> timer_stamp_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                          // avalon_st_adapter_008:out_0_data -> timer_stamp_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                         // timer_stamp_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                         // avalon_st_adapter_008:out_0_error -> timer_stamp_s1_agent:rdata_fifo_sink_error
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid;                     // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data;                      // alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_009:in_0_ready -> alt_vip_vfr_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                         // avalon_st_adapter_009:out_0_valid -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                          // avalon_st_adapter_009:out_0_data -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                         // alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                         // avalon_st_adapter_009:out_0_error -> alt_vip_vfr_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          fifo_0_in_agent_rdata_fifo_out_valid;                                      // fifo_0_in_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] fifo_0_in_agent_rdata_fifo_out_data;                                       // fifo_0_in_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          fifo_0_in_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_010:in_0_ready -> fifo_0_in_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                         // avalon_st_adapter_010:out_0_valid -> fifo_0_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                          // avalon_st_adapter_010:out_0_data -> fifo_0_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                         // fifo_0_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                         // avalon_st_adapter_010:out_0_error -> fifo_0_in_agent:rdata_fifo_sink_error
	wire          fifo_0_in_csr_agent_rdata_fifo_out_valid;                                  // fifo_0_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] fifo_0_in_csr_agent_rdata_fifo_out_data;                                   // fifo_0_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          fifo_0_in_csr_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_011:in_0_ready -> fifo_0_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                         // avalon_st_adapter_011:out_0_valid -> fifo_0_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                          // avalon_st_adapter_011:out_0_data -> fifo_0_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                         // fifo_0_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                         // avalon_st_adapter_011:out_0_error -> fifo_0_in_csr_agent:rdata_fifo_sink_error
	wire          ledr_s1_agent_rdata_fifo_out_valid;                                        // ledr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_out_data;                                         // ledr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          ledr_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_012:in_0_ready -> ledr_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                         // avalon_st_adapter_012:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                          // avalon_st_adapter_012:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                         // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                         // avalon_st_adapter_012:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire          key_s1_agent_rdata_fifo_out_valid;                                         // key_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] key_s1_agent_rdata_fifo_out_data;                                          // key_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          key_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_013:in_0_ready -> key_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                         // avalon_st_adapter_013:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                          // avalon_st_adapter_013:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                         // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                         // avalon_st_adapter_013:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_out_valid;                                          // sw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_out_data;                                           // sw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          sw_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_014:in_0_ready -> sw_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                         // avalon_st_adapter_014:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                          // avalon_st_adapter_014:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                         // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                         // avalon_st_adapter_014:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                     // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                      // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_015:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                         // avalon_st_adapter_015:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                          // avalon_st_adapter_015:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                         // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                         // avalon_st_adapter_015:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          i2c_data_0_s1_agent_rdata_fifo_out_valid;                                  // i2c_data_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] i2c_data_0_s1_agent_rdata_fifo_out_data;                                   // i2c_data_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          i2c_data_0_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_016:in_0_ready -> i2c_data_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                         // avalon_st_adapter_016:out_0_valid -> i2c_data_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                          // avalon_st_adapter_016:out_0_data -> i2c_data_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                         // i2c_data_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                         // avalon_st_adapter_016:out_0_error -> i2c_data_0_s1_agent:rdata_fifo_sink_error
	wire          i2c_end_flag_0_s1_agent_rdata_fifo_out_valid;                              // i2c_end_flag_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] i2c_end_flag_0_s1_agent_rdata_fifo_out_data;                               // i2c_end_flag_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          i2c_end_flag_0_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_017:in_0_ready -> i2c_end_flag_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                         // avalon_st_adapter_017:out_0_valid -> i2c_end_flag_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                          // avalon_st_adapter_017:out_0_data -> i2c_end_flag_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                         // i2c_end_flag_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                         // avalon_st_adapter_017:out_0_error -> i2c_end_flag_0_s1_agent:rdata_fifo_sink_error
	wire          i2c_start_flag_0_s1_agent_rdata_fifo_out_valid;                            // i2c_start_flag_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] i2c_start_flag_0_s1_agent_rdata_fifo_out_data;                             // i2c_start_flag_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          i2c_start_flag_0_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_018:in_0_ready -> i2c_start_flag_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                         // avalon_st_adapter_018:out_0_valid -> i2c_start_flag_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                          // avalon_st_adapter_018:out_0_data -> i2c_start_flag_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                         // i2c_start_flag_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                         // avalon_st_adapter_018:out_0_error -> i2c_start_flag_0_s1_agent:rdata_fifo_sink_error
	wire          play_out_0_s1_agent_rdata_fifo_out_valid;                                  // play_out_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] play_out_0_s1_agent_rdata_fifo_out_data;                                   // play_out_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          play_out_0_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_019:in_0_ready -> play_out_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                         // avalon_st_adapter_019:out_0_valid -> play_out_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                          // avalon_st_adapter_019:out_0_data -> play_out_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                         // play_out_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                         // avalon_st_adapter_019:out_0_error -> play_out_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (pll_sys_outclk0_clk),                                                //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (pll_sys_outclk0_clk),                                                       //                       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (pll_sys_outclk0_clk),                                //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (2),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_mix_0_control_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (alt_vip_mix_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_mix_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (alt_vip_mix_0_control_agent_m0_read),          //                         .read
		.uav_write              (alt_vip_mix_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (alt_vip_mix_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (alt_vip_mix_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (alt_vip_mix_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (alt_vip_mix_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (alt_vip_mix_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (alt_vip_mix_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (alt_vip_mix_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (alt_vip_mix_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (alt_vip_mix_0_control_write),                  //                         .write
		.av_readdata            (alt_vip_mix_0_control_readdata),               //                         .readdata
		.av_writedata           (alt_vip_mix_0_control_writedata),              //                         .writedata
		.av_chipselect          (alt_vip_mix_0_control_chipselect),             //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_cti_0_control_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (alt_vip_cti_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_cti_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (alt_vip_cti_0_control_agent_m0_read),          //                         .read
		.uav_write              (alt_vip_cti_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (alt_vip_cti_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (alt_vip_cti_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (alt_vip_cti_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (alt_vip_cti_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (alt_vip_cti_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (alt_vip_cti_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (alt_vip_cti_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (alt_vip_cti_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (alt_vip_cti_0_control_write),                  //                         .write
		.av_read                (alt_vip_cti_0_control_read),                   //                         .read
		.av_readdata            (alt_vip_cti_0_control_readdata),               //                         .readdata
		.av_writedata           (alt_vip_cti_0_control_writedata),              //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata            (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_crossing_io_slow_s0_translator (
		.clk                    (pll_sys_outclk0_clk),                              //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (clock_crossing_io_slow_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (clock_crossing_io_slow_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (clock_crossing_io_slow_s0_agent_m0_read),          //                         .read
		.uav_write              (clock_crossing_io_slow_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (clock_crossing_io_slow_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (clock_crossing_io_slow_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (clock_crossing_io_slow_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (clock_crossing_io_slow_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (clock_crossing_io_slow_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (clock_crossing_io_slow_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (clock_crossing_io_slow_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (clock_crossing_io_slow_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (clock_crossing_io_slow_s0_write),                  //                         .write
		.av_read                (clock_crossing_io_slow_s0_read),                   //                         .read
		.av_readdata            (clock_crossing_io_slow_s0_readdata),               //                         .readdata
		.av_writedata           (clock_crossing_io_slow_s0_writedata),              //                         .writedata
		.av_burstcount          (clock_crossing_io_slow_s0_burstcount),             //                         .burstcount
		.av_byteenable          (clock_crossing_io_slow_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (clock_crossing_io_slow_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (clock_crossing_io_slow_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (clock_crossing_io_slow_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_clock_crossing_bridge_1_s0_translator (
		.clk                    (pll_sys_outclk0_clk),                                  //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (mm_clock_crossing_bridge_1_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_1_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mm_clock_crossing_bridge_1_s0_agent_m0_read),          //                         .read
		.uav_write              (mm_clock_crossing_bridge_1_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_1_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_1_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mm_clock_crossing_bridge_1_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mm_clock_crossing_bridge_1_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mm_clock_crossing_bridge_1_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (mm_clock_crossing_bridge_1_s0_write),                  //                         .write
		.av_read                (mm_clock_crossing_bridge_1_s0_read),                   //                         .read
		.av_readdata            (mm_clock_crossing_bridge_1_s0_readdata),               //                         .readdata
		.av_writedata           (mm_clock_crossing_bridge_1_s0_writedata),              //                         .writedata
		.av_burstcount          (mm_clock_crossing_bridge_1_s0_burstcount),             //                         .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_1_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (mm_clock_crossing_bridge_1_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (mm_clock_crossing_bridge_1_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (mm_clock_crossing_bridge_1_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                         //                      clk.clk
		.reset                  (jtag_uart_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (onchip_memory2_s1_agent_m0_read),             //                         .read
		.uav_write              (onchip_memory2_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (onchip_memory2_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (onchip_memory2_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (onchip_memory2_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (onchip_memory2_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (onchip_memory2_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (onchip_memory2_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_s1_write),                     //                         .write
		.av_readdata            (onchip_memory2_s1_readdata),                  //                         .readdata
		.av_writedata           (onchip_memory2_s1_writedata),                 //                         .writedata
		.av_byteenable          (onchip_memory2_s1_byteenable),                //                         .byteenable
		.av_chipselect          (onchip_memory2_s1_chipselect),                //                         .chipselect
		.av_clken               (onchip_memory2_s1_clken),                     //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                     //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (uart_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (uart_s1_agent_m0_read),                   //                         .read
		.uav_write              (uart_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (uart_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (uart_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (uart_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (uart_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (uart_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (uart_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (uart_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (uart_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (uart_s1_write),                           //                         .write
		.av_read                (uart_s1_read),                            //                         .read
		.av_readdata            (uart_s1_readdata),                        //                         .readdata
		.av_writedata           (uart_s1_writedata),                       //                         .writedata
		.av_begintransfer       (uart_s1_begintransfer),                   //                         .begintransfer
		.av_chipselect          (uart_s1_chipselect),                      //                         .chipselect
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_stamp_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                     //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_stamp_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (timer_stamp_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (timer_stamp_s1_agent_m0_read),            //                         .read
		.uav_write              (timer_stamp_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (timer_stamp_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (timer_stamp_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (timer_stamp_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (timer_stamp_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (timer_stamp_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (timer_stamp_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (timer_stamp_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (timer_stamp_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (timer_stamp_s1_write),                    //                         .write
		.av_readdata            (timer_stamp_s1_readdata),                 //                         .readdata
		.av_writedata           (timer_stamp_s1_writedata),                //                         .writedata
		.av_chipselect          (timer_stamp_s1_chipselect),               //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_0_avalon_slave_translator (
		.clk                    (pll_sys_outclk0_clk),                               //                      clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (alt_vip_vfr_0_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (alt_vip_vfr_0_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (alt_vip_vfr_0_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (alt_vip_vfr_0_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (alt_vip_vfr_0_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_0_avalon_slave_write),                  //                         .write
		.av_read                (alt_vip_vfr_0_avalon_slave_read),                   //                         .read
		.av_readdata            (alt_vip_vfr_0_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (alt_vip_vfr_0_avalon_slave_writedata),              //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_0_in_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_0_in_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_0_in_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (fifo_0_in_agent_m0_read),                     //                         .read
		.uav_write              (fifo_0_in_agent_m0_write),                    //                         .write
		.uav_waitrequest        (fifo_0_in_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (fifo_0_in_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (fifo_0_in_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (fifo_0_in_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (fifo_0_in_agent_m0_writedata),                //                         .writedata
		.uav_lock               (fifo_0_in_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (fifo_0_in_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (fifo_0_in_address),                           //      avalon_anti_slave_0.address
		.av_write               (fifo_0_in_write),                             //                         .write
		.av_writedata           (fifo_0_in_writedata),                         //                         .writedata
		.av_waitrequest         (fifo_0_in_waitrequest),                       //                         .waitrequest
		.av_read                (),                                            //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),        //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_0_in_csr_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_0_in_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_0_in_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (fifo_0_in_csr_agent_m0_read),                 //                         .read
		.uav_write              (fifo_0_in_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (fifo_0_in_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (fifo_0_in_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (fifo_0_in_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (fifo_0_in_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (fifo_0_in_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (fifo_0_in_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (fifo_0_in_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (fifo_0_in_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (fifo_0_in_csr_write),                         //                         .write
		.av_read                (fifo_0_in_csr_read),                          //                         .read
		.av_readdata            (fifo_0_in_csr_readdata),                      //                         .readdata
		.av_writedata           (fifo_0_in_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (pll_sys_outclk2_clk),                    //                      clk.clk
		.reset                  (ledr_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                  //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ledr_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                          //                         .write
		.av_readdata            (ledr_s1_readdata),                       //                         .readdata
		.av_writedata           (ledr_s1_writedata),                      //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                       //              (terminated)
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (pll_sys_outclk2_clk),                    //                      clk.clk
		.reset                  (ledr_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                   //                         .read
		.uav_write              (key_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (key_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                           //                         .write
		.av_readdata            (key_s1_readdata),                        //                         .readdata
		.av_writedata           (key_s1_writedata),                       //                         .writedata
		.av_chipselect          (key_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                       //              (terminated)
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (pll_sys_outclk2_clk),                    //                      clk.clk
		.reset                  (ledr_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                    //                         .read
		.uav_write              (sw_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (sw_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (sw_s1_write),                            //                         .write
		.av_readdata            (sw_s1_readdata),                         //                         .readdata
		.av_writedata           (sw_s1_writedata),                        //                         .writedata
		.av_chipselect          (sw_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                       //              (terminated)
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                    //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (timer_0_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                            //                         .write
		.av_readdata            (timer_0_s1_readdata),                         //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                        //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_data_0_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_data_0_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_data_0_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (i2c_data_0_s1_agent_m0_read),                 //                         .read
		.uav_write              (i2c_data_0_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (i2c_data_0_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (i2c_data_0_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (i2c_data_0_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (i2c_data_0_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (i2c_data_0_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (i2c_data_0_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (i2c_data_0_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (i2c_data_0_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (i2c_data_0_s1_write),                         //                         .write
		.av_readdata            (i2c_data_0_s1_readdata),                      //                         .readdata
		.av_writedata           (i2c_data_0_s1_writedata),                     //                         .writedata
		.av_chipselect          (i2c_data_0_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_end_flag_0_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_end_flag_0_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_end_flag_0_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (i2c_end_flag_0_s1_agent_m0_read),             //                         .read
		.uav_write              (i2c_end_flag_0_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (i2c_end_flag_0_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (i2c_end_flag_0_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (i2c_end_flag_0_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (i2c_end_flag_0_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (i2c_end_flag_0_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (i2c_end_flag_0_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (i2c_end_flag_0_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (i2c_end_flag_0_s1_address),                   //      avalon_anti_slave_0.address
		.av_readdata            (i2c_end_flag_0_s1_readdata),                  //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_start_flag_0_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_start_flag_0_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_start_flag_0_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (i2c_start_flag_0_s1_agent_m0_read),           //                         .read
		.uav_write              (i2c_start_flag_0_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (i2c_start_flag_0_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (i2c_start_flag_0_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (i2c_start_flag_0_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (i2c_start_flag_0_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (i2c_start_flag_0_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (i2c_start_flag_0_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (i2c_start_flag_0_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (i2c_start_flag_0_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (i2c_start_flag_0_s1_write),                   //                         .write
		.av_readdata            (i2c_start_flag_0_s1_readdata),                //                         .readdata
		.av_writedata           (i2c_start_flag_0_s1_writedata),               //                         .writedata
		.av_chipselect          (i2c_start_flag_0_s1_chipselect),              //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) play_out_0_s1_translator (
		.clk                    (clk_50_clk_clk),                              //                      clk.clk
		.reset                  (fifo_0_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (play_out_0_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (play_out_0_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (play_out_0_s1_agent_m0_read),                 //                         .read
		.uav_write              (play_out_0_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (play_out_0_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (play_out_0_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (play_out_0_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (play_out_0_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (play_out_0_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (play_out_0_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (play_out_0_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (play_out_0_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (play_out_0_s1_write),                         //                         .write
		.av_readdata            (play_out_0_s1_readdata),                      //                         .readdata
		.av_writedata           (play_out_0_s1_writedata),                     //                         .writedata
		.av_chipselect          (play_out_0_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (pll_sys_outclk0_clk),                                                       //       clk.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (89),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_QOS_L                 (90),
		.PKT_QOS_H                 (90),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.ID                        (2)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_50_clk_clk),                                                       //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (pll_sys_outclk0_clk),                                          //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                 //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                 //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                  //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                           //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                               //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                          //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                                    //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_mix_0_control_agent (
		.clk                     (pll_sys_outclk0_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (alt_vip_mix_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_mix_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_mix_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_mix_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_mix_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_mix_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_mix_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_mix_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_mix_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_mix_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_mix_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_mix_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_mix_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_mix_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_mix_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_mix_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                     //                .channel
		.rf_sink_ready           (alt_vip_mix_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_mix_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_mix_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_mix_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_mix_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_mix_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_mix_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_mix_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_mix_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_mix_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (alt_vip_mix_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_mix_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_mix_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_mix_0_control_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (alt_vip_mix_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_mix_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_mix_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_mix_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_mix_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_mix_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_mix_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_mix_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_mix_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_mix_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_mix_0_control_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                              //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (alt_vip_mix_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (alt_vip_mix_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (alt_vip_mix_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (alt_vip_mix_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (alt_vip_mix_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (alt_vip_mix_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_cti_0_control_agent (
		.clk                     (pll_sys_outclk0_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (alt_vip_cti_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_cti_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_cti_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_cti_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_cti_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_cti_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_cti_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_cti_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_cti_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_cti_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_cti_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_cti_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_cti_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_cti_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_cti_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_cti_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                     //                .channel
		.rf_sink_ready           (alt_vip_cti_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_cti_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_cti_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_cti_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_cti_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_cti_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_cti_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_cti_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_cti_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_cti_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (alt_vip_cti_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_cti_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_cti_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cti_0_control_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (alt_vip_cti_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_cti_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_cti_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_cti_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_cti_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_cti_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_cti_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_cti_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_cti_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_cti_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cti_0_control_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                              //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (alt_vip_cti_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (alt_vip_cti_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (alt_vip_cti_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (alt_vip_cti_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (alt_vip_cti_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (alt_vip_cti_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (pll_sys_outclk0_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                     //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                              //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_jtag_debug_module_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clock_crossing_io_slow_s0_agent (
		.clk                     (pll_sys_outclk0_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (clock_crossing_io_slow_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (clock_crossing_io_slow_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (clock_crossing_io_slow_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (clock_crossing_io_slow_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (clock_crossing_io_slow_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (clock_crossing_io_slow_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (clock_crossing_io_slow_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (clock_crossing_io_slow_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (clock_crossing_io_slow_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (clock_crossing_io_slow_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (clock_crossing_io_slow_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (clock_crossing_io_slow_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (clock_crossing_io_slow_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (clock_crossing_io_slow_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (clock_crossing_io_slow_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (clock_crossing_io_slow_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                           //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                           //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                            //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                     //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                         //                .channel
		.rf_sink_ready           (clock_crossing_io_slow_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (clock_crossing_io_slow_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (clock_crossing_io_slow_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (clock_crossing_io_slow_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (clock_crossing_io_slow_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (clock_crossing_io_slow_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (clock_crossing_io_slow_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (clock_crossing_io_slow_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (clock_crossing_io_slow_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (clock_crossing_io_slow_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (clock_crossing_io_slow_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_crossing_io_slow_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (clock_crossing_io_slow_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_crossing_io_slow_s0_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (clock_crossing_io_slow_s0_agent_rf_source_data),             //        in.data
		.in_valid          (clock_crossing_io_slow_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (clock_crossing_io_slow_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clock_crossing_io_slow_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clock_crossing_io_slow_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clock_crossing_io_slow_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clock_crossing_io_slow_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clock_crossing_io_slow_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clock_crossing_io_slow_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clock_crossing_io_slow_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_crossing_io_slow_s0_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (clock_crossing_io_slow_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (clock_crossing_io_slow_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (clock_crossing_io_slow_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (clock_crossing_io_slow_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (clock_crossing_io_slow_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (clock_crossing_io_slow_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_clock_crossing_bridge_1_s0_agent (
		.clk                     (pll_sys_outclk0_clk),                                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (mm_clock_crossing_bridge_1_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mm_clock_crossing_bridge_1_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mm_clock_crossing_bridge_1_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mm_clock_crossing_bridge_1_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mm_clock_crossing_bridge_1_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mm_clock_crossing_bridge_1_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mm_clock_crossing_bridge_1_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (mm_clock_crossing_bridge_1_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mm_clock_crossing_bridge_1_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (mm_clock_crossing_bridge_1_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (mm_clock_crossing_bridge_1_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                               //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                               //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                                //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                         //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                             //                .channel
		.rf_sink_ready           (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mm_clock_crossing_bridge_1_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mm_clock_crossing_bridge_1_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mm_clock_crossing_bridge_1_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (97),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_1_s0_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_1_s0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_clock_crossing_bridge_1_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_clock_crossing_bridge_1_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_1_s0_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                                      //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                                //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                   //              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                   //                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                    //                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),             //                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                 //                .channel
		.rf_sink_ready           (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_memory2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                          //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_memory2_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_memory2_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_memory2_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_memory2_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_memory2_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                      //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (uart_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (uart_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (uart_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (uart_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (uart_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (uart_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (uart_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (uart_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (uart_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (uart_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (uart_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (uart_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (uart_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (uart_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (uart_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (uart_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_014_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),       //                .channel
		.rf_sink_ready           (uart_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (uart_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (uart_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (uart_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (uart_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (uart_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (uart_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (uart_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (uart_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (uart_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),        //                .error
		.rdata_fifo_src_ready    (uart_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (uart_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                      //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (uart_s1_agent_rf_source_data),             //        in.data
		.in_valid          (uart_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (uart_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (uart_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (uart_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (uart_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (uart_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (uart_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (uart_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (uart_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (uart_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (uart_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (uart_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (uart_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (uart_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_stamp_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                             //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (timer_stamp_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_stamp_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_stamp_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_stamp_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_stamp_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_stamp_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_stamp_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_stamp_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_stamp_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_stamp_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_stamp_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_stamp_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_stamp_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_stamp_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_stamp_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_stamp_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),                //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),                //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),                 //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),          //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),              //                .channel
		.rf_sink_ready           (timer_stamp_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_stamp_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_stamp_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_stamp_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_stamp_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_stamp_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_stamp_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_stamp_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_stamp_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_stamp_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),               //                .error
		.rdata_fifo_src_ready    (timer_stamp_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_stamp_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_stamp_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_stamp_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                             //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (timer_stamp_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_stamp_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_stamp_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_stamp_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_stamp_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_stamp_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_stamp_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_stamp_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_stamp_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_stamp_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_stamp_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                       //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (timer_stamp_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (timer_stamp_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (timer_stamp_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (timer_stamp_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (timer_stamp_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (timer_stamp_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_0_avalon_slave_agent (
		.clk                     (pll_sys_outclk0_clk),                                         //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (alt_vip_vfr_0_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_vfr_0_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_vfr_0_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_0_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_vfr_0_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_vfr_0_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_0_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_vfr_0_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_vfr_0_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_vfr_0_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_vfr_0_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_0_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_vfr_0_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_vfr_0_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),                            //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),                            //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),                             //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),                      //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),                          //                .channel
		.rf_sink_ready           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_0_avalon_slave_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_0_avalon_slave_agent_rdata_fifo (
		.clk               (pll_sys_outclk0_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_0_in_agent (
		.clk                     (clk_50_clk_clk),                              //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fifo_0_in_agent_m0_address),                  //              m0.address
		.m0_burstcount           (fifo_0_in_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (fifo_0_in_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (fifo_0_in_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (fifo_0_in_agent_m0_lock),                     //                .lock
		.m0_readdata             (fifo_0_in_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (fifo_0_in_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (fifo_0_in_agent_m0_read),                     //                .read
		.m0_waitrequest          (fifo_0_in_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (fifo_0_in_agent_m0_writedata),                //                .writedata
		.m0_write                (fifo_0_in_agent_m0_write),                    //                .write
		.rp_endofpacket          (fifo_0_in_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (fifo_0_in_agent_rp_ready),                    //                .ready
		.rp_valid                (fifo_0_in_agent_rp_valid),                    //                .valid
		.rp_data                 (fifo_0_in_agent_rp_data),                     //                .data
		.rp_startofpacket        (fifo_0_in_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (agent_pipeline_020_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_020_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_020_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_020_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_020_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_020_source0_channel),          //                .channel
		.rf_sink_ready           (fifo_0_in_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (fifo_0_in_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (fifo_0_in_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (fifo_0_in_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (fifo_0_in_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (fifo_0_in_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (fifo_0_in_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (fifo_0_in_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (fifo_0_in_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (fifo_0_in_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),           //                .error
		.rdata_fifo_src_ready    (fifo_0_in_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_0_in_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (fifo_0_in_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_0_in_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_0_in_agent_rf_source_data),              //        in.data
		.in_valid          (fifo_0_in_agent_rf_source_valid),             //          .valid
		.in_ready          (fifo_0_in_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (fifo_0_in_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (fifo_0_in_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (fifo_0_in_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (fifo_0_in_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (fifo_0_in_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (fifo_0_in_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (fifo_0_in_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_0_in_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_0_in_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (fifo_0_in_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (fifo_0_in_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (fifo_0_in_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (fifo_0_in_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (fifo_0_in_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_0_in_csr_agent (
		.clk                     (clk_50_clk_clk),                                 //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (fifo_0_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fifo_0_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fifo_0_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fifo_0_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fifo_0_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (fifo_0_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fifo_0_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fifo_0_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (fifo_0_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fifo_0_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (fifo_0_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (fifo_0_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fifo_0_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (fifo_0_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (fifo_0_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (fifo_0_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_022_source0_ready),               //              cp.ready
		.cp_valid                (agent_pipeline_022_source0_valid),               //                .valid
		.cp_data                 (agent_pipeline_022_source0_data),                //                .data
		.cp_startofpacket        (agent_pipeline_022_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_022_source0_endofpacket),         //                .endofpacket
		.cp_channel              (agent_pipeline_022_source0_channel),             //                .channel
		.rf_sink_ready           (fifo_0_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fifo_0_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fifo_0_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fifo_0_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fifo_0_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fifo_0_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fifo_0_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fifo_0_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fifo_0_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fifo_0_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),              //                .error
		.rdata_fifo_src_ready    (fifo_0_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_0_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fifo_0_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_0_in_csr_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                 //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fifo_0_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_0_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_0_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_0_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_0_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_0_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_0_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_0_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_0_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_0_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_0_in_csr_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_0_in_csr_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (fifo_0_in_csr_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (fifo_0_in_csr_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (fifo_0_in_csr_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (fifo_0_in_csr_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (fifo_0_in_csr_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (pll_sys_outclk2_clk),                      //             clk.clk
		.reset                   (ledr_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_024_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_024_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_024_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_024_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_024_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_024_source0_channel),       //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),        //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk2_clk),                      //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk2_clk),                    //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ledr_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ledr_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ledr_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ledr_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ledr_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_startofpacket  (1'b0),                                   // (terminated)
		.in_endofpacket    (1'b0),                                   // (terminated)
		.out_startofpacket (),                                       // (terminated)
		.out_endofpacket   (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (pll_sys_outclk2_clk),                      //             clk.clk
		.reset                   (ledr_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (key_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (key_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (agent_pipeline_026_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_026_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_026_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_026_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_026_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_026_source0_channel),       //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),        //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk2_clk),                     //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk2_clk),                    //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (key_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (key_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (key_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (key_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (key_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_startofpacket  (1'b0),                                   // (terminated)
		.in_endofpacket    (1'b0),                                   // (terminated)
		.out_startofpacket (),                                       // (terminated)
		.out_endofpacket   (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (pll_sys_outclk2_clk),                      //             clk.clk
		.reset                   (ledr_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (agent_pipeline_028_source0_ready),         //              cp.ready
		.cp_valid                (agent_pipeline_028_source0_valid),         //                .valid
		.cp_data                 (agent_pipeline_028_source0_data),          //                .data
		.cp_startofpacket        (agent_pipeline_028_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (agent_pipeline_028_source0_endofpacket),   //                .endofpacket
		.cp_channel              (agent_pipeline_028_source0_channel),       //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),        //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk2_clk),                    //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (pll_sys_outclk2_clk),                    //       clk.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_startofpacket  (1'b0),                                   // (terminated)
		.in_endofpacket    (1'b0),                                   // (terminated)
		.out_startofpacket (),                                       // (terminated)
		.out_endofpacket   (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_50_clk_clk),                              //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_030_source0_ready),            //              cp.ready
		.cp_valid                (agent_pipeline_030_source0_valid),            //                .valid
		.cp_data                 (agent_pipeline_030_source0_data),             //                .data
		.cp_startofpacket        (agent_pipeline_030_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (agent_pipeline_030_source0_endofpacket),      //                .endofpacket
		.cp_channel              (agent_pipeline_030_source0_channel),          //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_data_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                 //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (i2c_data_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_data_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_data_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_data_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_data_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_data_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_data_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_data_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_data_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_data_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_data_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_data_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_data_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_data_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_data_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_data_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_032_source0_ready),               //              cp.ready
		.cp_valid                (agent_pipeline_032_source0_valid),               //                .valid
		.cp_data                 (agent_pipeline_032_source0_data),                //                .data
		.cp_startofpacket        (agent_pipeline_032_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_032_source0_endofpacket),         //                .endofpacket
		.cp_channel              (agent_pipeline_032_source0_channel),             //                .channel
		.rf_sink_ready           (i2c_data_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_data_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_data_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_data_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_data_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_data_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_data_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_data_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_data_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_data_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),              //                .error
		.rdata_fifo_src_ready    (i2c_data_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_data_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_data_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_data_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                 //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (i2c_data_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_data_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_data_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_data_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_data_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_data_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_data_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_data_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_data_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_data_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_data_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_data_0_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (i2c_data_0_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (i2c_data_0_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (i2c_data_0_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (i2c_data_0_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (i2c_data_0_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_end_flag_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                     //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (i2c_end_flag_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_end_flag_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_end_flag_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_end_flag_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_end_flag_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_end_flag_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_end_flag_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_end_flag_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_end_flag_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_end_flag_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_end_flag_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_end_flag_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_end_flag_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_end_flag_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_end_flag_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_end_flag_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_034_source0_ready),                   //              cp.ready
		.cp_valid                (agent_pipeline_034_source0_valid),                   //                .valid
		.cp_data                 (agent_pipeline_034_source0_data),                    //                .data
		.cp_startofpacket        (agent_pipeline_034_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_034_source0_endofpacket),             //                .endofpacket
		.cp_channel              (agent_pipeline_034_source0_channel),                 //                .channel
		.rf_sink_ready           (i2c_end_flag_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_end_flag_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_end_flag_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_end_flag_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_end_flag_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_end_flag_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_end_flag_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_end_flag_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_end_flag_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_end_flag_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (i2c_end_flag_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_end_flag_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_end_flag_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_end_flag_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                     //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (i2c_end_flag_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_end_flag_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_end_flag_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_end_flag_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_end_flag_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_end_flag_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_end_flag_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_end_flag_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_end_flag_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_end_flag_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_end_flag_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (i2c_end_flag_0_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_end_flag_0_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_end_flag_0_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_end_flag_0_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_end_flag_0_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_end_flag_0_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_start_flag_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                       //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (i2c_start_flag_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_start_flag_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_start_flag_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_start_flag_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_start_flag_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_start_flag_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_start_flag_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_start_flag_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_start_flag_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_start_flag_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_start_flag_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_start_flag_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_start_flag_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_start_flag_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_start_flag_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_start_flag_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_036_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_036_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_036_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_036_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_036_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_036_source0_channel),                   //                .channel
		.rf_sink_ready           (i2c_start_flag_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_start_flag_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_start_flag_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_start_flag_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_start_flag_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_start_flag_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_start_flag_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_start_flag_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_start_flag_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_start_flag_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (i2c_start_flag_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_start_flag_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_start_flag_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_start_flag_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                       //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (i2c_start_flag_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_start_flag_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_start_flag_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_start_flag_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_start_flag_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_start_flag_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_start_flag_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_start_flag_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_start_flag_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_start_flag_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_start_flag_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                 //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (i2c_start_flag_0_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (i2c_start_flag_0_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (i2c_start_flag_0_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (i2c_start_flag_0_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (i2c_start_flag_0_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (i2c_start_flag_0_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) play_out_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                 //             clk.clk
		.reset                   (fifo_0_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (play_out_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (play_out_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (play_out_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (play_out_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (play_out_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (play_out_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (play_out_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (play_out_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (play_out_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (play_out_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (play_out_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (play_out_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (play_out_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (play_out_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (play_out_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (play_out_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_038_source0_ready),               //              cp.ready
		.cp_valid                (agent_pipeline_038_source0_valid),               //                .valid
		.cp_data                 (agent_pipeline_038_source0_data),                //                .data
		.cp_startofpacket        (agent_pipeline_038_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_038_source0_endofpacket),         //                .endofpacket
		.cp_channel              (agent_pipeline_038_source0_channel),             //                .channel
		.rf_sink_ready           (play_out_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (play_out_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (play_out_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (play_out_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (play_out_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (play_out_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (play_out_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (play_out_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (play_out_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (play_out_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),              //                .error
		.rdata_fifo_src_ready    (play_out_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (play_out_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (play_out_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) play_out_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                 //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (play_out_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (play_out_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (play_out_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (play_out_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (play_out_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (play_out_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (play_out_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (play_out_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (play_out_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (play_out_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) play_out_0_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (play_out_0_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (play_out_0_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (play_out_0_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (play_out_0_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (play_out_0_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (play_out_0_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	DE1_SoC_QSYS_mm_interconnect_1_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                        //       src.ready
		.src_valid          (router_src_valid),                        //          .valid
		.src_data           (router_src_data),                         //          .data
		.src_channel        (router_src_channel),                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                //          .valid
		.src_data           (router_002_src_data),                                                 //          .data
		.src_channel        (router_002_src_channel),                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                //       src.ready
		.src_valid          (router_003_src_valid),                                                //          .valid
		.src_data           (router_003_src_data),                                                 //          .data
		.src_channel        (router_003_src_channel),                                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (agent_pipeline_001_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_001_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),      //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                        //       src.ready
		.src_valid          (router_004_src_valid),                        //          .valid
		.src_data           (router_004_src_data),                         //          .data
		.src_channel        (router_004_src_channel),                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_005 router_006 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                     //       src.ready
		.src_valid          (router_006_src_valid),                     //          .valid
		.src_data           (router_006_src_data),                      //          .data
		.src_channel        (router_006_src_channel),                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (agent_pipeline_007_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_007_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_004 router_008 (
		.sink_ready         (agent_pipeline_009_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_009_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_004 router_009 (
		.sink_ready         (agent_pipeline_011_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_011_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_007 router_010 (
		.sink_ready         (agent_pipeline_013_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_013_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),      //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                        //       src.ready
		.src_valid          (router_010_src_valid),                        //          .valid
		.src_data           (router_010_src_data),                         //          .data
		.src_channel        (router_010_src_channel),                      //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_004 router_011 (
		.sink_ready         (agent_pipeline_015_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_015_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_004 router_012 (
		.sink_ready         (agent_pipeline_017_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_017_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_013 (
		.sink_ready         (agent_pipeline_019_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_019_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_014 (
		.sink_ready         (agent_pipeline_021_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_021_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_021_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_021_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_021_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                        //       src.ready
		.src_valid          (router_014_src_valid),                        //          .valid
		.src_data           (router_014_src_data),                         //          .data
		.src_channel        (router_014_src_channel),                      //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_015 (
		.sink_ready         (agent_pipeline_023_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_023_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                        //       src.ready
		.src_valid          (router_015_src_valid),                        //          .valid
		.src_data           (router_015_src_data),                         //          .data
		.src_channel        (router_015_src_channel),                      //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_016 (
		.sink_ready         (agent_pipeline_025_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_025_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_025_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_025_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_025_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk2_clk),                      //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_016_src_ready),                     //       src.ready
		.src_valid          (router_016_src_valid),                     //          .valid
		.src_data           (router_016_src_data),                      //          .data
		.src_channel        (router_016_src_channel),                   //          .channel
		.src_startofpacket  (router_016_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_017 (
		.sink_ready         (agent_pipeline_027_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_027_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_027_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_027_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_027_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk2_clk),                      //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_017_src_ready),                     //       src.ready
		.src_valid          (router_017_src_valid),                     //          .valid
		.src_data           (router_017_src_data),                      //          .data
		.src_channel        (router_017_src_channel),                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_018 (
		.sink_ready         (agent_pipeline_029_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_029_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_029_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_029_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_029_source0_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk2_clk),                      //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_019 (
		.sink_ready         (agent_pipeline_031_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_031_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_031_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_031_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_031_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                        //       src.ready
		.src_valid          (router_019_src_valid),                        //          .valid
		.src_data           (router_019_src_data),                         //          .data
		.src_channel        (router_019_src_channel),                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_020 (
		.sink_ready         (agent_pipeline_033_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_033_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_033_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_033_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_033_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                        //       src.ready
		.src_valid          (router_020_src_valid),                        //          .valid
		.src_data           (router_020_src_data),                         //          .data
		.src_channel        (router_020_src_channel),                      //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_021 (
		.sink_ready         (agent_pipeline_035_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_035_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_035_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_035_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_035_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                        //       src.ready
		.src_valid          (router_021_src_valid),                        //          .valid
		.src_data           (router_021_src_data),                         //          .data
		.src_channel        (router_021_src_channel),                      //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_022 (
		.sink_ready         (agent_pipeline_037_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_037_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_037_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_037_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_037_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                        //       src.ready
		.src_valid          (router_022_src_valid),                        //          .valid
		.src_data           (router_022_src_data),                         //          .data
		.src_channel        (router_022_src_channel),                      //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_router_013 router_023 (
		.sink_ready         (agent_pipeline_039_source0_ready),            //      sink.ready
		.sink_valid         (agent_pipeline_039_source0_valid),            //          .valid
		.sink_data          (agent_pipeline_039_source0_data),             //          .data
		.sink_startofpacket (agent_pipeline_039_source0_startofpacket),    //          .startofpacket
		.sink_endofpacket   (agent_pipeline_039_source0_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                        //       src.ready
		.src_valid          (router_023_src_valid),                        //          .valid
		.src_data           (router_023_src_data),                         //          .data
		.src_channel        (router_023_src_channel),                      //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (136),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (pll_sys_outclk0_clk),                           //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),            //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),            //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),          //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),             //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),    //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (pll_sys_outclk0_clk),                                  //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                   //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                 //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                    //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),             //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                //          .valid
		.cmd_sink_data          (router_002_src_data),                                                 //          .data
		.cmd_sink_channel       (router_002_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_005_source0_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_005_source0_valid),                                  //          .valid
		.rsp_sink_channel       (limiter_pipeline_005_source0_channel),                                //          .channel
		.rsp_sink_data          (limiter_pipeline_005_source0_data),                                   //          .data
		.rsp_sink_startofpacket (limiter_pipeline_005_source0_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_005_source0_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_50_clk_clk),                                                      //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                                //          .valid
		.cmd_sink_data          (router_003_src_data),                                                 //          .data
		.cmd_sink_channel       (router_003_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_007_source0_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_007_source0_valid),                                  //          .valid
		.rsp_sink_channel       (limiter_pipeline_007_source0_channel),                                //          .channel
		.rsp_sink_data          (limiter_pipeline_007_source0_data),                                   //          .data
		.rsp_sink_startofpacket (limiter_pipeline_007_source0_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_007_source0_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alt_vip_mix_0_control_burst_adapter (
		.clk                   (pll_sys_outclk0_clk),                                       //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                     //          .ready
		.source0_valid         (alt_vip_mix_0_control_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alt_vip_mix_0_control_burst_adapter_source0_data),          //          .data
		.source0_channel       (alt_vip_mix_0_control_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alt_vip_mix_0_control_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alt_vip_mix_0_control_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alt_vip_mix_0_control_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alt_vip_cti_0_control_burst_adapter (
		.clk                   (pll_sys_outclk0_clk),                                       //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                     //          .ready
		.source0_valid         (alt_vip_cti_0_control_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alt_vip_cti_0_control_burst_adapter_source0_data),          //          .data
		.source0_channel       (alt_vip_cti_0_control_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alt_vip_cti_0_control_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alt_vip_cti_0_control_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alt_vip_cti_0_control_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alt_vip_vfr_0_avalon_slave_burst_adapter (
		.clk                   (pll_sys_outclk0_clk),                                            //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                          //          .ready
		.source0_valid         (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_0_in_burst_adapter (
		.clk                   (clk_50_clk_clk),                                //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                          //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                         //          .ready
		.source0_valid         (fifo_0_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_0_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_0_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_0_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_0_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_0_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_0_in_csr_burst_adapter (
		.clk                   (clk_50_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                              //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                             //          .ready
		.source0_valid         (fifo_0_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_0_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_0_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_0_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_0_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_0_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ledr_s1_burst_adapter (
		.clk                   (pll_sys_outclk2_clk),                         //       cr0.clk
		.reset                 (ledr_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                        //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                       //          .ready
		.source0_valid         (ledr_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ledr_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ledr_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ledr_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ledr_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ledr_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) key_s1_burst_adapter (
		.clk                   (pll_sys_outclk2_clk),                        //       cr0.clk
		.reset                 (ledr_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                      //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                       //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                    //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                      //          .ready
		.source0_valid         (key_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (key_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (key_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (key_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (key_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (key_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sw_s1_burst_adapter (
		.clk                   (pll_sys_outclk2_clk),                       //       cr0.clk
		.reset                 (ledr_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                     //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                      //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                   //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),               //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                     //          .ready
		.source0_valid         (sw_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sw_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sw_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sw_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sw_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sw_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) timer_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                 //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                           //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                          //          .ready
		.source0_valid         (timer_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (timer_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (timer_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (timer_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (timer_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (timer_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_data_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                              //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                             //          .ready
		.source0_valid         (i2c_data_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_data_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_data_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_data_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_data_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_data_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_end_flag_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                        //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                 //          .ready
		.source0_valid         (i2c_end_flag_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_end_flag_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_end_flag_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_end_flag_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_end_flag_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_end_flag_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_start_flag_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                          //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                   //          .ready
		.source0_valid         (i2c_start_flag_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_start_flag_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_start_flag_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_start_flag_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_start_flag_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_start_flag_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (75),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (70),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) play_out_0_s1_burst_adapter (
		.clk                   (clk_50_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                              //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                             //          .ready
		.source0_valid         (play_out_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (play_out_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (play_out_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (play_out_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (play_out_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (play_out_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),          //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),        //          .channel
		.sink_data          (limiter_pipeline_source0_data),           //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_src1_data),                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                    //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                    //          .valid
		.src2_data          (cmd_demux_src2_data),                     //          .data
		.src2_channel       (cmd_demux_src2_channel),                  //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                    //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                    //          .valid
		.src3_data          (cmd_demux_src3_data),                     //          .data
		.src3_channel       (cmd_demux_src3_channel),                  //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),              //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                    //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                    //          .valid
		.src4_data          (cmd_demux_src4_data),                     //          .data
		.src4_channel       (cmd_demux_src4_channel),                  //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),              //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                    //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                    //          .valid
		.src5_data          (cmd_demux_src5_data),                     //          .data
		.src5_channel       (cmd_demux_src5_channel),                  //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),              //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                    //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                    //          .valid
		.src6_data          (cmd_demux_src6_data),                     //          .data
		.src6_channel       (cmd_demux_src6_channel),                  //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),            //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),              //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                    //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                    //          .valid
		.src7_data          (cmd_demux_src7_data),                     //          .data
		.src7_channel       (cmd_demux_src7_channel),                  //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),            //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),              //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                    //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                    //          .valid
		.src8_data          (cmd_demux_src8_data),                     //          .data
		.src8_channel       (cmd_demux_src8_channel),                  //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),            //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_sys_outclk0_clk),                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                 (clk_50_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (limiter_pipeline_004_source0_ready),                                  //      sink.ready
		.sink_channel        (limiter_pipeline_004_source0_channel),                                //          .channel
		.sink_data           (limiter_pipeline_004_source0_data),                                   //          .data
		.sink_startofpacket  (limiter_pipeline_004_source0_startofpacket),                          //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_004_source0_endofpacket),                            //          .endofpacket
		.sink_valid          (limiter_pipeline_004_source0_valid),                                  //          .valid
		.src0_ready          (cmd_demux_002_src0_ready),                                            //      src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                                            //          .valid
		.src0_data           (cmd_demux_002_src0_data),                                             //          .data
		.src0_channel        (cmd_demux_002_src0_channel),                                          //          .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                                      //          .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                                            //      src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                                            //          .valid
		.src1_data           (cmd_demux_002_src1_data),                                             //          .data
		.src1_channel        (cmd_demux_002_src1_channel),                                          //          .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                                      //          .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                                            //      src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                                            //          .valid
		.src2_data           (cmd_demux_002_src2_data),                                             //          .data
		.src2_channel        (cmd_demux_002_src2_channel),                                          //          .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                                    //          .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                                      //          .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                                            //      src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                                            //          .valid
		.src3_data           (cmd_demux_002_src3_data),                                             //          .data
		.src3_channel        (cmd_demux_002_src3_channel),                                          //          .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                                    //          .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                                      //          .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                                            //      src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                                            //          .valid
		.src4_data           (cmd_demux_002_src4_data),                                             //          .data
		.src4_channel        (cmd_demux_002_src4_channel),                                          //          .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                                    //          .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                                      //          .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                                            //      src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                                            //          .valid
		.src5_data           (cmd_demux_002_src5_data),                                             //          .data
		.src5_channel        (cmd_demux_002_src5_channel),                                          //          .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                                    //          .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                                      //          .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                                            //      src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                                            //          .valid
		.src6_data           (cmd_demux_002_src6_data),                                             //          .data
		.src6_channel        (cmd_demux_002_src6_channel),                                          //          .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                                    //          .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                                      //          .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                                            //      src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                                            //          .valid
		.src7_data           (cmd_demux_002_src7_data),                                             //          .data
		.src7_channel        (cmd_demux_002_src7_channel),                                          //          .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                                    //          .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                                      //          .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                                            //      src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                                            //          .valid
		.src8_data           (cmd_demux_002_src8_data),                                             //          .data
		.src8_channel        (cmd_demux_002_src8_channel),                                          //          .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                                    //          .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                                      //          .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                                            //      src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                                            //          .valid
		.src9_data           (cmd_demux_002_src9_data),                                             //          .data
		.src9_channel        (cmd_demux_002_src9_channel),                                          //          .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                                    //          .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                                      //          .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                                           //     src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                                           //          .valid
		.src10_data          (cmd_demux_002_src10_data),                                            //          .data
		.src10_channel       (cmd_demux_002_src10_channel),                                         //          .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                                   //          .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                                     //          .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                                           //     src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                                           //          .valid
		.src11_data          (cmd_demux_002_src11_data),                                            //          .data
		.src11_channel       (cmd_demux_002_src11_channel),                                         //          .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                                   //          .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),                                     //          .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),                                           //     src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),                                           //          .valid
		.src12_data          (cmd_demux_002_src12_data),                                            //          .data
		.src12_channel       (cmd_demux_002_src12_channel),                                         //          .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),                                   //          .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket)                                      //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_002 cmd_demux_003 (
		.clk                 (clk_50_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (limiter_pipeline_006_source0_ready),                                  //      sink.ready
		.sink_channel        (limiter_pipeline_006_source0_channel),                                //          .channel
		.sink_data           (limiter_pipeline_006_source0_data),                                   //          .data
		.sink_startofpacket  (limiter_pipeline_006_source0_startofpacket),                          //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_006_source0_endofpacket),                            //          .endofpacket
		.sink_valid          (limiter_pipeline_006_source0_valid),                                  //          .valid
		.src0_ready          (cmd_demux_003_src0_ready),                                            //      src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                            //          .valid
		.src0_data           (cmd_demux_003_src0_data),                                             //          .data
		.src0_channel        (cmd_demux_003_src0_channel),                                          //          .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                                      //          .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                            //      src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                            //          .valid
		.src1_data           (cmd_demux_003_src1_data),                                             //          .data
		.src1_channel        (cmd_demux_003_src1_channel),                                          //          .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                                      //          .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                            //      src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                            //          .valid
		.src2_data           (cmd_demux_003_src2_data),                                             //          .data
		.src2_channel        (cmd_demux_003_src2_channel),                                          //          .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                                    //          .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                                      //          .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                            //      src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                            //          .valid
		.src3_data           (cmd_demux_003_src3_data),                                             //          .data
		.src3_channel        (cmd_demux_003_src3_channel),                                          //          .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                                    //          .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                                      //          .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                            //      src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                            //          .valid
		.src4_data           (cmd_demux_003_src4_data),                                             //          .data
		.src4_channel        (cmd_demux_003_src4_channel),                                          //          .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                                    //          .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                                      //          .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                            //      src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                            //          .valid
		.src5_data           (cmd_demux_003_src5_data),                                             //          .data
		.src5_channel        (cmd_demux_003_src5_channel),                                          //          .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                                    //          .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                                      //          .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                            //      src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                            //          .valid
		.src6_data           (cmd_demux_003_src6_data),                                             //          .data
		.src6_channel        (cmd_demux_003_src6_channel),                                          //          .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                                    //          .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                                      //          .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                            //      src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                            //          .valid
		.src7_data           (cmd_demux_003_src7_data),                                             //          .data
		.src7_channel        (cmd_demux_003_src7_channel),                                          //          .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                                    //          .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                                      //          .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                            //      src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                            //          .valid
		.src8_data           (cmd_demux_003_src8_data),                                             //          .data
		.src8_channel        (cmd_demux_003_src8_channel),                                          //          .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                                    //          .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                                      //          .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                            //      src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                            //          .valid
		.src9_data           (cmd_demux_003_src9_data),                                             //          .data
		.src9_channel        (cmd_demux_003_src9_channel),                                          //          .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                                    //          .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                                      //          .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                           //     src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                           //          .valid
		.src10_data          (cmd_demux_003_src10_data),                                            //          .data
		.src10_channel       (cmd_demux_003_src10_channel),                                         //          .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                                   //          .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                                     //          .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                                           //     src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                                           //          .valid
		.src11_data          (cmd_demux_003_src11_data),                                            //          .data
		.src11_channel       (cmd_demux_003_src11_channel),                                         //          .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                                   //          .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                                     //          .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                                           //     src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                                           //          .valid
		.src12_data          (cmd_demux_003_src12_data),                                            //          .data
		.src12_channel       (cmd_demux_003_src12_channel),                                         //          .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                                   //          .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket)                                      //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pll_sys_outclk0_clk),                         //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (crosser_out_ready),                       //     sink1.ready
		.sink1_valid         (crosser_out_valid),                       //          .valid
		.sink1_channel       (crosser_out_channel),                     //          .channel
		.sink1_data          (crosser_out_data),                        //          .data
		.sink1_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (crosser_out_endofpacket),                 //          .endofpacket
		.sink2_ready         (crosser_006_out_ready),                   //     sink2.ready
		.sink2_valid         (crosser_006_out_valid),                   //          .valid
		.sink2_channel       (crosser_006_out_channel),                 //          .channel
		.sink2_data          (crosser_006_out_data),                    //          .data
		.sink2_startofpacket (crosser_006_out_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (crosser_006_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_001 cmd_mux_002 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                   //          .valid
		.sink1_channel       (crosser_001_out_channel),                 //          .channel
		.sink1_data          (crosser_001_out_data),                    //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),             //          .endofpacket
		.sink2_ready         (crosser_007_out_ready),                   //     sink2.ready
		.sink2_valid         (crosser_007_out_valid),                   //          .valid
		.sink2_channel       (crosser_007_out_channel),                 //          .channel
		.sink2_data          (crosser_007_out_data),                    //          .data
		.sink2_startofpacket (crosser_007_out_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (crosser_007_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_003 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_006 (
		.clk                 (pll_sys_outclk0_clk),                         //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                       //          .valid
		.src_data            (cmd_mux_006_src_data),                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                      //          .channel
		.sink0_data          (cmd_demux_src6_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                  //          .channel
		.sink0_data          (cmd_demux_src7_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_009 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                   //          .valid
		.sink0_channel       (crosser_002_out_channel),                 //          .channel
		.sink0_data          (crosser_002_out_data),                    //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                   //          .valid
		.sink1_channel       (crosser_008_out_channel),                 //          .channel
		.sink1_data          (crosser_008_out_data),                    //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_010 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                       //          .valid
		.src_data            (cmd_mux_010_src_data),                        //          .data
		.src_channel         (cmd_mux_010_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                       //          .valid
		.src_data            (cmd_mux_011_src_data),                        //          .data
		.src_channel         (cmd_mux_011_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_012 (
		.clk                 (pll_sys_outclk2_clk),                    //       clk.clk
		.reset               (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                  //          .valid
		.src_data            (cmd_mux_012_src_data),                   //          .data
		.src_channel         (cmd_mux_012_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                  //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                  //          .valid
		.sink0_channel       (crosser_003_out_channel),                //          .channel
		.sink0_data          (crosser_003_out_data),                   //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),            //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                  //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                  //          .valid
		.sink1_channel       (crosser_009_out_channel),                //          .channel
		.sink1_data          (crosser_009_out_data),                   //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket)             //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_013 (
		.clk                 (pll_sys_outclk2_clk),                    //       clk.clk
		.reset               (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                  //          .valid
		.src_data            (cmd_mux_013_src_data),                   //          .data
		.src_channel         (cmd_mux_013_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                  //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                  //          .valid
		.sink0_channel       (crosser_004_out_channel),                //          .channel
		.sink0_data          (crosser_004_out_data),                   //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),            //          .endofpacket
		.sink1_ready         (crosser_010_out_ready),                  //     sink1.ready
		.sink1_valid         (crosser_010_out_valid),                  //          .valid
		.sink1_channel       (crosser_010_out_channel),                //          .channel
		.sink1_data          (crosser_010_out_data),                   //          .data
		.sink1_startofpacket (crosser_010_out_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (crosser_010_out_endofpacket)             //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_014 (
		.clk                 (pll_sys_outclk2_clk),                    //       clk.clk
		.reset               (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                  //          .valid
		.src_data            (cmd_mux_014_src_data),                   //          .data
		.src_channel         (cmd_mux_014_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                  //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                  //          .valid
		.sink0_channel       (crosser_005_out_channel),                //          .channel
		.sink0_data          (crosser_005_out_data),                   //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),            //          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                  //     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                  //          .valid
		.sink1_channel       (crosser_011_out_channel),                //          .channel
		.sink1_data          (crosser_011_out_data),                   //          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket)             //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_015 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                       //          .valid
		.src_data            (cmd_mux_015_src_data),                        //          .data
		.src_channel         (cmd_mux_015_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src8_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src8_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src8_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src8_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src8_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src8_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src8_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_016 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                       //          .valid
		.src_data            (cmd_mux_016_src_data),                        //          .data
		.src_channel         (cmd_mux_016_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                    //          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                  //          .channel
		.sink0_data          (cmd_demux_002_src9_data),                     //          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src9_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src9_valid),                    //          .valid
		.sink1_channel       (cmd_demux_003_src9_channel),                  //          .channel
		.sink1_data          (cmd_demux_003_src9_data),                     //          .data
		.sink1_startofpacket (cmd_demux_003_src9_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src9_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_017 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                       //          .valid
		.src_data            (cmd_mux_017_src_data),                        //          .data
		.src_channel         (cmd_mux_017_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src10_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_002_src10_valid),                   //          .valid
		.sink0_channel       (cmd_demux_002_src10_channel),                 //          .channel
		.sink0_data          (cmd_demux_002_src10_data),                    //          .data
		.sink0_startofpacket (cmd_demux_002_src10_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src10_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_003_src10_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src10_valid),                   //          .valid
		.sink1_channel       (cmd_demux_003_src10_channel),                 //          .channel
		.sink1_data          (cmd_demux_003_src10_data),                    //          .data
		.sink1_startofpacket (cmd_demux_003_src10_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src10_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_018 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                       //          .valid
		.src_data            (cmd_mux_018_src_data),                        //          .data
		.src_channel         (cmd_mux_018_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src11_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_002_src11_valid),                   //          .valid
		.sink0_channel       (cmd_demux_002_src11_channel),                 //          .channel
		.sink0_data          (cmd_demux_002_src11_data),                    //          .data
		.sink0_startofpacket (cmd_demux_002_src11_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src11_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_003_src11_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src11_valid),                   //          .valid
		.sink1_channel       (cmd_demux_003_src11_channel),                 //          .channel
		.sink1_data          (cmd_demux_003_src11_data),                    //          .data
		.sink1_startofpacket (cmd_demux_003_src11_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src11_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_mux_003 cmd_mux_019 (
		.clk                 (clk_50_clk_clk),                              //       clk.clk
		.reset               (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                       //          .valid
		.src_data            (cmd_mux_019_src_data),                        //          .data
		.src_channel         (cmd_mux_019_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src12_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_002_src12_valid),                   //          .valid
		.sink0_channel       (cmd_demux_002_src12_channel),                 //          .channel
		.sink0_data          (cmd_demux_002_src12_data),                    //          .data
		.sink0_startofpacket (cmd_demux_002_src12_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src12_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_003_src12_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_003_src12_valid),                   //          .valid
		.sink1_channel       (cmd_demux_003_src12_channel),                 //          .channel
		.sink1_data          (cmd_demux_003_src12_data),                    //          .data
		.sink1_startofpacket (cmd_demux_003_src12_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src12_endofpacket)              //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pll_sys_outclk0_clk),                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                //          .valid
		.src2_data          (rsp_demux_001_src2_data),                 //          .data
		.src2_channel       (rsp_demux_001_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_001 rsp_demux_002 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                //          .valid
		.src2_data          (rsp_demux_002_src2_data),                 //          .data
		.src2_channel       (rsp_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_001 rsp_demux_003 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_001 rsp_demux_006 (
		.clk                (pll_sys_outclk0_clk),                         //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                        //      sink.ready
		.sink_channel       (router_010_src_channel),                      //          .channel
		.sink_data          (router_010_src_data),                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_006_src1_data),                     //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_cmd_demux_001 rsp_demux_009 (
		.clk                (pll_sys_outclk0_clk),                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                //          .valid
		.src1_data          (rsp_demux_009_src1_data),                 //          .data
		.src1_channel       (rsp_demux_009_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_010 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                        //      sink.ready
		.sink_channel       (router_014_src_channel),                      //          .channel
		.sink_data          (router_014_src_data),                         //          .data
		.sink_startofpacket (router_014_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_014_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_010_src0_data),                     //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_010_src1_data),                     //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_011 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                        //      sink.ready
		.sink_channel       (router_015_src_channel),                      //          .channel
		.sink_data          (router_015_src_data),                         //          .data
		.sink_startofpacket (router_015_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_015_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_011_src0_data),                     //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_011_src1_data),                     //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_012 rsp_demux_012 (
		.clk                (pll_sys_outclk2_clk),                    //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                   //      sink.ready
		.sink_channel       (router_016_src_channel),                 //          .channel
		.sink_data          (router_016_src_data),                    //          .data
		.sink_startofpacket (router_016_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_016_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),               //          .valid
		.src0_data          (rsp_demux_012_src0_data),                //          .data
		.src0_channel       (rsp_demux_012_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),               //          .valid
		.src1_data          (rsp_demux_012_src1_data),                //          .data
		.src1_channel       (rsp_demux_012_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)          //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_012 rsp_demux_013 (
		.clk                (pll_sys_outclk2_clk),                    //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                   //      sink.ready
		.sink_channel       (router_017_src_channel),                 //          .channel
		.sink_data          (router_017_src_data),                    //          .data
		.sink_startofpacket (router_017_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_017_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),               //          .valid
		.src0_data          (rsp_demux_013_src0_data),                //          .data
		.src0_channel       (rsp_demux_013_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),               //          .valid
		.src1_data          (rsp_demux_013_src1_data),                //          .data
		.src1_channel       (rsp_demux_013_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)          //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_012 rsp_demux_014 (
		.clk                (pll_sys_outclk2_clk),                    //       clk.clk
		.reset              (ledr_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                   //      sink.ready
		.sink_channel       (router_018_src_channel),                 //          .channel
		.sink_data          (router_018_src_data),                    //          .data
		.sink_startofpacket (router_018_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_018_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),               //          .valid
		.src0_data          (rsp_demux_014_src0_data),                //          .data
		.src0_channel       (rsp_demux_014_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),               //          .valid
		.src1_data          (rsp_demux_014_src1_data),                //          .data
		.src1_channel       (rsp_demux_014_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)          //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_015 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                        //      sink.ready
		.sink_channel       (router_019_src_channel),                      //          .channel
		.sink_data          (router_019_src_data),                         //          .data
		.sink_startofpacket (router_019_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_019_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_015_src0_data),                     //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_015_src1_data),                     //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_016 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                        //      sink.ready
		.sink_channel       (router_020_src_channel),                      //          .channel
		.sink_data          (router_020_src_data),                         //          .data
		.sink_startofpacket (router_020_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_020_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_016_src0_data),                     //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_016_src1_data),                     //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_017 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                        //      sink.ready
		.sink_channel       (router_021_src_channel),                      //          .channel
		.sink_data          (router_021_src_data),                         //          .data
		.sink_startofpacket (router_021_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_021_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_017_src0_data),                     //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_017_src1_data),                     //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_018 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                        //      sink.ready
		.sink_channel       (router_022_src_channel),                      //          .channel
		.sink_data          (router_022_src_data),                         //          .data
		.sink_startofpacket (router_022_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_022_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_018_src0_data),                     //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_018_src1_data),                     //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_demux_010 rsp_demux_019 (
		.clk                (clk_50_clk_clk),                              //       clk.clk
		.reset              (fifo_0_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                        //      sink.ready
		.sink_channel       (router_023_src_channel),                      //          .channel
		.sink_data          (router_023_src_data),                         //          .data
		.sink_startofpacket (router_023_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_023_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_019_src0_data),                     //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_019_src1_data),                     //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)               //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),              //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                 //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),              //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                 //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                 (pll_sys_outclk0_clk),                     //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),                //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),              //          .channel
		.sink0_data          (rsp_demux_003_src1_data),                 //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_demux_006_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_006_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_006_src1_endofpacket)           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                  (clk_50_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                               //          .valid
		.src_data             (rsp_mux_002_src_data),                                                //          .data
		.src_channel          (rsp_mux_002_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (crosser_012_out_ready),                                               //     sink0.ready
		.sink0_valid          (crosser_012_out_valid),                                               //          .valid
		.sink0_channel        (crosser_012_out_channel),                                             //          .channel
		.sink0_data           (crosser_012_out_data),                                                //          .data
		.sink0_startofpacket  (crosser_012_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket    (crosser_012_out_endofpacket),                                         //          .endofpacket
		.sink1_ready          (crosser_014_out_ready),                                               //     sink1.ready
		.sink1_valid          (crosser_014_out_valid),                                               //          .valid
		.sink1_channel        (crosser_014_out_channel),                                             //          .channel
		.sink1_data           (crosser_014_out_data),                                                //          .data
		.sink1_startofpacket  (crosser_014_out_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket    (crosser_014_out_endofpacket),                                         //          .endofpacket
		.sink2_ready          (crosser_016_out_ready),                                               //     sink2.ready
		.sink2_valid          (crosser_016_out_valid),                                               //          .valid
		.sink2_channel        (crosser_016_out_channel),                                             //          .channel
		.sink2_data           (crosser_016_out_data),                                                //          .data
		.sink2_startofpacket  (crosser_016_out_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket    (crosser_016_out_endofpacket),                                         //          .endofpacket
		.sink3_ready          (rsp_demux_010_src0_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_010_src0_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_010_src0_channel),                                          //          .channel
		.sink3_data           (rsp_demux_010_src0_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_010_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_010_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_011_src0_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_011_src0_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_011_src0_channel),                                          //          .channel
		.sink4_data           (rsp_demux_011_src0_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_011_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_011_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready          (crosser_018_out_ready),                                               //     sink5.ready
		.sink5_valid          (crosser_018_out_valid),                                               //          .valid
		.sink5_channel        (crosser_018_out_channel),                                             //          .channel
		.sink5_data           (crosser_018_out_data),                                                //          .data
		.sink5_startofpacket  (crosser_018_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket    (crosser_018_out_endofpacket),                                         //          .endofpacket
		.sink6_ready          (crosser_020_out_ready),                                               //     sink6.ready
		.sink6_valid          (crosser_020_out_valid),                                               //          .valid
		.sink6_channel        (crosser_020_out_channel),                                             //          .channel
		.sink6_data           (crosser_020_out_data),                                                //          .data
		.sink6_startofpacket  (crosser_020_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket    (crosser_020_out_endofpacket),                                         //          .endofpacket
		.sink7_ready          (crosser_022_out_ready),                                               //     sink7.ready
		.sink7_valid          (crosser_022_out_valid),                                               //          .valid
		.sink7_channel        (crosser_022_out_channel),                                             //          .channel
		.sink7_data           (crosser_022_out_data),                                                //          .data
		.sink7_startofpacket  (crosser_022_out_startofpacket),                                       //          .startofpacket
		.sink7_endofpacket    (crosser_022_out_endofpacket),                                         //          .endofpacket
		.sink8_ready          (rsp_demux_015_src0_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_015_src0_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_015_src0_channel),                                          //          .channel
		.sink8_data           (rsp_demux_015_src0_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_015_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_015_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_016_src0_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_016_src0_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_016_src0_channel),                                          //          .channel
		.sink9_data           (rsp_demux_016_src0_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_016_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_016_src0_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_017_src0_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_017_src0_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_017_src0_channel),                                          //          .channel
		.sink10_data          (rsp_demux_017_src0_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_017_src0_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_017_src0_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_018_src0_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_018_src0_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_018_src0_channel),                                          //          .channel
		.sink11_data          (rsp_demux_018_src0_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_018_src0_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_018_src0_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_019_src0_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_019_src0_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_019_src0_channel),                                          //          .channel
		.sink12_data          (rsp_demux_019_src0_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_019_src0_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_019_src0_endofpacket)                                       //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_1_rsp_mux_002 rsp_mux_003 (
		.clk                  (clk_50_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                               //          .valid
		.src_data             (rsp_mux_003_src_data),                                                //          .data
		.src_channel          (rsp_mux_003_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (crosser_013_out_ready),                                               //     sink0.ready
		.sink0_valid          (crosser_013_out_valid),                                               //          .valid
		.sink0_channel        (crosser_013_out_channel),                                             //          .channel
		.sink0_data           (crosser_013_out_data),                                                //          .data
		.sink0_startofpacket  (crosser_013_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket    (crosser_013_out_endofpacket),                                         //          .endofpacket
		.sink1_ready          (crosser_015_out_ready),                                               //     sink1.ready
		.sink1_valid          (crosser_015_out_valid),                                               //          .valid
		.sink1_channel        (crosser_015_out_channel),                                             //          .channel
		.sink1_data           (crosser_015_out_data),                                                //          .data
		.sink1_startofpacket  (crosser_015_out_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket    (crosser_015_out_endofpacket),                                         //          .endofpacket
		.sink2_ready          (crosser_017_out_ready),                                               //     sink2.ready
		.sink2_valid          (crosser_017_out_valid),                                               //          .valid
		.sink2_channel        (crosser_017_out_channel),                                             //          .channel
		.sink2_data           (crosser_017_out_data),                                                //          .data
		.sink2_startofpacket  (crosser_017_out_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket    (crosser_017_out_endofpacket),                                         //          .endofpacket
		.sink3_ready          (rsp_demux_010_src1_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_010_src1_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_010_src1_channel),                                          //          .channel
		.sink3_data           (rsp_demux_010_src1_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_011_src1_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_011_src1_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_011_src1_channel),                                          //          .channel
		.sink4_data           (rsp_demux_011_src1_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready          (crosser_019_out_ready),                                               //     sink5.ready
		.sink5_valid          (crosser_019_out_valid),                                               //          .valid
		.sink5_channel        (crosser_019_out_channel),                                             //          .channel
		.sink5_data           (crosser_019_out_data),                                                //          .data
		.sink5_startofpacket  (crosser_019_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket    (crosser_019_out_endofpacket),                                         //          .endofpacket
		.sink6_ready          (crosser_021_out_ready),                                               //     sink6.ready
		.sink6_valid          (crosser_021_out_valid),                                               //          .valid
		.sink6_channel        (crosser_021_out_channel),                                             //          .channel
		.sink6_data           (crosser_021_out_data),                                                //          .data
		.sink6_startofpacket  (crosser_021_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket    (crosser_021_out_endofpacket),                                         //          .endofpacket
		.sink7_ready          (crosser_023_out_ready),                                               //     sink7.ready
		.sink7_valid          (crosser_023_out_valid),                                               //          .valid
		.sink7_channel        (crosser_023_out_channel),                                             //          .channel
		.sink7_data           (crosser_023_out_data),                                                //          .data
		.sink7_startofpacket  (crosser_023_out_startofpacket),                                       //          .startofpacket
		.sink7_endofpacket    (crosser_023_out_endofpacket),                                         //          .endofpacket
		.sink8_ready          (rsp_demux_015_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_015_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_015_src1_channel),                                          //          .channel
		.sink8_data           (rsp_demux_015_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_015_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_015_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_016_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_016_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_016_src1_channel),                                          //          .channel
		.sink9_data           (rsp_demux_016_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_016_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_016_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_017_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_017_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_017_src1_channel),                                          //          .channel
		.sink10_data          (rsp_demux_017_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_017_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_017_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_018_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_018_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_018_src1_channel),                                          //          .channel
		.sink11_data          (rsp_demux_018_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_018_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_018_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_019_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_019_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_019_src1_channel),                                          //          .channel
		.sink12_data          (rsp_demux_019_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_019_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_019_src1_endofpacket)                                       //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src1_data),                                             //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src2_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src2_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src2_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src2_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src5_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src6_data),                                             //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src7_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src7_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src7_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src7_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src7_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src7_data),                                             //              .data
		.out_ready         (crosser_005_out_ready),                                               //           out.ready
		.out_valid         (crosser_005_out_valid),                                               //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                             //              .channel
		.out_data          (crosser_005_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src0_data),                                             //              .data
		.out_ready         (crosser_006_out_ready),                                               //           out.ready
		.out_valid         (crosser_006_out_valid),                                               //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                             //              .channel
		.out_data          (crosser_006_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src1_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src1_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src1_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src1_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                                                 //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src2_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src2_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src2_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src2_data),                                             //              .data
		.out_ready         (crosser_008_out_ready),                                               //           out.ready
		.out_valid         (crosser_008_out_valid),                                               //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                             //              .channel
		.out_data          (crosser_008_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src5_data),                                             //              .data
		.out_ready         (crosser_009_out_ready),                                               //           out.ready
		.out_valid         (crosser_009_out_valid),                                               //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                             //              .channel
		.out_data          (crosser_009_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src6_data),                                             //              .data
		.out_ready         (crosser_010_out_ready),                                               //           out.ready
		.out_valid         (crosser_010_out_valid),                                               //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                             //              .channel
		.out_data          (crosser_010_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_50_clk_clk),                                                      //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk2_clk),                                                 //       out_clk.clk
		.out_reset         (ledr_reset_reset_bridge_in_reset_reset),                              // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src7_ready),                                            //            in.ready
		.in_valid          (cmd_demux_003_src7_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_003_src7_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src7_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_003_src7_channel),                                          //              .channel
		.in_data           (cmd_demux_003_src7_data),                                             //              .data
		.out_ready         (crosser_011_out_ready),                                               //           out.ready
		.out_valid         (crosser_011_out_valid),                                               //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                             //              .channel
		.out_data          (crosser_011_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src1_data),                                             //              .data
		.out_ready         (crosser_012_out_ready),                                               //           out.ready
		.out_valid         (crosser_012_out_valid),                                               //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                             //              .channel
		.out_data          (crosser_012_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src2_data),                                             //              .data
		.out_ready         (crosser_013_out_ready),                                               //           out.ready
		.out_valid         (crosser_013_out_valid),                                               //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                             //              .channel
		.out_data          (crosser_013_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_002_src1_data),                                             //              .data
		.out_ready         (crosser_014_out_ready),                                               //           out.ready
		.out_valid         (crosser_014_out_valid),                                               //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                             //              .channel
		.out_data          (crosser_014_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_002_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_002_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_002_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_002_src2_data),                                             //              .data
		.out_ready         (crosser_015_out_ready),                                               //           out.ready
		.out_valid         (crosser_015_out_valid),                                               //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                             //              .channel
		.out_data          (crosser_015_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_009_src0_data),                                             //              .data
		.out_ready         (crosser_016_out_ready),                                               //           out.ready
		.out_valid         (crosser_016_out_valid),                                               //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                             //              .channel
		.out_data          (crosser_016_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (pll_sys_outclk0_clk),                                                 //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_009_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_009_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_009_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_009_src1_data),                                             //              .data
		.out_ready         (crosser_017_out_ready),                                               //           out.ready
		.out_valid         (crosser_017_out_valid),                                               //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                             //              .channel
		.out_data          (crosser_017_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_012_src0_data),                                             //              .data
		.out_ready         (crosser_018_out_ready),                                               //           out.ready
		.out_valid         (crosser_018_out_valid),                                               //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                             //              .channel
		.out_data          (crosser_018_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_012_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_012_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_012_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_012_src1_data),                                             //              .data
		.out_ready         (crosser_019_out_ready),                                               //           out.ready
		.out_valid         (crosser_019_out_valid),                                               //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                             //              .channel
		.out_data          (crosser_019_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_013_src0_data),                                             //              .data
		.out_ready         (crosser_020_out_ready),                                               //           out.ready
		.out_valid         (crosser_020_out_valid),                                               //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                             //              .channel
		.out_data          (crosser_020_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_013_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_013_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_013_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_013_src1_data),                                             //              .data
		.out_ready         (crosser_021_out_ready),                                               //           out.ready
		.out_valid         (crosser_021_out_valid),                                               //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_021_out_channel),                                             //              .channel
		.out_data          (crosser_021_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_014_src0_data),                                             //              .data
		.out_ready         (crosser_022_out_ready),                                               //           out.ready
		.out_valid         (crosser_022_out_valid),                                               //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                             //              .channel
		.out_data          (crosser_022_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (pll_sys_outclk2_clk),                                                 //        in_clk.clk
		.in_reset          (ledr_reset_reset_bridge_in_reset_reset),                              //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                                      //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_014_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_014_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_014_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_014_src1_data),                                             //              .data
		.out_ready         (crosser_023_out_ready),                                               //           out.ready
		.out_valid         (crosser_023_out_valid),                                               //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                             //              .channel
		.out_data          (crosser_023_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (pll_sys_outclk0_clk),                           //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (cpu_data_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_data_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),          //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                 //          .data
		.out_channel       (limiter_pipeline_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (pll_sys_outclk0_clk),                        //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                           //          .data
		.in_channel        (rsp_mux_src_channel),                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (pll_sys_outclk0_clk),                                  //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (pll_sys_outclk0_clk),                        //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                       //          .data
		.in_channel        (rsp_mux_001_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),          //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_004 (
		.clk               (clk_50_clk_clk),                                                      //       cr0.clk
		.reset             (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.in_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_004_source0_ready),                                  //   source0.ready
		.out_valid         (limiter_pipeline_004_source0_valid),                                  //          .valid
		.out_startofpacket (limiter_pipeline_004_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (limiter_pipeline_004_source0_endofpacket),                            //          .endofpacket
		.out_data          (limiter_pipeline_004_source0_data),                                   //          .data
		.out_channel       (limiter_pipeline_004_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_005 (
		.clk               (clk_50_clk_clk),                                                      //       cr0.clk
		.reset             (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_002_src_ready),                                               //     sink0.ready
		.in_valid          (rsp_mux_002_src_valid),                                               //          .valid
		.in_startofpacket  (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket    (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.in_data           (rsp_mux_002_src_data),                                                //          .data
		.in_channel        (rsp_mux_002_src_channel),                                             //          .channel
		.out_ready         (limiter_pipeline_005_source0_ready),                                  //   source0.ready
		.out_valid         (limiter_pipeline_005_source0_valid),                                  //          .valid
		.out_startofpacket (limiter_pipeline_005_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (limiter_pipeline_005_source0_endofpacket),                            //          .endofpacket
		.out_data          (limiter_pipeline_005_source0_data),                                   //          .data
		.out_channel       (limiter_pipeline_005_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_006 (
		.clk               (clk_50_clk_clk),                                                      //       cr0.clk
		.reset             (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.in_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_006_source0_ready),                                  //   source0.ready
		.out_valid         (limiter_pipeline_006_source0_valid),                                  //          .valid
		.out_startofpacket (limiter_pipeline_006_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (limiter_pipeline_006_source0_endofpacket),                            //          .endofpacket
		.out_data          (limiter_pipeline_006_source0_data),                                   //          .data
		.out_channel       (limiter_pipeline_006_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_007 (
		.clk               (clk_50_clk_clk),                                                      //       cr0.clk
		.reset             (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_003_src_ready),                                               //     sink0.ready
		.in_valid          (rsp_mux_003_src_valid),                                               //          .valid
		.in_startofpacket  (rsp_mux_003_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket    (rsp_mux_003_src_endofpacket),                                         //          .endofpacket
		.in_data           (rsp_mux_003_src_data),                                                //          .data
		.in_channel        (rsp_mux_003_src_channel),                                             //          .channel
		.out_ready         (limiter_pipeline_007_source0_ready),                                  //   source0.ready
		.out_valid         (limiter_pipeline_007_source0_valid),                                  //          .valid
		.out_startofpacket (limiter_pipeline_007_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (limiter_pipeline_007_source0_endofpacket),                            //          .endofpacket
		.out_data          (limiter_pipeline_007_source0_data),                                   //          .data
		.out_channel       (limiter_pipeline_007_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (pll_sys_outclk0_clk),                         //       cr0.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                           //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                           //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                   //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                     //          .endofpacket
		.in_data           (cmd_mux_src_data),                            //          .data
		.in_channel        (cmd_mux_src_channel),                         //          .channel
		.out_ready         (agent_pipeline_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                 //          .data
		.out_channel       (agent_pipeline_source0_channel),              //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (pll_sys_outclk0_clk),                                //       cr0.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                    //          .data
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_channel       (),                                                   // (terminated)
		.in_channel        (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (pll_sys_outclk0_clk),                                       //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (alt_vip_mix_0_control_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (alt_vip_mix_0_control_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (alt_vip_mix_0_control_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_mix_0_control_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_mix_0_control_burst_adapter_source0_data),          //          .data
		.in_channel        (alt_vip_mix_0_control_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                           //          .data
		.out_channel       (agent_pipeline_002_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (pll_sys_outclk0_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (alt_vip_mix_0_control_agent_rp_ready),         //     sink0.ready
		.in_valid          (alt_vip_mix_0_control_agent_rp_valid),         //          .valid
		.in_startofpacket  (alt_vip_mix_0_control_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_mix_0_control_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_mix_0_control_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (pll_sys_outclk0_clk),                                       //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (alt_vip_cti_0_control_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (alt_vip_cti_0_control_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (alt_vip_cti_0_control_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_cti_0_control_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_cti_0_control_burst_adapter_source0_data),          //          .data
		.in_channel        (alt_vip_cti_0_control_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                           //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (pll_sys_outclk0_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (alt_vip_cti_0_control_agent_rp_ready),         //     sink0.ready
		.in_valid          (alt_vip_cti_0_control_agent_rp_valid),         //          .valid
		.in_startofpacket  (alt_vip_cti_0_control_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_cti_0_control_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_cti_0_control_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_005_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_003_src_data),                     //          .data
		.in_channel        (cmd_mux_003_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),          //          .data
		.out_channel       (agent_pipeline_006_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (pll_sys_outclk0_clk),                          //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (cpu_jtag_debug_module_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_004_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_004_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_004_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_004_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_004_src_data),                     //          .data
		.in_channel        (cmd_mux_004_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),          //          .data
		.out_channel       (agent_pipeline_008_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (pll_sys_outclk0_clk),                              //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.in_ready          (clock_crossing_io_slow_s0_agent_rp_ready),         //     sink0.ready
		.in_valid          (clock_crossing_io_slow_s0_agent_rp_valid),         //          .valid
		.in_startofpacket  (clock_crossing_io_slow_s0_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (clock_crossing_io_slow_s0_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (clock_crossing_io_slow_s0_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                  //          .data
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_channel       (),                                                 // (terminated)
		.in_channel        (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_005_src_data),                     //          .data
		.in_channel        (cmd_mux_005_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),          //          .data
		.out_channel       (agent_pipeline_010_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (pll_sys_outclk0_clk),                                  //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (mm_clock_crossing_bridge_1_s0_agent_rp_ready),         //     sink0.ready
		.in_valid          (mm_clock_crossing_bridge_1_s0_agent_rp_valid),         //          .valid
		.in_startofpacket  (mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (mm_clock_crossing_bridge_1_s0_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (pll_sys_outclk0_clk),                         //       cr0.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_006_src_ready),                       //     sink0.ready
		.in_valid          (cmd_mux_006_src_valid),                       //          .valid
		.in_startofpacket  (cmd_mux_006_src_startofpacket),               //          .startofpacket
		.in_endofpacket    (cmd_mux_006_src_endofpacket),                 //          .endofpacket
		.in_data           (cmd_mux_006_src_data),                        //          .data
		.in_channel        (cmd_mux_006_src_channel),                     //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),             //          .data
		.out_channel       (agent_pipeline_012_source0_channel),          //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (pll_sys_outclk0_clk),                         //       cr0.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_s1_agent_rp_ready),            //     sink0.ready
		.in_valid          (onchip_memory2_s1_agent_rp_valid),            //          .valid
		.in_startofpacket  (onchip_memory2_s1_agent_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rp_endofpacket),      //          .endofpacket
		.in_data           (onchip_memory2_s1_agent_rp_data),             //          .data
		.out_ready         (agent_pipeline_013_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_007_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_007_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_007_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_007_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_007_src_data),                     //          .data
		.in_channel        (cmd_mux_007_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_014_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),          //          .data
		.out_channel       (agent_pipeline_014_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (uart_s1_agent_rp_ready),                   //     sink0.ready
		.in_valid          (uart_s1_agent_rp_valid),                   //          .valid
		.in_startofpacket  (uart_s1_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (uart_s1_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (uart_s1_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_015_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_008_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_008_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_008_src_data),                     //          .data
		.in_channel        (cmd_mux_008_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),          //          .data
		.out_channel       (agent_pipeline_016_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (pll_sys_outclk0_clk),                      //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (timer_stamp_s1_agent_rp_ready),            //     sink0.ready
		.in_valid          (timer_stamp_s1_agent_rp_valid),            //          .valid
		.in_startofpacket  (timer_stamp_s1_agent_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_stamp_s1_agent_rp_endofpacket),      //          .endofpacket
		.in_data           (timer_stamp_s1_agent_rp_data),             //          .data
		.out_ready         (agent_pipeline_017_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (pll_sys_outclk0_clk),                                            //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.in_ready          (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (alt_vip_vfr_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                                //          .data
		.out_channel       (agent_pipeline_018_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (pll_sys_outclk0_clk),                               //       cr0.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (alt_vip_vfr_0_avalon_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (alt_vip_vfr_0_avalon_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (alt_vip_vfr_0_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_0_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (alt_vip_vfr_0_avalon_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_019_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),                   //          .data
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_channel       (),                                                  // (terminated)
		.in_channel        (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (clk_50_clk_clk),                                //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (fifo_0_in_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fifo_0_in_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fifo_0_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fifo_0_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fifo_0_in_burst_adapter_source0_data),          //          .data
		.in_channel        (fifo_0_in_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),              //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),              //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),        //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),               //          .data
		.out_channel       (agent_pipeline_020_source0_channel),            //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fifo_0_in_agent_rp_ready),                    //     sink0.ready
		.in_valid          (fifo_0_in_agent_rp_valid),                    //          .valid
		.in_startofpacket  (fifo_0_in_agent_rp_startofpacket),            //          .startofpacket
		.in_endofpacket    (fifo_0_in_agent_rp_endofpacket),              //          .endofpacket
		.in_data           (fifo_0_in_agent_rp_data),                     //          .data
		.out_ready         (agent_pipeline_021_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (clk_50_clk_clk),                                    //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (fifo_0_in_csr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (fifo_0_in_csr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (fifo_0_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (fifo_0_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (fifo_0_in_csr_burst_adapter_source0_data),          //          .data
		.in_channel        (fifo_0_in_csr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_022_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),                   //          .data
		.out_channel       (agent_pipeline_022_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (fifo_0_in_csr_agent_rp_ready),                //     sink0.ready
		.in_valid          (fifo_0_in_csr_agent_rp_valid),                //          .valid
		.in_startofpacket  (fifo_0_in_csr_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (fifo_0_in_csr_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (fifo_0_in_csr_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_023_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_024 (
		.clk               (pll_sys_outclk2_clk),                         //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (ledr_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ledr_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ledr_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ledr_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ledr_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (ledr_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_024_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_024_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_024_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_024_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_024_source0_data),             //          .data
		.out_channel       (agent_pipeline_024_source0_channel),          //          .channel
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_025 (
		.clk               (pll_sys_outclk2_clk),                      //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (ledr_s1_agent_rp_ready),                   //     sink0.ready
		.in_valid          (ledr_s1_agent_rp_valid),                   //          .valid
		.in_startofpacket  (ledr_s1_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (ledr_s1_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_025_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_025_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_025_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_025_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_025_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_026 (
		.clk               (pll_sys_outclk2_clk),                        //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (key_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (key_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (key_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (key_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (key_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (key_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_026_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_026_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_026_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_026_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_026_source0_data),            //          .data
		.out_channel       (agent_pipeline_026_source0_channel),         //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_027 (
		.clk               (pll_sys_outclk2_clk),                      //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (key_s1_agent_rp_ready),                    //     sink0.ready
		.in_valid          (key_s1_agent_rp_valid),                    //          .valid
		.in_startofpacket  (key_s1_agent_rp_startofpacket),            //          .startofpacket
		.in_endofpacket    (key_s1_agent_rp_endofpacket),              //          .endofpacket
		.in_data           (key_s1_agent_rp_data),                     //          .data
		.out_ready         (agent_pipeline_027_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_027_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_027_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_027_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_027_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_028 (
		.clk               (pll_sys_outclk2_clk),                       //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sw_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sw_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sw_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sw_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sw_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sw_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_028_source0_ready),          //   source0.ready
		.out_valid         (agent_pipeline_028_source0_valid),          //          .valid
		.out_startofpacket (agent_pipeline_028_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (agent_pipeline_028_source0_endofpacket),    //          .endofpacket
		.out_data          (agent_pipeline_028_source0_data),           //          .data
		.out_channel       (agent_pipeline_028_source0_channel),        //          .channel
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.out_error         (),                                          // (terminated)
		.in_error          (1'b0)                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_029 (
		.clk               (pll_sys_outclk2_clk),                      //       cr0.clk
		.reset             (ledr_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.in_ready          (sw_s1_agent_rp_ready),                     //     sink0.ready
		.in_valid          (sw_s1_agent_rp_valid),                     //          .valid
		.in_startofpacket  (sw_s1_agent_rp_startofpacket),             //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rp_endofpacket),               //          .endofpacket
		.in_data           (sw_s1_agent_rp_data),                      //          .data
		.out_ready         (agent_pipeline_029_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_029_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_029_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_029_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_029_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_030 (
		.clk               (clk_50_clk_clk),                                 //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (timer_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (timer_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (timer_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (timer_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (timer_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (timer_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_030_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_030_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_030_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_030_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_030_source0_data),                //          .data
		.out_channel       (agent_pipeline_030_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_031 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (timer_0_s1_agent_rp_ready),                   //     sink0.ready
		.in_valid          (timer_0_s1_agent_rp_valid),                   //          .valid
		.in_startofpacket  (timer_0_s1_agent_rp_startofpacket),           //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rp_endofpacket),             //          .endofpacket
		.in_data           (timer_0_s1_agent_rp_data),                    //          .data
		.out_ready         (agent_pipeline_031_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_031_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_031_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_031_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_031_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_032 (
		.clk               (clk_50_clk_clk),                                    //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (i2c_data_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (i2c_data_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (i2c_data_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (i2c_data_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (i2c_data_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (i2c_data_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_032_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_032_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_032_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_032_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_032_source0_data),                   //          .data
		.out_channel       (agent_pipeline_032_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_033 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (i2c_data_0_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (i2c_data_0_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (i2c_data_0_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (i2c_data_0_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (i2c_data_0_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_033_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_033_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_033_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_033_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_033_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_034 (
		.clk               (clk_50_clk_clk),                                        //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (i2c_end_flag_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (i2c_end_flag_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (i2c_end_flag_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (i2c_end_flag_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (i2c_end_flag_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (i2c_end_flag_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_034_source0_ready),                      //   source0.ready
		.out_valid         (agent_pipeline_034_source0_valid),                      //          .valid
		.out_startofpacket (agent_pipeline_034_source0_startofpacket),              //          .startofpacket
		.out_endofpacket   (agent_pipeline_034_source0_endofpacket),                //          .endofpacket
		.out_data          (agent_pipeline_034_source0_data),                       //          .data
		.out_channel       (agent_pipeline_034_source0_channel),                    //          .channel
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_error          (1'b0)                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_035 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (i2c_end_flag_0_s1_agent_rp_ready),            //     sink0.ready
		.in_valid          (i2c_end_flag_0_s1_agent_rp_valid),            //          .valid
		.in_startofpacket  (i2c_end_flag_0_s1_agent_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_end_flag_0_s1_agent_rp_endofpacket),      //          .endofpacket
		.in_data           (i2c_end_flag_0_s1_agent_rp_data),             //          .data
		.out_ready         (agent_pipeline_035_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_035_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_035_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_035_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_035_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_036 (
		.clk               (clk_50_clk_clk),                                          //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.in_ready          (i2c_start_flag_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (i2c_start_flag_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (i2c_start_flag_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (i2c_start_flag_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (i2c_start_flag_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (i2c_start_flag_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_036_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_036_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_036_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_036_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_036_source0_data),                         //          .data
		.out_channel       (agent_pipeline_036_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_037 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (i2c_start_flag_0_s1_agent_rp_ready),          //     sink0.ready
		.in_valid          (i2c_start_flag_0_s1_agent_rp_valid),          //          .valid
		.in_startofpacket  (i2c_start_flag_0_s1_agent_rp_startofpacket),  //          .startofpacket
		.in_endofpacket    (i2c_start_flag_0_s1_agent_rp_endofpacket),    //          .endofpacket
		.in_data           (i2c_start_flag_0_s1_agent_rp_data),           //          .data
		.out_ready         (agent_pipeline_037_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_037_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_037_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_037_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_037_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (20),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_038 (
		.clk               (clk_50_clk_clk),                                    //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (play_out_0_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (play_out_0_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (play_out_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (play_out_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (play_out_0_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (play_out_0_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_038_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_038_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_038_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_038_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_038_source0_data),                   //          .data
		.out_channel       (agent_pipeline_038_source0_channel),                //          .channel
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_error          (1'b0)                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (125),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_039 (
		.clk               (clk_50_clk_clk),                              //       cr0.clk
		.reset             (fifo_0_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (play_out_0_s1_agent_rp_ready),                //     sink0.ready
		.in_valid          (play_out_0_s1_agent_rp_valid),                //          .valid
		.in_startofpacket  (play_out_0_s1_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (play_out_0_s1_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (play_out_0_s1_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_039_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_039_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_039_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_039_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_039_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (alt_vip_mix_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (alt_vip_mix_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (alt_vip_mix_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                 //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (alt_vip_cti_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (alt_vip_cti_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (alt_vip_cti_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_jtag_debug_module_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_jtag_debug_module_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_jtag_debug_module_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (clock_crossing_io_slow_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (clock_crossing_io_slow_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (clock_crossing_io_slow_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                         //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (onchip_memory2_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (onchip_memory2_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                     // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (uart_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (uart_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)        //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                       // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (timer_stamp_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (timer_stamp_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (timer_stamp_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)          //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_n_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (alt_vip_vfr_0_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_0_in_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (fifo_0_in_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (fifo_0_in_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)            //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_0_in_csr_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (fifo_0_in_csr_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (fifo_0_in_csr_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)            //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_sys_outclk2_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ledr_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)       //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_sys_outclk2_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ledr_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)       //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_sys_outclk2_clk),                    // in_clk_0.clk
		.in_rst_0_reset (ledr_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)       //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)            //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_data_0_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (i2c_data_0_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (i2c_data_0_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)            //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (i2c_end_flag_0_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_end_flag_0_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_end_flag_0_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)             //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_50_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (i2c_start_flag_0_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (i2c_start_flag_0_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (i2c_start_flag_0_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)               //         .error
	);

	DE1_SoC_QSYS_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (fifo_0_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (play_out_0_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (play_out_0_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (play_out_0_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)            //         .error
	);

endmodule
